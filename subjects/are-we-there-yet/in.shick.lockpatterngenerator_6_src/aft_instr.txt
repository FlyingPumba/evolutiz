public class in.shick.lockpatterngenerator.BaseActivity extends android.app.Activity
{
    protected android.content.SharedPreferences mPreferences;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    protected int mPreferences$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.BaseActivity r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.BaseActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32419, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.BaseActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 448);
        $r1 = <in.shick.lockpatterngenerator.BaseActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45366, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.BaseActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45366, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.app.Activity: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void onCreate(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.BaseActivity r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;
        android.content.SharedPreferences $r4;

        r0 := @this: in.shick.lockpatterngenerator.BaseActivity;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1621, 32420, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.BaseActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 448);
        $r2 = <in.shick.lockpatterngenerator.BaseActivity: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45367, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.BaseActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45367, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1621, null, null);
        specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(4842, null);
        $r4 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r0);
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 449);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(449);
        r0.<in.shick.lockpatterngenerator.BaseActivity: android.content.SharedPreferences mPreferences> = $r4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32421, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.BaseActivity: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32422, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.BaseActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 448);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.BaseActivity: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(448);
        <in.shick.lockpatterngenerator.BaseActivity: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/BaseActivity", 3934875465310441168L);
        return $r0;
    }
}
public final class in.shick.lockpatterngenerator.BuildConfig extends java.lang.Object
{
    public static final boolean DEBUG;
    public static final acteve.symbolic.integer.Expression DEBUG$sym;
    public static final int DEBUG$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.BuildConfig r0;

        r0 := @this: in.shick.lockpatterngenerator.BuildConfig;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32423, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public class in.shick.lockpatterngenerator.Defaults extends java.lang.Object
{
    public static final int GRID_LENGTH;
    public static final int PATTERN_MIN;
    public static final int PATTERN_MAX;
    public static final java.lang.String HIGHLIGHT_MODE;
    public static final boolean REMIND_OF_SEPARATION;
    public static final boolean EXITED_HARD;
    public static final boolean TACTILE_FEEDBACK;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    public static final acteve.symbolic.integer.Expression GRID_LENGTH$sym;
    public static final int GRID_LENGTH$a3tid;
    public static final acteve.symbolic.integer.Expression PATTERN_MIN$sym;
    public static final int PATTERN_MIN$a3tid;
    public static final acteve.symbolic.integer.Expression PATTERN_MAX$sym;
    public static final int PATTERN_MAX$a3tid;
    public static final int HIGHLIGHT_MODE$a3tid;
    public static final acteve.symbolic.integer.Expression REMIND_OF_SEPARATION$sym;
    public static final int REMIND_OF_SEPARATION$a3tid;
    public static final acteve.symbolic.integer.Expression EXITED_HARD$sym;
    public static final int EXITED_HARD$a3tid;
    public static final acteve.symbolic.integer.Expression TACTILE_FEEDBACK$sym;
    public static final int TACTILE_FEEDBACK$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.Defaults r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.Defaults;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32424, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.Defaults: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 450);
        $r1 = <in.shick.lockpatterngenerator.Defaults: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45368, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.Defaults: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45368, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32425, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.Defaults: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 1);
        r1 = $r0[1];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32426, 0);
        $r0 = newmultiarray (boolean)[2][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.Defaults: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 450);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.Defaults: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(450);
        <in.shick.lockpatterngenerator.Defaults: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/Defaults", 9251206036812L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.EmergencyExit extends java.lang.Object
{
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.EmergencyExit r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.EmergencyExit;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32427, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmergencyExit: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 451);
        $r1 = <in.shick.lockpatterngenerator.EmergencyExit: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45369, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmergencyExit: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45369, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public static void clearAndBail(android.content.Context)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        android.content.Context r0;
        boolean[][] $r1;
        boolean[] r2;
        android.content.SharedPreferences $r3;
        android.content.SharedPreferences$Editor $r4, $r5, $r6;

        r0 := @parameter0: android.content.Context;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21743, 32428, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmergencyExit: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 451);
        $r1 = <in.shick.lockpatterngenerator.EmergencyExit: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45370, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmergencyExit: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45370, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(4842, null);
        $r3 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5321, null);
        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8335, null);
        $r5 = interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor clear()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5636, null, null, null);
        $r6 = interfaceinvoke $r5.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("exited_hard", 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8350, null);
        interfaceinvoke $r6.<android.content.SharedPreferences$Editor: boolean commit()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(3010, null);
        staticinvoke <java.lang.System: void exit(int)>(-1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32429, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.EmergencyExit: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32430, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmergencyExit: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 451);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.EmergencyExit: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(451);
        <in.shick.lockpatterngenerator.EmergencyExit: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/EmergencyExit", 3934875470584630667L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation extends android.app.Instrumentation implements in.shick.lockpatterngenerator.EmmaInstrument.FinishListener
{
    public static java.lang.String TAG;
    private static final java.lang.String DEFAULT_COVERAGE_FILE_PATH;
    private final android.os.Bundle mResults;
    private android.content.Intent mIntent;
    private static final boolean LOGD;
    private boolean mCoverage;
    private java.lang.String mCoverageFilePath;
    private static final boolean[][] $VRc;
    public static int TAG$a3tid;
    private static final int DEFAULT_COVERAGE_FILE_PATH$a3tid;
    private final int mResults$a3tid;
    private int mIntent$a3tid;
    private static final acteve.symbolic.integer.Expression LOGD$sym;
    private static final int LOGD$a3tid;
    private acteve.symbolic.integer.Expression mCoverage$sym;
    private int mCoverage$a3tid;
    private int mCoverageFilePath$a3tid;
    private static final int $VRc$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        boolean[][] $r1;
        boolean[] r2;
        android.os.Bundle $r3;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32431, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45371, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45371, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.app.Instrumentation: void <init>()>();
        $r3 = new android.os.Bundle;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<android.os.Bundle: void <init>()>();
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mResults$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 453);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mResults$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(453);
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: android.os.Bundle mResults> = $r3;
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: acteve.symbolic.integer.Expression mCoverage$sym> = null;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 454);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(454);
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean mCoverage> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void onCreate(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;
        java.lang.String $r4, $r9, $r10;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        boolean $z0;
        android.content.Intent $r11, $r13;
        android.content.Context $r12;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1621, 32432, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r2 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45372, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45372, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 455);
        $r4 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        $r5 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onCreate(");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, $r9);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1621, null, null);
        specialinvoke r0.<android.app.Instrumentation: void onCreate(android.os.Bundle)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_7 = null;
        if r1 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45373, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21744, null, null, null);
        $z0 = specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r1, "coverage");
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21744);
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: acteve.symbolic.integer.Expression mCoverage$sym> = $z0$sym;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 454);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(454);
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean mCoverage> = $z0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2706, null, null);
        $r10 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverageFile");
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 456);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(456);
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String mCoverageFilePath> = $r10;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45373, 1);
        goto label3;

     label3:
        $r11 = new android.content.Intent;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8437, null);
        $r12 = virtualinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: android.content.Context getTargetContext()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9129, null, null, null);
        specialinvoke $r11.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r12, class "in/shick/lockpatterngenerator/EmmaInstrument/InstrumentedActivity");
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mIntent$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 457);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mIntent$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(457);
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: android.content.Intent mIntent> = $r11;
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mIntent$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 457);
        $r13 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: android.content.Intent mIntent>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1591, null, null);
        virtualinvoke $r13.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(535, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void start()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        return;
    }

    public void onStart()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity r3;
        java.lang.String $r4;
        android.content.Intent $r5;
        android.app.Activity $r6;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(8425, 32433, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45374, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45374, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        _sym_tmp_2 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 455);
        $r4 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, "onStart()");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8425, null);
        specialinvoke r0.<android.app.Instrumentation: void onStart()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(10470);
        staticinvoke <android.os.Looper: void prepare()>();
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mIntent$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 457);
        $r5 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: android.content.Intent mIntent>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8450, null, null);
        $r6 = virtualinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: android.app.Activity startActivitySync(android.content.Intent)>($r5);
        r3 = (in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity) $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21745, null, null);
        virtualinvoke r3.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: void setFinishListener(in.shick.lockpatterngenerator.EmmaInstrument.FinishListener)>(r0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private boolean getBooleanArgument(android.os.Bundle, java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $z1$sym, $z0$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        android.os.Bundle r1;
        java.lang.String r2, r5;
        boolean[][] $r3;
        boolean[] r4;
        boolean $z0, $z1;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: android.os.Bundle;
        r2 := @parameter1: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21744, 32434, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r3 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45375, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45375, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 3);
        r4 = $r3[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2706, null, null);
        r5 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(r2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_2 = null;
        if r5 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45376, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(20857, null);
        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r5);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(20857);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45377, 0);
        $z1$sym = null;
        $z1 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        goto label5;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45376, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45377, 1);
        goto label4;

     label4:
        $z1$sym = null;
        $z1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 3);
        r4[3] = 1;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 4);
        r4[4] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21744, $z1$sym);
        return $z1;
    }

    private void generateCoverageReport()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        boolean[][] $r1;
        boolean[] r2;
        java.io.File r3, $r7;
        java.lang.Class r4, $r10, $r11, $r12;
        java.lang.reflect.Method r5;
        java.lang.String $r6, $r8;
        java.lang.Class[] $r9;
        java.lang.Object[] $r13;
        java.lang.Boolean $r14, $r15;
        java.lang.ClassNotFoundException $r17, r18;
        java.lang.SecurityException $r19, r20;
        java.lang.NoSuchMethodException $r21, r22;
        java.lang.IllegalArgumentException $r23, r24;
        java.lang.IllegalAccessException $r25, r26;
        java.lang.reflect.InvocationTargetException $r27, r28;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21749, 32435, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45378, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45378, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        _sym_tmp_2 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 455);
        $r6 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, "generateCoverageReport()");
        $r7 = new java.io.File;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21746, null);
        $r8 = specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String getCoverageFilePath()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1, null, null);
        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8);
        r3 = $r7;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2060, null);
        r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.vladium.emma.rt.RT");
        $r9 = newarray (java.lang.Class)[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1386, null);
        $r10 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r9, 0);
        $r9[0] = $r10;
        $r11 = <java.lang.Boolean: java.lang.Class TYPE>;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r9, 1);
        $r9[1] = $r11;
        $r12 = <java.lang.Boolean: java.lang.Class TYPE>;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r9, 2);
        $r9[2] = $r12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2770, null, null, null);
        r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dumpCoverageData", $r9);
        $r13 = newarray (java.lang.Object)[3];
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r13, 0);
        $r13[0] = r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2654, null);
        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r13, 1);
        $r13[1] = $r14;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2654, null);
        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r13, 2);
        $r13[2] = $r15;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2771, null, null, null);
        virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label3:
        goto label10;

     label4:
        $r17 := @caughtexception;
        r18 = $r17;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21747, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.String,java.lang.Exception)>("Emma.jar not in the class path?", r18);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label10;

     label5:
        $r19 := @caughtexception;
        r20 = $r19;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21748, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>(r20);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label10;

     label6:
        $r21 := @caughtexception;
        r22 = $r21;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21748, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>(r22);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label10;

     label7:
        $r23 := @caughtexception;
        r24 = $r23;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21748, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>(r24);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        goto label10;

     label8:
        $r25 := @caughtexception;
        r26 = $r25;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21748, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>(r26);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label10;

     label9:
        $r27 := @caughtexception;
        r28 = $r27;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21748, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>(r28);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;

     label10:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        return;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.SecurityException from label2 to label3 with label5;
        catch java.lang.NoSuchMethodException from label2 to label3 with label6;
        catch java.lang.IllegalArgumentException from label2 to label3 with label7;
        catch java.lang.IllegalAccessException from label2 to label3 with label8;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label9;
    }

    private java.lang.String getCoverageFilePath()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String $r3, $r4;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21746, 32436, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45379, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45379, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 5);
        r2 = $r1[5];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 456);
        $r3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String mCoverageFilePath>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_4 = null;
        if $r3 != null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45380, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        return "/mnt/sdcard/coverage.ec";

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45380, 1);
        goto label3;

     label3:
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 456);
        $r4 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String mCoverageFilePath>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return $r4;
    }

    private boolean setCoverageFilePath(java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        java.lang.String r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21750, 32437, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r2 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45381, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45381, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 6);
        r3 = $r2[6];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_3 = null;
        if r1 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45382, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(152, null);
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(152);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_3 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 0);
        if $i0 <= 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45383, 0);
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 456);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(456);
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String mCoverageFilePath> = r1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21750, null);
        return 1;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45382, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45383, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21750, null);
        return 0;
    }

    private void reportEmmaError(java.lang.Exception)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        java.lang.Exception r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: java.lang.Exception;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21748, 32438, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r2 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45384, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45384, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 7);
        r3 = $r2[7];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21747, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.String,java.lang.Exception)>("", r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private void reportEmmaError(java.lang.String, java.lang.Exception)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        java.lang.String r1, r5, $r9, $r14;
        java.lang.Exception r2;
        boolean[][] $r3;
        boolean[] r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13;
        android.os.Bundle $r10;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Exception;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21747, 32439, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r3 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45385, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45385, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 8);
        r4 = $r3[8];
        $r6 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to generate emma coverage. ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        _sym_tmp_2 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 455);
        $r9 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(110, null, null, null);
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, r5, r2);
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mResults$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 453);
        $r10 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: android.os.Bundle mResults>;
        $r11 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nError: ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7751, null, null, null);
        virtualinvoke $r10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r14);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        return;
    }

    public void onActivityFinished()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String $r3;
        boolean $z0;
        android.os.Bundle $r4;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21751, 32440, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45386, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45386, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];
        _sym_tmp_2 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 455);
        $r3 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r3, "onActivityFinished()");
        $z0$sym = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: acteve.symbolic.integer.Expression mCoverage$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 454);
        $z0 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean mCoverage>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45387, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21749, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void generateCoverageReport()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45387, 1);
        goto label3;

     label3:
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mResults$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 453);
        $r4 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: android.os.Bundle mResults>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8430, null, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void finish(int,android.os.Bundle)>(-1, $r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    public void dumpIntermediateCoverage(java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $z1$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r0;
        java.lang.String r1, $r4, $r8, $r9, $r14;
        boolean[][] $r2;
        boolean[] r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12, $r13;
        boolean $z0, $z1;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21752, 32441, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 452);
        $r2 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45388, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45388, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 10);
        r3 = $r2[10];
        _sym_tmp_2 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 455);
        $r4 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        $r5 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Intermidate Dump Called with file name :");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, $r8);
        $z0$sym = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: acteve.symbolic.integer.Expression mCoverage$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 454);
        $z0 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean mCoverage>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45389, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21750, null, null);
        $z1 = specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean setCoverageFilePath(java.lang.String)>(r1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21750);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45390, 0);
        _sym_tmp_4 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 455);
        $r9 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        $r10 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to set the given file path:");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as dump target.");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r9, $r14);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45390, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21749, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void generateCoverageReport()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21750, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean setCoverageFilePath(java.lang.String)>("/mnt/sdcard/coverage.ec");
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45389, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        return;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32442, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 11);
        r1 = $r0[11];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 455);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(455);
        <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG> = "EmmaInstrumentation:";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32443, 0);
        $r0 = newmultiarray (boolean)[12][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 452);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(452);
        <in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[5];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[8];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[3];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[4];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[1];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[1];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[3];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[5];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[1];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/EmmaInstrument/EmmaInstrumentation", -6390195098943533753L);
        return $r0;
    }
}
public interface  in.shick.lockpatterngenerator.EmmaInstrument.FinishListener extends java.lang.Object
{

    public abstract void onActivityFinished();

    public abstract void dumpIntermediateCoverage(java.lang.String);
}
class in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector extends android.content.BroadcastReceiver
{
    final in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector r0;
        in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector;
        r1 := @parameter0: in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21753, 32444, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 458);
        $r2 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45391, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45391, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 459);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(459);
        r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onReceive(android.content.Context, android.content.Intent)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $z1$sym, $z0$sym, $r16$sym, $r15$sym, $r14$sym, $i0$sym, $r12$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector r0;
        android.content.Context r1;
        android.content.Intent r2;
        boolean[][] $r3;
        boolean[] r4;
        android.os.Bundle r5;
        java.lang.Object[] r6, $r13;
        android.telephony.SmsMessage r7;
        java.lang.String r8, r9, $r17;
        in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity $r10, $r18;
        in.shick.lockpatterngenerator.EmmaInstrument.FinishListener $r11, $r19;
        java.lang.Object $r12, $r14;
        byte[] $r15, $r16;
        boolean $z0, $z1;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector;
        r1 := @parameter0: android.content.Context;
        r2 := @parameter1: android.content.Intent;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(728, 32445, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 458);
        $r3 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45392, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45392, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 1);
        r4 = $r3[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(730, null);
        r5 = virtualinvoke r2.<android.content.Intent: android.os.Bundle getExtras()>();
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 459);
        $r10 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21754, null);
        $r11 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: in.shick.lockpatterngenerator.EmmaInstrument.FinishListener access$000(in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity)>($r10);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_4 = null;
        if $r11 == null goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45393, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        _sym_tmp_4 = null;
        if r5 == null goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45394, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(731, null, null);
        $r12 = virtualinvoke r5.<android.os.Bundle: java.lang.Object get(java.lang.String)>("pdus");
        $r12$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(731);
        $r13 = (java.lang.Object[]) $r12;
        r6 = (java.lang.Object[]) $r13;
        $i0$sym = null;
        $i0 = lengthof r6;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 0);
        if $i0 <= 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45395, 0);
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>(r6, 0);
        $r14 = r6[0];
        $r15$sym = $r14$sym;
        $r15 = (byte[]) $r14;
        $r16$sym = $r15$sym;
        $r16 = (byte[]) $r15;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5113, $r16$sym);
        r7 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>($r16);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(4804, null);
        $r17 = virtualinvoke r7.<android.telephony.SmsMessage: java.lang.String getMessageBody()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r8 = virtualinvoke $r17.<java.lang.String: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5110, null);
        r9 = virtualinvoke r7.<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(4073, null, null);
        $z0 = virtualinvoke r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("6782345628");
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(4073);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 3);
        r4[3] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45396, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(57, null, null);
        $z1 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("/mnt/sdcard");
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(57);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 4);
        r4[4] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45397, 0);
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45396, 1);
        goto label3;

     label3:
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 459);
        $r18 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21754, null);
        $r19 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: in.shick.lockpatterngenerator.EmmaInstrument.FinishListener access$000(in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity)>($r18);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21752, null, null);
        interfaceinvoke $r19.<in.shick.lockpatterngenerator.EmmaInstrument.FinishListener: void dumpIntermediateCoverage(java.lang.String)>(r8);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 5);
        r4[5] = 1;
        goto label8;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45393, 1);
        goto label8;

        goto label8;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45394, 1);
        goto label8;

        goto label8;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45395, 1);
        goto label8;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45397, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 6);
        r4[6] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32446, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32447, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 458);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(458);
        <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[7];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/EmmaInstrument/InstrumentedActivity$CoverageCollector", -1604738725137032633L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity extends in.shick.lockpatterngenerator.GeneratorActivity
{
    public static java.lang.String TAG;
    private in.shick.lockpatterngenerator.EmmaInstrument.FinishListener mListener;
    private static final boolean[][] $VRc;
    public static int TAG$a3tid;
    private int mListener$a3tid;
    private static final int $VRc$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32448, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 460);
        $r1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45398, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45398, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void setFinishListener(in.shick.lockpatterngenerator.EmmaInstrument.FinishListener)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity r0;
        in.shick.lockpatterngenerator.EmmaInstrument.FinishListener r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity;
        r1 := @parameter0: in.shick.lockpatterngenerator.EmmaInstrument.FinishListener;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21745, 32449, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 460);
        $r2 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45399, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45399, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void finish()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;
        in.shick.lockpatterngenerator.EmmaInstrument.FinishListener $r8, $r9;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1658, 32450, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 460);
        $r1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45400, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45400, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        $r3 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        _sym_tmp_2 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 461);
        $r4 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: java.lang.String TAG>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".InstrumentedActivity");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r7, "finish()");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1658, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void finish()>();
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int mListener$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 462);
        $r8 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: in.shick.lockpatterngenerator.EmmaInstrument.FinishListener mListener>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_5 = null;
        if $r8 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45401, 0);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int mListener$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 462);
        $r9 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: in.shick.lockpatterngenerator.EmmaInstrument.FinishListener mListener>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        interfaceinvoke $r9.<in.shick.lockpatterngenerator.EmmaInstrument.FinishListener: void onActivityFinished()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45401, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    static in.shick.lockpatterngenerator.EmmaInstrument.FinishListener access$000(in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.EmmaInstrument.FinishListener $r3;

        r0 := @parameter0: in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21754, 32451, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 460);
        $r1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45402, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45402, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int mListener$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 462);
        $r3 = r0.<in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: in.shick.lockpatterngenerator.EmmaInstrument.FinishListener mListener>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32452, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 4);
        r1 = $r0[4];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 461);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int TAG$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(461);
        <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: java.lang.String TAG> = "IntrumentedPlayer";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32453, 0);
        $r0 = newmultiarray (boolean)[5][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 460);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(460);
        <in.shick.lockpatterngenerator.EmmaInstrument.InstrumentedActivity: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[3];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/EmmaInstrument/InstrumentedActivity", -3953097121653020106L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver extends android.content.BroadcastReceiver
{
    public static java.lang.String TAG;
    private static final boolean[][] $VRc;
    public static int TAG$a3tid;
    private static final int $VRc$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32454, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 463);
        $r1 = <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45403, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45403, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void onReceive(android.content.Context, android.content.Intent)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver r0;
        android.content.Context r1;
        android.content.Intent r2;
        boolean[][] $r3;
        boolean[] r4;
        in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation r6, $r7;

        r0 := @this: in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver;
        r1 := @parameter0: android.content.Context;
        r2 := @parameter1: android.content.Intent;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(728, 32455, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 463);
        $r3 = <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45404, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45404, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 1);
        r4 = $r3[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(730, null);
        virtualinvoke r2.<android.content.Intent: android.os.Bundle getExtras()>();
        $r7 = new in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r7.<in.shick.lockpatterngenerator.EmmaInstrument.EmmaInstrumentation: void <init>()>();
        r6 = $r7;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_2 = null;
        if r6 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45405, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21752, null, null);
        interfaceinvoke r6.<in.shick.lockpatterngenerator.EmmaInstrument.FinishListener: void dumpIntermediateCoverage(java.lang.String)>("/mnt/sdcard/coverage.ec");
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45405, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        return;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32456, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 464);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: int TAG$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(464);
        <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: java.lang.String TAG> = "M3SMSInstrumentedReceiver";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32457, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 463);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(463);
        <in.shick.lockpatterngenerator.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/EmmaInstrument/SMSInstrumentedReceiver", 8704909102833939831L);
        return $r0;
    }
}
class in.shick.lockpatterngenerator.GeneratorActivity$1 extends java.lang.Object implements java.lang.Thread$UncaughtExceptionHandler
{
    final java.lang.Thread$UncaughtExceptionHandler val$exceptionHandler;
    final in.shick.lockpatterngenerator.GeneratorActivity this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int val$exceptionHandler$a3tid;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(in.shick.lockpatterngenerator.GeneratorActivity, java.lang.Thread$UncaughtExceptionHandler)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$1 r0;
        in.shick.lockpatterngenerator.GeneratorActivity r1;
        java.lang.Thread$UncaughtExceptionHandler r2;
        boolean[][] $r3;
        boolean[] r4;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$1;
        r1 := @parameter0: in.shick.lockpatterngenerator.GeneratorActivity;
        r2 := @parameter1: java.lang.Thread$UncaughtExceptionHandler;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21755, 32458, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 465);
        $r3 = <in.shick.lockpatterngenerator.GeneratorActivity$1: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45406, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45406, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 0);
        r4 = $r3[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 466);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$1: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(466);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$1: in.shick.lockpatterngenerator.GeneratorActivity this$0> = r1;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$1: int val$exceptionHandler$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 467);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$1: int val$exceptionHandler$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(467);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$1: java.lang.Thread$UncaughtExceptionHandler val$exceptionHandler> = r2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        return;
    }

    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $z0$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$1 r0;
        java.lang.Thread r1;
        java.lang.Throwable r2;
        boolean[][] $r3;
        boolean[] r4;
        boolean $z0;
        in.shick.lockpatterngenerator.GeneratorActivity $r5;
        java.lang.Thread$UncaughtExceptionHandler $r6;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$1;
        r1 := @parameter0: java.lang.Thread;
        r2 := @parameter1: java.lang.Throwable;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(3014, 32459, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 465);
        $r3 = <in.shick.lockpatterngenerator.GeneratorActivity$1: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45407, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45407, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 1);
        r4 = $r3[1];
        $z0$sym = null;
        $z0 = r2 instanceof java.lang.OutOfMemoryError;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45408, 0);
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 466);
        $r5 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$1: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21743, null);
        staticinvoke <in.shick.lockpatterngenerator.EmergencyExit: void clearAndBail(android.content.Context)>($r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45408, 1);
        goto label3;

     label3:
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$1: int val$exceptionHandler$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 467);
        $r6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$1: java.lang.Thread$UncaughtExceptionHandler val$exceptionHandler>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(3014, null, null, null);
        interfaceinvoke $r6.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r1, r2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32460, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32461, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 465);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.GeneratorActivity$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(465);
        <in.shick.lockpatterngenerator.GeneratorActivity$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/GeneratorActivity$1", 4144312707198246047L);
        return $r0;
    }
}
class in.shick.lockpatterngenerator.GeneratorActivity$2 extends java.lang.Object implements android.view.View$OnClickListener
{
    final in.shick.lockpatterngenerator.GeneratorActivity this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(in.shick.lockpatterngenerator.GeneratorActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$2 r0;
        in.shick.lockpatterngenerator.GeneratorActivity r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$2;
        r1 := @parameter0: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21756, 32462, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 468);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$2: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45409, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$2: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45409, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 469);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$2: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(469);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$2: in.shick.lockpatterngenerator.GeneratorActivity this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_8, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$2 r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        in.shick.lockpatterngenerator.GeneratorActivity $r4, $r6, $r9;
        in.shick.lockpatterngenerator.LockPatternView $r5, $r10;
        in.shick.lockpatterngenerator.PatternGenerator $r7;
        java.util.List $r8;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$2;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1399, 32463, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 468);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$2: boolean[][] $VRc>;
        _sym_tmp_8 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45410, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$2: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45410, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 469);
        $r4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$2: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_3 = $r4.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 470);
        $r5 = $r4.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 469);
        $r6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$2: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_5 = $r6.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 471);
        $r7 = $r6.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.PatternGenerator mGenerator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21757, null);
        $r8 = virtualinvoke $r7.<in.shick.lockpatterngenerator.PatternGenerator: java.util.List getPattern()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21758, null, null);
        virtualinvoke $r5.<in.shick.lockpatterngenerator.LockPatternView: void setPattern(java.util.List)>($r8);
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 469);
        $r9 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$2: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_7 = $r9.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 470);
        $r10 = $r9.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke $r10.<in.shick.lockpatterngenerator.LockPatternView: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32464, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$2: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32465, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 468);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.GeneratorActivity$2: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(468);
        <in.shick.lockpatterngenerator.GeneratorActivity$2: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/GeneratorActivity$2", 4320153515339174030L);
        return $r0;
    }
}
class in.shick.lockpatterngenerator.GeneratorActivity$3 extends java.lang.Object implements android.view.View$OnLongClickListener
{
    final in.shick.lockpatterngenerator.GeneratorActivity this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(in.shick.lockpatterngenerator.GeneratorActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$3 r0;
        in.shick.lockpatterngenerator.GeneratorActivity r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$3;
        r1 := @parameter0: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21756, 32466, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 472);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$3: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45411, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$3: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45411, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 473);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(473);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: in.shick.lockpatterngenerator.GeneratorActivity this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public boolean onLongClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_15, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.GeneratorActivity$3 r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        in.shick.lockpatterngenerator.LockPatternView$HighlightMode r4;
        in.shick.lockpatterngenerator.GeneratorActivity $r5, $r7, $r9, $r12, $r14, $r16, $r18;
        in.shick.lockpatterngenerator.LockPatternView $r6, $r8, $r10, $r13, $r17, $r19;
        in.shick.lockpatterngenerator.LockPatternView$NoHighlight $r11;
        java.util.List $r15;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$3;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(6419, 32467, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 472);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$3: boolean[][] $VRc>;
        _sym_tmp_15 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_15, 45412, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$3: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_15, 45412, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 473);
        $r5 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_3 = $r5.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 470);
        $r6 = $r5.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21759, null);
        $i0 = virtualinvoke $r6.<in.shick.lockpatterngenerator.LockPatternView: int getGridLength()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21759);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_15 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 3);
        if $i0 != 3 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_15, 45413, 0);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 473);
        $r7 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_5 = $r7.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 470);
        $r8 = $r7.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21760, null);
        r4 = virtualinvoke $r8.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode getHighlightMode()>();
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 473);
        $r9 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_7 = $r9.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 470);
        $r10 = $r9.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        $r11 = new in.shick.lockpatterngenerator.LockPatternView$NoHighlight;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r11.<in.shick.lockpatterngenerator.LockPatternView$NoHighlight: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21761, null, null);
        virtualinvoke $r10.<in.shick.lockpatterngenerator.LockPatternView: void setHighlightMode(in.shick.lockpatterngenerator.LockPatternView$HighlightMode)>($r11);
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 473);
        $r12 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_9 = $r12.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 470);
        $r13 = $r12.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        _sym_tmp_10 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 473);
        $r14 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21762, null);
        $r15 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: java.util.List access$000(in.shick.lockpatterngenerator.GeneratorActivity)>($r14);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21758, null, null);
        virtualinvoke $r13.<in.shick.lockpatterngenerator.LockPatternView: void setPattern(java.util.List)>($r15);
        _sym_tmp_11 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 473);
        $r16 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_12 = $r16.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 470);
        $r17 = $r16.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21763, null, null, null);
        virtualinvoke $r17.<in.shick.lockpatterngenerator.LockPatternView: void setHighlightMode(in.shick.lockpatterngenerator.LockPatternView$HighlightMode,boolean)>(r4, 1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_15, 45413, 1);
        goto label3;

     label3:
        _sym_tmp_13 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 473);
        $r18 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$3: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_14 = $r18.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 470);
        $r19 = $r18.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke $r19.<in.shick.lockpatterngenerator.LockPatternView: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6419, null);
        return 1;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32468, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$3: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32469, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 472);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.GeneratorActivity$3: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(472);
        <in.shick.lockpatterngenerator.GeneratorActivity$3: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/GeneratorActivity$3", -2721474261919914465L);
        return $r0;
    }
}
class in.shick.lockpatterngenerator.GeneratorActivity$4 extends java.lang.Object implements android.view.View$OnClickListener
{
    final in.shick.lockpatterngenerator.GeneratorActivity this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(in.shick.lockpatterngenerator.GeneratorActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$4 r0;
        in.shick.lockpatterngenerator.GeneratorActivity r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$4;
        r1 := @parameter0: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21756, 32470, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$4: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 474);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$4: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45414, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$4: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45414, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$4: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 475);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$4: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(475);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$4: in.shick.lockpatterngenerator.GeneratorActivity this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$4 r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        in.shick.lockpatterngenerator.GeneratorActivity $r4, $r6, $r7;
        android.content.SharedPreferences $r5;
        boolean $z0;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$4;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1399, 32471, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$4: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 474);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$4: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45415, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$4: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45415, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$4: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 475);
        $r4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$4: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_3 = $r4.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 449);
        $r5 = $r4.<in.shick.lockpatterngenerator.GeneratorActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        $z0 = interfaceinvoke $r5.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("remind_of_separation", 1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45416, 0);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$4: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 475);
        $r6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$4: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9577, null, null);
        virtualinvoke $r6.<in.shick.lockpatterngenerator.GeneratorActivity: void showDialog(int)>(0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45416, 1);
        goto label3;

     label3:
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$4: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 475);
        $r7 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$4: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21764, null);
        staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: void access$100(in.shick.lockpatterngenerator.GeneratorActivity)>($r7);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32472, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$4: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32473, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$4: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 474);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.GeneratorActivity$4: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(474);
        <in.shick.lockpatterngenerator.GeneratorActivity$4: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[4];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/GeneratorActivity$4", 2749687353153016309L);
        return $r0;
    }
}
class in.shick.lockpatterngenerator.GeneratorActivity$5 extends java.lang.Object implements android.widget.CompoundButton$OnCheckedChangeListener
{
    final in.shick.lockpatterngenerator.GeneratorActivity this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(in.shick.lockpatterngenerator.GeneratorActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$5 r0;
        in.shick.lockpatterngenerator.GeneratorActivity r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$5;
        r1 := @parameter0: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21756, 32474, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$5: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 476);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$5: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45417, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$5: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45417, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$5: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 477);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$5: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(477);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$5: in.shick.lockpatterngenerator.GeneratorActivity this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onCheckedChanged(android.widget.CompoundButton, boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_8, $z1$sym, r3$sym, z0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$5 r0;
        android.widget.CompoundButton r1;
        boolean z0, $z1;
        boolean[][] $r2;
        boolean[] r3;
        in.shick.lockpatterngenerator.GeneratorActivity $r4, $r6, $r8;
        android.widget.Button $r5;
        in.shick.lockpatterngenerator.LockPatternView $r7, $r9;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$5;
        r1 := @parameter0: android.widget.CompoundButton;
        z0 := @parameter1: boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1848, 32475, 3);
        z0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$5: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 476);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$5: boolean[][] $VRc>;
        _sym_tmp_8 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45418, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$5: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45418, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$5: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 477);
        $r4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$5: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_3 = $r4.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerateButton$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 478);
        $r5 = $r4.<in.shick.lockpatterngenerator.GeneratorActivity: android.widget.Button mGenerateButton>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, null, z0, 0);
        if z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45419, 0);
        $z1$sym = null;
        $z1 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45419, 1);
        goto label3;

     label3:
        $z1$sym = null;
        $z1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1342, null, $z1$sym);
        virtualinvoke $r5.<android.widget.Button: void setEnabled(boolean)>($z1);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$5: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 477);
        $r6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$5: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_5 = $r6.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 470);
        $r7 = $r6.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21765, null, z0$sym);
        virtualinvoke $r7.<in.shick.lockpatterngenerator.LockPatternView: void setPracticeMode(boolean)>(z0);
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$5: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 477);
        $r8 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$5: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_7 = $r8.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 470);
        $r9 = $r8.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke $r9.<in.shick.lockpatterngenerator.LockPatternView: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32476, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$5: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32477, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$5: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 476);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.GeneratorActivity$5: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(476);
        <in.shick.lockpatterngenerator.GeneratorActivity$5: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[4];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/GeneratorActivity$5", -1529337841603461116L);
        return $r0;
    }
}
class in.shick.lockpatterngenerator.GeneratorActivity$6 extends java.lang.Object implements android.widget.CompoundButton$OnCheckedChangeListener
{
    final in.shick.lockpatterngenerator.GeneratorActivity this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(in.shick.lockpatterngenerator.GeneratorActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$6 r0;
        in.shick.lockpatterngenerator.GeneratorActivity r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$6;
        r1 := @parameter0: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21756, 32478, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$6: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 479);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$6: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45420, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$6: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45420, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$6: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 480);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$6: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(480);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$6: in.shick.lockpatterngenerator.GeneratorActivity this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onCheckedChanged(android.widget.CompoundButton, boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r3$sym, z0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$6 r0;
        android.widget.CompoundButton r1;
        boolean z0;
        boolean[][] $r2;
        boolean[] r3;
        in.shick.lockpatterngenerator.GeneratorActivity $r4;
        android.content.SharedPreferences $r5;
        android.content.SharedPreferences$Editor $r6, $r7;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$6;
        r1 := @parameter0: android.widget.CompoundButton;
        z0 := @parameter1: boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1848, 32479, 3);
        z0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$6: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 479);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$6: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45421, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$6: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45421, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$6: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 480);
        $r4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$6: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        _sym_tmp_3 = $r4.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 449);
        $r5 = $r4.<in.shick.lockpatterngenerator.GeneratorActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5321, null);
        $r6 = interfaceinvoke $r5.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5636, null, null, z0$sym);
        $r7 = interfaceinvoke $r6.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("remind_of_separation", z0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8350, null);
        interfaceinvoke $r7.<android.content.SharedPreferences$Editor: boolean commit()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32480, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$6: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32481, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$6: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 479);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.GeneratorActivity$6: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(479);
        <in.shick.lockpatterngenerator.GeneratorActivity$6: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/GeneratorActivity$6", 4320153514228818346L);
        return $r0;
    }
}
class in.shick.lockpatterngenerator.GeneratorActivity$7 extends java.lang.Object implements android.content.DialogInterface$OnClickListener
{
    final in.shick.lockpatterngenerator.GeneratorActivity this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(in.shick.lockpatterngenerator.GeneratorActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$7 r0;
        in.shick.lockpatterngenerator.GeneratorActivity r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$7;
        r1 := @parameter0: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21756, 32482, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$7: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 481);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$7: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45422, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$7: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45422, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$7: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 482);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$7: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(482);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$7: in.shick.lockpatterngenerator.GeneratorActivity this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.content.DialogInterface, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.GeneratorActivity$7 r0;
        android.content.DialogInterface r1;
        boolean[][] $r2;
        boolean[] r3;
        in.shick.lockpatterngenerator.GeneratorActivity $r4;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$7;
        r1 := @parameter0: android.content.DialogInterface;
        i0 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1528, 32483, 3);
        i0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$7: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 481);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$7: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45423, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$7: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45423, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$7: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 482);
        $r4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$7: in.shick.lockpatterngenerator.GeneratorActivity this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21764, null);
        staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: void access$100(in.shick.lockpatterngenerator.GeneratorActivity)>($r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32484, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$7: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32485, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$7: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 481);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.GeneratorActivity$7: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(481);
        <in.shick.lockpatterngenerator.GeneratorActivity$7: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/GeneratorActivity$7", 4320153508954628847L);
        return $r0;
    }
}
class in.shick.lockpatterngenerator.GeneratorActivity$8 extends java.lang.Object implements android.content.DialogInterface$OnClickListener
{
    final in.shick.lockpatterngenerator.GeneratorActivity this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(in.shick.lockpatterngenerator.GeneratorActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity$8 r0;
        in.shick.lockpatterngenerator.GeneratorActivity r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$8;
        r1 := @parameter0: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21756, 32486, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$8: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 483);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$8: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45424, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$8: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45424, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity$8: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 484);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$8: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(484);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity$8: in.shick.lockpatterngenerator.GeneratorActivity this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.content.DialogInterface, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.GeneratorActivity$8 r0;
        android.content.DialogInterface r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity$8;
        r1 := @parameter0: android.content.DialogInterface;
        i0 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1528, 32487, 3);
        i0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$8: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 483);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity$8: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45425, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$8: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45425, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1527, null);
        interfaceinvoke r1.<android.content.DialogInterface: void dismiss()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32488, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity$8: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32489, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity$8: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 483);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.GeneratorActivity$8: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(483);
        <in.shick.lockpatterngenerator.GeneratorActivity$8: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/GeneratorActivity$8", 4320153508677039926L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.GeneratorActivity extends in.shick.lockpatterngenerator.BaseActivity
{
    public static final int DIALOG_SEPARATION_WARNING;
    public static final int DIALOG_EXITED_HARD;
    public static final java.lang.String BUNDLE_GRID_LENGTH;
    public static final java.lang.String BUNDLE_PATTERN_MIN;
    public static final java.lang.String BUNDLE_PATTERN_MAX;
    public static final java.lang.String BUNDLE_HIGHLIGHT;
    public static final java.lang.String BUNDLE_PATTERN;
    protected in.shick.lockpatterngenerator.LockPatternView mPatternView;
    protected android.widget.Button mGenerateButton;
    protected android.widget.Button mSecuritySettingsButton;
    protected android.widget.ToggleButton mPracticeToggle;
    protected in.shick.lockpatterngenerator.PatternGenerator mGenerator;
    protected int mGridLength;
    protected int mPatternMin;
    protected int mPatternMax;
    protected java.lang.String mHighlightMode;
    protected boolean mTactileFeedback;
    private java.util.List mEasterEggPattern;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    public static final acteve.symbolic.integer.Expression DIALOG_SEPARATION_WARNING$sym;
    public static final int DIALOG_SEPARATION_WARNING$a3tid;
    public static final acteve.symbolic.integer.Expression DIALOG_EXITED_HARD$sym;
    public static final int DIALOG_EXITED_HARD$a3tid;
    public static final int BUNDLE_GRID_LENGTH$a3tid;
    public static final int BUNDLE_PATTERN_MIN$a3tid;
    public static final int BUNDLE_PATTERN_MAX$a3tid;
    public static final int BUNDLE_HIGHLIGHT$a3tid;
    public static final int BUNDLE_PATTERN$a3tid;
    protected int mPatternView$a3tid;
    protected int mGenerateButton$a3tid;
    protected int mSecuritySettingsButton$a3tid;
    protected int mPracticeToggle$a3tid;
    protected int mGenerator$a3tid;
    protected acteve.symbolic.integer.Expression mGridLength$sym;
    protected int mGridLength$a3tid;
    protected acteve.symbolic.integer.Expression mPatternMin$sym;
    protected int mPatternMin$a3tid;
    protected acteve.symbolic.integer.Expression mPatternMax$sym;
    protected int mPatternMax$a3tid;
    protected int mHighlightMode$a3tid;
    protected acteve.symbolic.integer.Expression mTactileFeedback$sym;
    protected int mTactileFeedback$a3tid;
    private int mEasterEggPattern$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32490, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45426, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45426, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.BaseActivity: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void onCreate(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_19, $i2$sym, $i1$sym, $i0$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;
        java.lang.Thread$UncaughtExceptionHandler r4;
        in.shick.lockpatterngenerator.PatternGenerator $r5;
        android.content.SharedPreferences $r6, $r7;
        boolean $z0;
        android.content.SharedPreferences$Editor $r8, $r9;
        in.shick.lockpatterngenerator.GeneratorActivity$1 $r10;
        java.util.ArrayList $r11, $r38;
        java.util.List $r12, $r14, $r16, $r18;
        in.shick.lockpatterngenerator.external.Point $r13, $r15, $r17, $r19;
        android.view.View $r20, $r22, $r24, $r26;
        in.shick.lockpatterngenerator.LockPatternView $r21, $r37;
        android.widget.Button $r23, $r25, $r28, $r30, $r32;
        android.widget.ToggleButton $r27, $r34;
        in.shick.lockpatterngenerator.GeneratorActivity$2 $r29;
        in.shick.lockpatterngenerator.GeneratorActivity$3 $r31;
        in.shick.lockpatterngenerator.GeneratorActivity$4 $r33;
        in.shick.lockpatterngenerator.GeneratorActivity$5 $r35;
        java.lang.String $r36;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1621, 32491, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_19 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45427, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45427, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1621, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.BaseActivity: void onCreate(android.os.Bundle)>(r1);
        $r5 = new in.shick.lockpatterngenerator.PatternGenerator;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<in.shick.lockpatterngenerator.PatternGenerator: void <init>()>();
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 471);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerator$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(471);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.PatternGenerator mGenerator> = $r5;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 449);
        $r6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        $z0 = interfaceinvoke $r6.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("exited_hard", 0);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_19 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45428, 0);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 449);
        $r7 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5321, null);
        $r8 = interfaceinvoke $r7.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5636, null, null, null);
        $r9 = interfaceinvoke $r8.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("exited_hard", 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8350, null);
        interfaceinvoke $r9.<android.content.SharedPreferences$Editor: boolean commit()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9577, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void showDialog(int)>(1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45428, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21766);
        r4 = staticinvoke <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>();
        $r10 = new in.shick.lockpatterngenerator.GeneratorActivity$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21755, null, null, null);
        specialinvoke $r10.<in.shick.lockpatterngenerator.GeneratorActivity$1: void <init>(in.shick.lockpatterngenerator.GeneratorActivity,java.lang.Thread$UncaughtExceptionHandler)>(r0, r4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(3448, null);
        staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r10);
        $r11 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r11.<java.util.ArrayList: void <init>()>();
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mEasterEggPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 486);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mEasterEggPattern$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(486);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.util.List mEasterEggPattern> = $r11;
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mEasterEggPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 486);
        $r12 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.util.List mEasterEggPattern>;
        $r13 = new in.shick.lockpatterngenerator.external.Point;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, null, null);
        specialinvoke $r13.<in.shick.lockpatterngenerator.external.Point: void <init>(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);
        _sym_tmp_7 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mEasterEggPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 486);
        $r14 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.util.List mEasterEggPattern>;
        $r15 = new in.shick.lockpatterngenerator.external.Point;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, null, null);
        specialinvoke $r15.<in.shick.lockpatterngenerator.external.Point: void <init>(int,int)>(1, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mEasterEggPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 486);
        $r16 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.util.List mEasterEggPattern>;
        $r17 = new in.shick.lockpatterngenerator.external.Point;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, null, null);
        specialinvoke $r17.<in.shick.lockpatterngenerator.external.Point: void <init>(int,int)>(2, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r17);
        _sym_tmp_9 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mEasterEggPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 486);
        $r18 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.util.List mEasterEggPattern>;
        $r19 = new in.shick.lockpatterngenerator.external.Point;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, null, null);
        specialinvoke $r19.<in.shick.lockpatterngenerator.external.Point: void <init>(int,int)>(1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r19);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1626, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void setContentView(int)>(2130903040);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r20 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.view.View findViewById(int)>(2131296256);
        $r21 = (in.shick.lockpatterngenerator.LockPatternView) $r20;
        _sym_tmp_10 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_10, 470);
        _sym_tmp_10 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid> = _sym_tmp_10;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(470);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView> = $r21;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r22 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.view.View findViewById(int)>(2131296257);
        $r23 = (android.widget.Button) $r22;
        _sym_tmp_11 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerateButton$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 478);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerateButton$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(478);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.widget.Button mGenerateButton> = $r23;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r24 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.view.View findViewById(int)>(2131296258);
        $r25 = (android.widget.Button) $r24;
        _sym_tmp_12 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mSecuritySettingsButton$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_12, 487);
        _sym_tmp_12 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mSecuritySettingsButton$a3tid> = _sym_tmp_12;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(487);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.widget.Button mSecuritySettingsButton> = $r25;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r26 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.view.View findViewById(int)>(2131296259);
        $r27 = (android.widget.ToggleButton) $r26;
        _sym_tmp_13 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPracticeToggle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_13, 488);
        _sym_tmp_13 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPracticeToggle$a3tid> = _sym_tmp_13;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(488);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.widget.ToggleButton mPracticeToggle> = $r27;
        _sym_tmp_14 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerateButton$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 478);
        $r28 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.widget.Button mGenerateButton>;
        $r29 = new in.shick.lockpatterngenerator.GeneratorActivity$2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21756, null, null);
        specialinvoke $r29.<in.shick.lockpatterngenerator.GeneratorActivity$2: void <init>(in.shick.lockpatterngenerator.GeneratorActivity)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1450, null, null);
        virtualinvoke $r28.<android.widget.Button: void setOnClickListener(android.view.View$OnClickListener)>($r29);
        _sym_tmp_15 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerateButton$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 478);
        $r30 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.widget.Button mGenerateButton>;
        $r31 = new in.shick.lockpatterngenerator.GeneratorActivity$3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21756, null, null);
        specialinvoke $r31.<in.shick.lockpatterngenerator.GeneratorActivity$3: void <init>(in.shick.lockpatterngenerator.GeneratorActivity)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6416, null, null);
        virtualinvoke $r30.<android.widget.Button: void setOnLongClickListener(android.view.View$OnLongClickListener)>($r31);
        _sym_tmp_16 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mSecuritySettingsButton$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 487);
        $r32 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.widget.Button mSecuritySettingsButton>;
        $r33 = new in.shick.lockpatterngenerator.GeneratorActivity$4;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21756, null, null);
        specialinvoke $r33.<in.shick.lockpatterngenerator.GeneratorActivity$4: void <init>(in.shick.lockpatterngenerator.GeneratorActivity)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1450, null, null);
        virtualinvoke $r32.<android.widget.Button: void setOnClickListener(android.view.View$OnClickListener)>($r33);
        _sym_tmp_17 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPracticeToggle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 488);
        $r34 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.widget.ToggleButton mPracticeToggle>;
        $r35 = new in.shick.lockpatterngenerator.GeneratorActivity$5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21756, null, null);
        specialinvoke $r35.<in.shick.lockpatterngenerator.GeneratorActivity$5: void <init>(in.shick.lockpatterngenerator.GeneratorActivity)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1828, null, null);
        virtualinvoke $r34.<android.widget.ToggleButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>($r35);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_19 = null;
        if r1 == null goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45429, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2702, null, null);
        $i0 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String)>("grid_length");
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2702);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21767, null, $i0$sym);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void setGridLength(int)>($i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2702, null, null);
        $i1 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String)>("pattern_min");
        $i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2702);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21768, null, $i1$sym);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void setPatternMin(int)>($i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2702, null, null);
        $i2 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String)>("pattern_max");
        $i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2702);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21769, null, $i2$sym);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void setPatternMax(int)>($i2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2706, null, null);
        $r36 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("highlight");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21770, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void setHighlightMode(java.lang.String)>($r36);
        _sym_tmp_18 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 470);
        $r37 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(14484, null, null);
        $r38 = virtualinvoke r1.<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>("pattern");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21758, null, null);
        virtualinvoke $r37.<in.shick.lockpatterngenerator.LockPatternView: void setPattern(java.util.List)>($r38);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45429, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        return;
    }

    protected void onResume()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1787, 32492, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45430, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45430, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1787, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.BaseActivity: void onResume()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21771, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void updateFromPrefs()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    protected android.app.Dialog onCreateDialog(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        android.view.View r3, $r7;
        android.app.AlertDialog$Builder r4, $r10, $r12, $r14, $r15, $r16, $r17, $r21, r22, $r24, $r26, $r27, $r28;
        android.app.AlertDialog r5;
        android.view.LayoutInflater $r6;
        android.widget.CheckBox $r8;
        in.shick.lockpatterngenerator.GeneratorActivity$6 $r9;
        java.lang.String $r11, $r13, $r18, $r23, $r25, $r29;
        in.shick.lockpatterngenerator.GeneratorActivity$7 $r19;
        in.shick.lockpatterngenerator.GeneratorActivity$8 $r30;
        android.app.Dialog $r32;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(9573, 32493, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45431, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45431, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45432, 0);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        if i0 == 1 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45433, 0);
        goto label6;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45432, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1646, null);
        $r6 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.view.LayoutInflater getLayoutInflater()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1449, null, null, null);
        r3 = virtualinvoke $r6.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(2130903045, null);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r7 = virtualinvoke r3.<android.view.View: android.view.View findViewById(int)>(2131296260);
        $r8 = (android.widget.CheckBox) $r7;
        $r9 = new in.shick.lockpatterngenerator.GeneratorActivity$6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21756, null, null);
        specialinvoke $r9.<in.shick.lockpatterngenerator.GeneratorActivity$6: void <init>(in.shick.lockpatterngenerator.GeneratorActivity)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1828, null, null);
        virtualinvoke $r8.<android.widget.CheckBox: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>($r9);
        $r10 = new android.app.AlertDialog$Builder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke $r10.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>(r0);
        r4 = $r10;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r11 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.lang.String getString(int)>(2131099656);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1515, null, null);
        $r12 = virtualinvoke r4.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>($r11);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r13 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.lang.String getString(int)>(2131099661);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5119, null, null);
        $r14 = virtualinvoke $r12.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>($r13);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1794, null, null);
        $r15 = virtualinvoke $r14.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)>(17301659);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9644, null, null);
        $r16 = virtualinvoke $r15.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)>(r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9632, null, null);
        $r17 = virtualinvoke $r16.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>(1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r18 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.lang.String getString(int)>(2131099658);
        $r19 = new in.shick.lockpatterngenerator.GeneratorActivity$7;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21756, null, null);
        specialinvoke $r19.<in.shick.lockpatterngenerator.GeneratorActivity$7: void <init>(in.shick.lockpatterngenerator.GeneratorActivity)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5120, null, null, null);
        virtualinvoke $r17.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>($r18, $r19);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1518, null);
        r5 = virtualinvoke r4.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label7;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45433, 1);
        goto label5;

     label5:
        $r21 = new android.app.AlertDialog$Builder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke $r21.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>(r0);
        r22 = $r21;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r23 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.lang.String getString(int)>(2131099656);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1515, null, null);
        $r24 = virtualinvoke r22.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>($r23);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r25 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.lang.String getString(int)>(2131099663);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5119, null, null);
        $r26 = virtualinvoke $r24.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>($r25);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1794, null, null);
        $r27 = virtualinvoke $r26.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)>(17301659);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9632, null, null);
        $r28 = virtualinvoke $r27.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>(1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r29 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.lang.String getString(int)>(2131099658);
        $r30 = new in.shick.lockpatterngenerator.GeneratorActivity$8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21756, null, null);
        specialinvoke $r30.<in.shick.lockpatterngenerator.GeneratorActivity$8: void <init>(in.shick.lockpatterngenerator.GeneratorActivity)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5120, null, null, null);
        virtualinvoke $r28.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>($r29, $r30);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1518, null);
        r5 = virtualinvoke r22.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9573, null, i0$sym);
        $r32 = specialinvoke r0.<in.shick.lockpatterngenerator.BaseActivity: android.app.Dialog onCreateDialog(int)>(i0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return $r32;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        return r5;
    }

    protected void onPrepareDialog(int, android.app.Dialog)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $z0$sym, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        android.app.Dialog r1;
        boolean[][] $r2;
        boolean[] r3;
        android.view.View $r4;
        android.widget.CheckBox $r5;
        android.content.SharedPreferences $r6;
        boolean $z0;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        i0 := @parameter0: int;
        r1 := @parameter1: android.app.Dialog;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(9575, 32494, 3);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45434, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45434, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 4);
        r3 = $r2[4];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_3 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45435, 0);
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45435, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r4 = virtualinvoke r1.<android.app.Dialog: android.view.View findViewById(int)>(2131296260);
        $r5 = (android.widget.CheckBox) $r4;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 449);
        $r6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        $z0 = interfaceinvoke $r6.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("remind_of_separation", 1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1381, null, $z0$sym);
        virtualinvoke $r5.<android.widget.CheckBox: void setChecked(boolean)>($z0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9575, null, i0$sym, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.BaseActivity: void onPrepareDialog(int,android.app.Dialog)>(i0, r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return;
    }

    public boolean onCreateOptionsMenu(android.view.Menu)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        android.view.Menu r1;
        boolean[][] $r2;
        boolean[] r3;
        android.view.MenuInflater r4;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        r1 := @parameter0: android.view.Menu;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(9554, 32495, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45436, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45436, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 5);
        r3 = $r2[5];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(9588, null);
        r4 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.view.MenuInflater getMenuInflater()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7466, null, null, null);
        virtualinvoke r4.<android.view.MenuInflater: void inflate(int,android.view.Menu)>(2131230720, r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(9554, null);
        return 1;
    }

    public boolean onOptionsItemSelected(android.view.MenuItem)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $z0$sym, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        android.view.MenuItem r1;
        boolean[][] $r2;
        boolean[] r3;
        null_type n0;
        android.content.Intent $r4, $r5, $r6, r7, $r9, r10;
        boolean $z0;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        r1 := @parameter0: android.view.MenuItem;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(9559, 32496, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45437, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45437, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 6);
        r3 = $r2[6];
        n0 = null;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1259, null);
        $i0 = interfaceinvoke r1.<android.view.MenuItem: int getItemId()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1259);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 2131296262);
        if $i0 == 2131296262 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45438, 0);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 2131296263);
        if $i0 == 2131296263 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45439, 0);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 2131296264);
        if $i0 == 2131296264 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45440, 0);
        goto label8;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45438, 1);
        goto label3;

     label3:
        $r4 = new android.content.Intent;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<android.content.Intent: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1592, null, null, null);
        $r5 = virtualinvoke $r4.<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>(r0, class "in/shick/lockpatterngenerator/PreferencesActivity");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1404, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void startActivity(android.content.Intent)>($r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(9559, null);
        return 1;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45439, 1);
        goto label5;

     label5:
        $r6 = new android.content.Intent;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<android.content.Intent: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1592, null, null, null);
        r7 = virtualinvoke $r6.<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>(r0, class "in/shick/lockpatterngenerator/TextWallActivity");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(965, null, null, null);
        virtualinvoke r7.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("html_source", "help.html");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1404, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void startActivity(android.content.Intent)>(r7);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(9559, null);
        return 1;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45440, 1);
        goto label7;

     label7:
        $r9 = new android.content.Intent;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r9.<android.content.Intent: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1592, null, null, null);
        r10 = virtualinvoke $r9.<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>(r0, class "in/shick/lockpatterngenerator/TextWallActivity");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(965, null, null, null);
        virtualinvoke r10.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("html_source", "about.html");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1593, null, null, null);
        virtualinvoke r10.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("layout_res", 2130903046);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1404, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void startActivity(android.content.Intent)>(r10);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(9559, null);
        return 1;

     label8:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9559, null, null);
        $z0 = specialinvoke r0.<in.shick.lockpatterngenerator.BaseActivity: boolean onOptionsItemSelected(android.view.MenuItem)>(r1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(9559);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(9559, $z0$sym);
        return $z0;
    }

    public void onSaveInstanceState(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, $i2$sym, $i1$sym, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.ArrayList r4, $r6;
        java.lang.String $r5;
        in.shick.lockpatterngenerator.LockPatternView $r7;
        java.util.List $r8;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(8674, 32497, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45441, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45441, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 7);
        r3 = $r2[7];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8674, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.BaseActivity: void onSaveInstanceState(android.os.Bundle)>(r1);
        $i0$sym = r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mGridLength$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGridLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 489);
        $i0 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGridLength>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7752, null, null, $i0$sym);
        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("grid_length", $i0);
        $i1$sym = r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mPatternMax$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMax$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 490);
        $i1 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMax>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7752, null, null, $i1$sym);
        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("pattern_max", $i1);
        $i2$sym = r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mPatternMin$sym>;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMin$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 491);
        $i2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMin>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7752, null, null, $i2$sym);
        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("pattern_min", $i2);
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 492);
        $r5 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.lang.String mHighlightMode>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7751, null, null, null);
        virtualinvoke r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("highlight", $r5);
        $r6 = new java.util.ArrayList;
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 470);
        $r7 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21757, null);
        $r8 = virtualinvoke $r7.<in.shick.lockpatterngenerator.LockPatternView: java.util.List getPattern()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8348, null, null);
        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r8);
        r4 = $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(14481, null, null, null);
        virtualinvoke r1.<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>("pattern", r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private void jumpToSecurity()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        android.content.ActivityNotFoundException r3, $r5;
        android.content.Intent $r4;
        java.lang.String $r6;
        android.widget.Toast $r7;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21772, 32498, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45442, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45442, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 8);
        r2 = $r1[8];

     label2:
        $r4 = new android.content.Intent;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1, null, null);
        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.settings.SECURITY_SETTINGS");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1404, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void startActivity(android.content.Intent)>($r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;
        r3 = $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r6 = virtualinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.lang.String getString(int)>(2131099660);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1714, null, null, null);
        $r7 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>(r0, $r6, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(107, null);
        virtualinvoke $r7.<android.widget.Toast: void show()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;

        catch android.content.ActivityNotFoundException from label2 to label3 with label4;
    }

    private void updateFromPrefs()
    {
        acteve.symbolic.integer.Expression _sym_tmp_12, $z3$sym, $z2$sym, $z1$sym, $i6$sym, $i5$sym, $i4$sym, $d1$sym, $d0$sym, i3$sym, z0$sym, i2$sym, i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, $i4, $i5, $i6;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String r3, $r9;
        boolean z0, $z1, $z2, $z3;
        android.content.SharedPreferences $r4, $r5, $r6, $r7, $r8;
        double $d0, $d1;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21771, 32499, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_12 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45443, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45443, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 449);
        $r4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2694, null, null, null);
        i0 = interfaceinvoke $r4.<android.content.SharedPreferences: int getInt(java.lang.String,int)>("grid_length", 3);
        i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2694);
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 449);
        $r5 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2694, null, null, null);
        i1 = interfaceinvoke $r5.<android.content.SharedPreferences: int getInt(java.lang.String,int)>("pattern_min", 4);
        i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2694);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 449);
        $r6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2694, null, null, null);
        i2 = interfaceinvoke $r6.<android.content.SharedPreferences: int getInt(java.lang.String,int)>("pattern_max", 5);
        i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2694);
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 449);
        $r7 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2699, null, null, null);
        r3 = interfaceinvoke $r7.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("highlight_mode", "first");
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.BaseActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 449);
        $r8 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        z0 = interfaceinvoke $r8.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("tactile_feedback", 0);
        z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        if i0 >= 1 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45444, 0);
        i0$sym = null;
        i0 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45444, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        if i1 >= 1 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45445, 0);
        i1$sym = null;
        i1 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45445, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        if i2 >= 1 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45446, 0);
        i2$sym = null;
        i2 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45446, 1);
        goto label7;

     label7:
        $d0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(i0$sym, 7);
        $d0 = (double) i0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5951, $d0$sym, null);
        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, 2.0);
        $d1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5951);
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d1$sym, 4);
        i3 = (int) $d1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, i3$sym, i1, i3);
        if i1 <= i3 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45447, 0);
        i1$sym = i3$sym;
        i1 = i3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45447, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, i3$sym, i2, i3);
        if i2 <= i3 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45448, 0);
        i2$sym = i3$sym;
        i2 = i3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45448, 1);
        goto label11;

     label11:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 10);
        r2[10] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, i2$sym, i1, i2);
        if i1 <= i2 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45449, 0);
        i1$sym = i2$sym;
        i1 = i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 11);
        r2[11] = 1;
        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45449, 1);
        goto label13;

     label13:
        $i4$sym = r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mGridLength$sym>;
        _sym_tmp_7 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGridLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 489);
        $i4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGridLength>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 12);
        r2[12] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i4$sym, i0, $i4);
        if i0 == $i4 goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45450, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21767, null, i0$sym);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void setGridLength(int)>(i0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 13);
        r2[13] = 1;
        goto label15;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45450, 1);
        goto label15;

     label15:
        $i5$sym = r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mPatternMax$sym>;
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMax$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 490);
        $i5 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMax>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 14);
        r2[14] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i5$sym, i2, $i5);
        if i2 == $i5 goto label16;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45451, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21769, null, i2$sym);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void setPatternMax(int)>(i2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 15);
        r2[15] = 1;
        goto label17;

     label16:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45451, 1);
        goto label17;

     label17:
        $i6$sym = r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mPatternMin$sym>;
        _sym_tmp_9 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMin$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 491);
        $i6 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMin>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 16);
        r2[16] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i6$sym, i1, $i6);
        if i1 == $i6 goto label18;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45452, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21768, null, i1$sym);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void setPatternMin(int)>(i1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 17);
        r2[17] = 1;
        goto label19;

     label18:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45452, 1);
        goto label19;

     label19:
        _sym_tmp_10 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 492);
        $r9 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.lang.String mHighlightMode>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r9);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 18, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 18);
        r2[18] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 != 0 goto label20;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45453, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21770, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void setHighlightMode(java.lang.String)>(r3);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 19, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 19);
        r2[19] = 1;
        goto label21;

     label20:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45453, 1);
        goto label21;

     label21:
        $z2$sym = r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mTactileFeedback$sym>;
        _sym_tmp_11 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mTactileFeedback$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 493);
        $z2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: boolean mTactileFeedback>;
        $z3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, $z2$sym, z0, $z2);
        $z3 = z0 ^ $z2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 20, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 20);
        r2[20] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 == 0 goto label22;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45454, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21773, null, z0$sym);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void setTactileFeedback(boolean)>(z0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 21, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 21);
        r2[21] = 1;
        goto label23;

     label22:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45454, 1);
        goto label23;

     label23:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 22, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 22);
        r2[22] = 1;
        return;
    }

    private void setGridLength(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.PatternGenerator $r3;
        in.shick.lockpatterngenerator.LockPatternView $r4;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21767, 32500, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45455, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45455, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 10);
        r2 = $r1[10];
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mGridLength$sym> = i0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGridLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 489);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGridLength$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(489);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGridLength> = i0;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 471);
        $r3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.PatternGenerator mGenerator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21767, null, i0$sym);
        virtualinvoke $r3.<in.shick.lockpatterngenerator.PatternGenerator: void setGridLength(int)>(i0);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 470);
        $r4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21767, null, i0$sym);
        virtualinvoke $r4.<in.shick.lockpatterngenerator.LockPatternView: void setGridLength(int)>(i0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private void setPatternMin(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.PatternGenerator $r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21768, 32501, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45456, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45456, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 11);
        r2 = $r1[11];
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mPatternMin$sym> = i0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMin$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 491);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMin$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(491);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMin> = i0;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 471);
        $r3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.PatternGenerator mGenerator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21774, null, i0$sym);
        virtualinvoke $r3.<in.shick.lockpatterngenerator.PatternGenerator: void setMinNodes(int)>(i0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private void setPatternMax(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.PatternGenerator $r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21769, 32502, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45457, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45457, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 12);
        r2 = $r1[12];
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mPatternMax$sym> = i0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMax$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 490);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMax$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(490);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternMax> = i0;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mGenerator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 471);
        $r3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.PatternGenerator mGenerator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21775, null, i0$sym);
        virtualinvoke $r3.<in.shick.lockpatterngenerator.PatternGenerator: void setMaxNodes(int)>(i0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private void setHighlightMode(java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $z2$sym, $z1$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        java.lang.String r1, $r4, $r7, $r10;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0, $z1, $z2;
        in.shick.lockpatterngenerator.LockPatternView $r5, $r8, $r11;
        in.shick.lockpatterngenerator.LockPatternView$NoHighlight $r6;
        in.shick.lockpatterngenerator.LockPatternView$FirstHighlight $r9;
        in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight $r12;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        r1 := @parameter0: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21770, 32503, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r2 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45458, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45458, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 13);
        r3 = $r2[13];
        $r4 = "no";
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45459, 0);
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 470);
        $r5 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        $r6 = new in.shick.lockpatterngenerator.LockPatternView$NoHighlight;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<in.shick.lockpatterngenerator.LockPatternView$NoHighlight: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21761, null, null);
        virtualinvoke $r5.<in.shick.lockpatterngenerator.LockPatternView: void setHighlightMode(in.shick.lockpatterngenerator.LockPatternView$HighlightMode)>($r6);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label7;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45459, 1);
        goto label3;

     label3:
        $r7 = "first";
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45460, 0);
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 470);
        $r8 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        $r9 = new in.shick.lockpatterngenerator.LockPatternView$FirstHighlight;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r9.<in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21761, null, null);
        virtualinvoke $r8.<in.shick.lockpatterngenerator.LockPatternView: void setHighlightMode(in.shick.lockpatterngenerator.LockPatternView$HighlightMode)>($r9);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label7;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45460, 1);
        goto label5;

     label5:
        $r10 = "rainbow";
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45461, 0);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 470);
        $r11 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        $r12 = new in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r12.<in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21761, null, null);
        virtualinvoke $r11.<in.shick.lockpatterngenerator.LockPatternView: void setHighlightMode(in.shick.lockpatterngenerator.LockPatternView$HighlightMode)>($r12);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45461, 1);
        goto label7;

     label7:
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 492);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mHighlightMode$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(492);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.lang.String mHighlightMode> = r1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        return;
    }

    private void setTactileFeedback(boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym, z0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean z0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.LockPatternView $r3;

        r0 := @this: in.shick.lockpatterngenerator.GeneratorActivity;
        z0 := @parameter0: boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21773, 32504, 2);
        z0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45462, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45462, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 14);
        r2 = $r1[14];
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: acteve.symbolic.integer.Expression mTactileFeedback$sym> = z0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mTactileFeedback$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 493);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mTactileFeedback$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(493);
        r0.<in.shick.lockpatterngenerator.GeneratorActivity: boolean mTactileFeedback> = z0;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mPatternView$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 470);
        $r3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: in.shick.lockpatterngenerator.LockPatternView mPatternView>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2104, null, z0$sym);
        virtualinvoke $r3.<in.shick.lockpatterngenerator.LockPatternView: void setTactileFeedbackEnabled(boolean)>(z0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    static java.util.List access$000(in.shick.lockpatterngenerator.GeneratorActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.List $r3;

        r0 := @parameter0: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21762, 32505, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45463, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45463, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 15);
        r2 = $r1[15];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: int mEasterEggPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 486);
        $r3 = r0.<in.shick.lockpatterngenerator.GeneratorActivity: java.util.List mEasterEggPattern>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    static void access$100(in.shick.lockpatterngenerator.GeneratorActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.GeneratorActivity r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @parameter0: in.shick.lockpatterngenerator.GeneratorActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21764, 32506, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 485);
        $r1 = <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45464, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45464, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 16);
        r2 = $r1[16];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21772, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.GeneratorActivity: void jumpToSecurity()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32507, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 17);
        r1 = $r0[17];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r18$sym, $r17$sym, $r16$sym, $r15$sym, $r14$sym, $r13$sym, $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32508, 0);
        $r0 = newmultiarray (boolean)[18][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 485);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.GeneratorActivity: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(485);
        <in.shick.lockpatterngenerator.GeneratorActivity: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[5];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[5];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[4];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[5];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[1];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[3];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[23];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[1];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[1];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        $r13 = newarray (boolean)[1];
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 12);
        $r0[12] = $r13;
        $r14 = newarray (boolean)[7];
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 13);
        $r0[13] = $r14;
        $r15 = newarray (boolean)[1];
        $r15$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 14);
        $r0[14] = $r15;
        $r16 = newarray (boolean)[1];
        $r16$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 15);
        $r0[15] = $r16;
        $r17 = newarray (boolean)[1];
        $r17$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 16);
        $r0[16] = $r17;
        $r18 = newarray (boolean)[1];
        $r18$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 17);
        $r0[17] = $r18;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/GeneratorActivity", 131455206962699749L);
        return $r0;
    }
}
class in.shick.lockpatterngenerator.LockPatternView$1 extends java.lang.Object implements java.lang.Runnable
{
    final in.shick.lockpatterngenerator.LockPatternView this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(in.shick.lockpatterngenerator.LockPatternView)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView$1 r0;
        in.shick.lockpatterngenerator.LockPatternView r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$1;
        r1 := @parameter0: in.shick.lockpatterngenerator.LockPatternView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21776, 32509, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 494);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView$1: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45465, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45465, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 495);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView$1: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(495);
        r0.<in.shick.lockpatterngenerator.LockPatternView$1: in.shick.lockpatterngenerator.LockPatternView this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void run()
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView$1 r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.LockPatternView $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$1;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(533, 32510, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 494);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView$1: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45466, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45466, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 495);
        $r3 = r0.<in.shick.lockpatterngenerator.LockPatternView$1: in.shick.lockpatterngenerator.LockPatternView this$0>;
        $z0$sym = $r3.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mDisplayingPracticeResult$sym>;
        _sym_tmp_3 = $r3.<in.shick.lockpatterngenerator.LockPatternView: int mDisplayingPracticeResult$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 496);
        $z0 = $r3.<in.shick.lockpatterngenerator.LockPatternView: boolean mDisplayingPracticeResult>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45467, 0);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 495);
        $r4 = r0.<in.shick.lockpatterngenerator.LockPatternView$1: in.shick.lockpatterngenerator.LockPatternView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21777, null);
        staticinvoke <in.shick.lockpatterngenerator.LockPatternView: void access$000(in.shick.lockpatterngenerator.LockPatternView)>($r4);
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.LockPatternView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 495);
        $r5 = r0.<in.shick.lockpatterngenerator.LockPatternView$1: in.shick.lockpatterngenerator.LockPatternView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke $r5.<in.shick.lockpatterngenerator.LockPatternView: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45467, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32511, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32512, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 494);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.LockPatternView$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(494);
        <in.shick.lockpatterngenerator.LockPatternView$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/LockPatternView$1", -3029914084991449554L);
        return $r0;
    }
}
class in.shick.lockpatterngenerator.LockPatternView$CenterIterator extends java.lang.Object implements java.util.Iterator
{
    private java.util.Iterator nodeIterator;
    final in.shick.lockpatterngenerator.LockPatternView this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private int nodeIterator$a3tid;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(in.shick.lockpatterngenerator.LockPatternView, java.util.Iterator)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView$CenterIterator r0;
        in.shick.lockpatterngenerator.LockPatternView r1;
        java.util.Iterator r2;
        boolean[][] $r3;
        boolean[] r4;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$CenterIterator;
        r1 := @parameter0: in.shick.lockpatterngenerator.LockPatternView;
        r2 := @parameter1: java.util.Iterator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21778, 32513, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 497);
        $r3 = <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45468, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45468, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 0);
        r4 = $r3[0];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 498);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(498);
        r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: in.shick.lockpatterngenerator.LockPatternView this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int nodeIterator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 499);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int nodeIterator$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(499);
        r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: java.util.Iterator nodeIterator> = r2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        return;
    }

    public boolean hasNext()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView$CenterIterator r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.Iterator $r3;
        boolean $z0;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$CenterIterator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(95, 32514, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 497);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45469, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45469, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int nodeIterator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 499);
        $r3 = r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: java.util.Iterator nodeIterator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(95, $z0$sym);
        return $z0;
    }

    public in.shick.lockpatterngenerator.external.Point next()
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, $i1$sym, $i0$sym, $r5$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        in.shick.lockpatterngenerator.LockPatternView$CenterIterator r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.external.Point r3, $r10;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        in.shick.lockpatterngenerator.LockPatternView $r6;
        in.shick.lockpatterngenerator.NodeDrawable[][] $r7;
        in.shick.lockpatterngenerator.NodeDrawable[] $r8;
        in.shick.lockpatterngenerator.NodeDrawable $r9;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$CenterIterator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21780, 32515, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 497);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45470, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45470, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int nodeIterator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 499);
        $r4 = r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: java.util.Iterator nodeIterator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();
        $r5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r3 = (in.shick.lockpatterngenerator.external.Point) $r5;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 498);
        $r6 = r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: in.shick.lockpatterngenerator.LockPatternView this$0>;
        _sym_tmp_4 = $r6.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 500);
        $r7 = $r6.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        $i0$sym = r3.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_5 = r3.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 501);
        $i0 = r3.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r7, $i0);
        $r8 = $r7[$i0];
        $i1$sym = r3.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_6 = r3.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 502);
        $i1 = r3.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, $i1);
        $r9 = $r8[$i1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21779, null);
        $r10 = virtualinvoke $r9.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point getCenter()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r10;
    }

    public void remove()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView$CenterIterator r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$CenterIterator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(837, 32516, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 497);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45471, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45471, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        $r3 = new java.lang.UnsupportedOperationException;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        throw $r3;
    }

    public volatile java.lang.Object next()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.LockPatternView$CenterIterator r0;
        in.shick.lockpatterngenerator.external.Point $r1;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$CenterIterator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(96, 32517, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21780, null);
        $r1 = virtualinvoke r0.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: in.shick.lockpatterngenerator.external.Point next()>();
        return $r1;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32518, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 5);
        r1 = $r0[5];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32519, 0);
        $r0 = newmultiarray (boolean)[6][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 497);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(497);
        <in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/LockPatternView$CenterIterator", 4444317542563504116L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.LockPatternView$FailureHighlight extends java.lang.Object implements in.shick.lockpatterngenerator.LockPatternView$HighlightMode
{
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView$FailureHighlight r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$FailureHighlight;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32520, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 503);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45472, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45472, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public int select(in.shick.lockpatterngenerator.NodeDrawable, int, int, int, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym, i4$sym, i3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1, i2, i3, i4;
        in.shick.lockpatterngenerator.LockPatternView$FailureHighlight r0;
        in.shick.lockpatterngenerator.NodeDrawable r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$FailureHighlight;
        r1 := @parameter0: in.shick.lockpatterngenerator.NodeDrawable;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21781, 32521, 7);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        i3$sym = a3targs$symargs[5];
        i4$sym = a3targs$symargs[6];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 503);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45473, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45473, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        return 4;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32522, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32523, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 503);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(503);
        <in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/LockPatternView$FailureHighlight", 3934875461979374116L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.LockPatternView$FirstHighlight extends java.lang.Object implements in.shick.lockpatterngenerator.LockPatternView$HighlightMode
{
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView$FirstHighlight r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$FirstHighlight;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32524, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 504);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45474, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45474, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public int select(in.shick.lockpatterngenerator.NodeDrawable, int, int, int, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym, i4$sym, i3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1, i2, i3, i4;
        in.shick.lockpatterngenerator.LockPatternView$FirstHighlight r0;
        in.shick.lockpatterngenerator.NodeDrawable r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$FirstHighlight;
        r1 := @parameter0: in.shick.lockpatterngenerator.NodeDrawable;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21781, 32525, 7);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        i3$sym = a3targs$symargs[5];
        i4$sym = a3targs$symargs[6];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 504);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45475, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45475, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45476, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        return 2;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45476, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        return 1;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32526, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32527, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 504);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(504);
        <in.shick.lockpatterngenerator.LockPatternView$FirstHighlight: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/LockPatternView$FirstHighlight", 7548973213077127688L);
        return $r0;
    }
}
public interface  in.shick.lockpatterngenerator.LockPatternView$HighlightMode extends java.lang.Object
{

    public abstract int select(in.shick.lockpatterngenerator.NodeDrawable, int, int, int, int, int);
}
public class in.shick.lockpatterngenerator.LockPatternView$NoHighlight extends java.lang.Object implements in.shick.lockpatterngenerator.LockPatternView$HighlightMode
{
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView$NoHighlight r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$NoHighlight;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32528, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$NoHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView$NoHighlight: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45477, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$NoHighlight: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45477, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public int select(in.shick.lockpatterngenerator.NodeDrawable, int, int, int, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym, i4$sym, i3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1, i2, i3, i4;
        in.shick.lockpatterngenerator.LockPatternView$NoHighlight r0;
        in.shick.lockpatterngenerator.NodeDrawable r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$NoHighlight;
        r1 := @parameter0: in.shick.lockpatterngenerator.NodeDrawable;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21781, 32529, 7);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        i3$sym = a3targs$symargs[5];
        i4$sym = a3targs$symargs[6];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$NoHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView$NoHighlight: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45478, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$NoHighlight: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45478, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        return 1;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32530, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$NoHighlight: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32531, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$NoHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 505);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.LockPatternView$NoHighlight: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(505);
        <in.shick.lockpatterngenerator.LockPatternView$NoHighlight: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/LockPatternView$NoHighlight", 3934875461979374116L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight extends java.lang.Object implements in.shick.lockpatterngenerator.LockPatternView$HighlightMode
{
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32532, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 506);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45479, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45479, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public int select(in.shick.lockpatterngenerator.NodeDrawable, int, int, int, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $r4$sym, $f3$sym, $f2$sym, $f1$sym, i5$sym, f0$sym, r3$sym, i4$sym, i3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1, i2, i3, i4, i5;
        in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight r0;
        in.shick.lockpatterngenerator.NodeDrawable r1;
        boolean[][] $r2;
        boolean[] r3;
        float f0, $f1, $f2, $f3;
        float[] $r4;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight;
        r1 := @parameter0: in.shick.lockpatterngenerator.NodeDrawable;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21781, 32533, 7);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        i3$sym = a3targs$symargs[5];
        i4$sym = a3targs$symargs[6];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 506);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45480, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45480, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        $f1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(i0$sym, 6);
        $f1 = (float) i0;
        $f2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(i1$sym, 6);
        $f2 = (float) i1;
        $f3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f1$sym, $f2$sym, $f1, $f2);
        $f3 = $f1 / $f2;
        f0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f3$sym, null, $f3, 360.0F);
        f0 = $f3 * 360.0F;
        $r4 = newarray (float)[3];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float[],int,float)>($r4$sym, null, f0$sym, $r4, 0, f0);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 0);
        $r4[0] = f0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float[],int,float)>($r4$sym, null, null, $r4, 1, 1.0F);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 1);
        $r4[1] = 1.0F;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float[],int,float)>($r4$sym, null, null, $r4, 2, 1.0F);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 2);
        $r4[2] = 1.0F;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(20099, $r4$sym);
        i5 = staticinvoke <android.graphics.Color: int HSVToColor(float[])>($r4);
        i5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(20099);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21782, null, i5$sym);
        virtualinvoke r1.<in.shick.lockpatterngenerator.NodeDrawable: void setCustomColor(int)>(i5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        return 5;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32534, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32535, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 506);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(506);
        <in.shick.lockpatterngenerator.LockPatternView$RainbowHighlight: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/LockPatternView$RainbowHighlight", 3934875472250164193L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight extends java.lang.Object implements in.shick.lockpatterngenerator.LockPatternView$HighlightMode
{
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32536, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 507);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45481, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45481, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public int select(in.shick.lockpatterngenerator.NodeDrawable, int, int, int, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym, i4$sym, i3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1, i2, i3, i4;
        in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight r0;
        in.shick.lockpatterngenerator.NodeDrawable r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight;
        r1 := @parameter0: in.shick.lockpatterngenerator.NodeDrawable;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        i4 := @parameter5: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21781, 32537, 7);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        i3$sym = a3targs$symargs[5];
        i4$sym = a3targs$symargs[6];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 507);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45482, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45482, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        return 3;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32538, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32539, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 507);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(507);
        <in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/LockPatternView$SuccessHighlight", 3934875461979374116L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.LockPatternView extends android.view.View
{
    public static final int DEFAULT_LENGTH_PX;
    public static final int DEFAULT_LENGTH_NODES;
    public static final float CELL_NODE_RATIO;
    public static final float NODE_EDGE_RATIO;
    public static final int EDGE_COLOR;
    public static final int BACKGROUND_COLOR;
    public static final int DEATH_COLOR;
    public static final int PRACTICE_RESULT_DISPLAY_MILLIS;
    public static final long BUILD_TIMEOUT_MILLIS;
    public static final int TACTILE_FEEDBACK_DURATION;
    protected int mLengthPx;
    protected int mLengthNodes;
    protected int mCellLength;
    protected in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables;
    protected android.graphics.Paint mEdgePaint;
    protected in.shick.lockpatterngenerator.LockPatternView$HighlightMode mHighlightMode;
    protected boolean mPracticeMode;
    protected in.shick.lockpatterngenerator.external.Point mTouchPoint;
    protected in.shick.lockpatterngenerator.external.Point mTouchCell;
    protected boolean mDrawTouchExtension;
    protected int mTouchThreshold;
    protected boolean mDisplayingPracticeResult;
    protected in.shick.lockpatterngenerator.LockPatternView$HighlightMode mPracticeFailureMode;
    protected in.shick.lockpatterngenerator.LockPatternView$HighlightMode mPracticeSuccessMode;
    protected android.os.Handler mHandler;
    protected android.os.Vibrator mVibrator;
    protected boolean mTactileFeedback;
    protected java.util.List mCurrentPattern;
    protected java.util.List mPracticePattern;
    protected java.util.Set mPracticePool;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    public static final acteve.symbolic.integer.Expression DEFAULT_LENGTH_PX$sym;
    public static final int DEFAULT_LENGTH_PX$a3tid;
    public static final acteve.symbolic.integer.Expression DEFAULT_LENGTH_NODES$sym;
    public static final int DEFAULT_LENGTH_NODES$a3tid;
    public static final acteve.symbolic.integer.Expression CELL_NODE_RATIO$sym;
    public static final int CELL_NODE_RATIO$a3tid;
    public static final acteve.symbolic.integer.Expression NODE_EDGE_RATIO$sym;
    public static final int NODE_EDGE_RATIO$a3tid;
    public static final acteve.symbolic.integer.Expression EDGE_COLOR$sym;
    public static final int EDGE_COLOR$a3tid;
    public static final acteve.symbolic.integer.Expression BACKGROUND_COLOR$sym;
    public static final int BACKGROUND_COLOR$a3tid;
    public static final acteve.symbolic.integer.Expression DEATH_COLOR$sym;
    public static final int DEATH_COLOR$a3tid;
    public static final acteve.symbolic.integer.Expression PRACTICE_RESULT_DISPLAY_MILLIS$sym;
    public static final int PRACTICE_RESULT_DISPLAY_MILLIS$a3tid;
    public static final acteve.symbolic.integer.Expression BUILD_TIMEOUT_MILLIS$sym;
    public static final int BUILD_TIMEOUT_MILLIS$a3tid;
    public static final acteve.symbolic.integer.Expression TACTILE_FEEDBACK_DURATION$sym;
    public static final int TACTILE_FEEDBACK_DURATION$a3tid;
    protected acteve.symbolic.integer.Expression mLengthPx$sym;
    protected int mLengthPx$a3tid;
    protected acteve.symbolic.integer.Expression mLengthNodes$sym;
    protected int mLengthNodes$a3tid;
    protected acteve.symbolic.integer.Expression mCellLength$sym;
    protected int mCellLength$a3tid;
    protected int mNodeDrawables$a3tid;
    protected int mEdgePaint$a3tid;
    protected int mHighlightMode$a3tid;
    protected acteve.symbolic.integer.Expression mPracticeMode$sym;
    protected int mPracticeMode$a3tid;
    protected int mTouchPoint$a3tid;
    protected int mTouchCell$a3tid;
    protected acteve.symbolic.integer.Expression mDrawTouchExtension$sym;
    protected int mDrawTouchExtension$a3tid;
    protected acteve.symbolic.integer.Expression mTouchThreshold$sym;
    protected int mTouchThreshold$a3tid;
    protected acteve.symbolic.integer.Expression mDisplayingPracticeResult$sym;
    protected int mDisplayingPracticeResult$a3tid;
    protected int mPracticeFailureMode$a3tid;
    protected int mPracticeSuccessMode$a3tid;
    protected int mHandler$a3tid;
    protected int mVibrator$a3tid;
    protected acteve.symbolic.integer.Expression mTactileFeedback$sym;
    protected int mTactileFeedback$a3tid;
    protected int mCurrentPattern$a3tid;
    protected int mPracticePattern$a3tid;
    protected int mPracticePool$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        acteve.symbolic.integer.Expression _sym_tmp_19, $r14$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        android.content.Context r1, $r13;
        android.util.AttributeSet r2;
        boolean[][] $r3;
        boolean[] r4;
        in.shick.lockpatterngenerator.NodeDrawable[][] $r5;
        java.util.List $r6;
        in.shick.lockpatterngenerator.LockPatternView$NoHighlight $r7;
        in.shick.lockpatterngenerator.external.Point $r8, $r9;
        in.shick.lockpatterngenerator.LockPatternView$FailureHighlight $r10;
        in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight $r11;
        android.os.Handler $r12;
        java.lang.Object $r14;
        android.os.Vibrator $r15;
        android.graphics.Paint $r16, $r17, $r18, $r20;
        android.graphics.Paint$Cap $r19;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        r1 := @parameter0: android.content.Context;
        r2 := @parameter1: android.util.AttributeSet;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1328, 32540, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r3 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_19 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45483, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45483, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 0);
        r4 = $r3[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1328, null, null, null);
        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthPx$sym> = null;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthPx$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 509);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthPx$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(509);
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthPx> = 100;
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym> = null;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 510);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(510);
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes> = 3;
        $r5 = newmultiarray (in.shick.lockpatterngenerator.NodeDrawable)[0][0];
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 500);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(500);
        r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables> = $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(15924);
        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 511);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(511);
        r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern> = $r6;
        $r7 = new in.shick.lockpatterngenerator.LockPatternView$NoHighlight;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r7.<in.shick.lockpatterngenerator.LockPatternView$NoHighlight: void <init>()>();
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 512);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mHighlightMode$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(512);
        r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mHighlightMode> = $r7;
        $r8 = new in.shick.lockpatterngenerator.external.Point;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, null, null);
        specialinvoke $r8.<in.shick.lockpatterngenerator.external.Point: void <init>(int,int)>(-1, -1);
        _sym_tmp_7 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchPoint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_7, 513);
        _sym_tmp_7 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchPoint$a3tid> = _sym_tmp_7;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(513);
        r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchPoint> = $r8;
        $r9 = new in.shick.lockpatterngenerator.external.Point;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, null, null);
        specialinvoke $r9.<in.shick.lockpatterngenerator.external.Point: void <init>(int,int)>(-1, -1);
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_8, 514);
        _sym_tmp_8 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid> = _sym_tmp_8;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(514);
        r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell> = $r9;
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mDrawTouchExtension$sym> = null;
        _sym_tmp_9 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mDrawTouchExtension$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_9, 515);
        _sym_tmp_9 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mDrawTouchExtension$a3tid> = _sym_tmp_9;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(515);
        r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mDrawTouchExtension> = 0;
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mDisplayingPracticeResult$sym> = null;
        _sym_tmp_10 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mDisplayingPracticeResult$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_10, 496);
        _sym_tmp_10 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mDisplayingPracticeResult$a3tid> = _sym_tmp_10;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(496);
        r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mDisplayingPracticeResult> = 0;
        $r10 = new in.shick.lockpatterngenerator.LockPatternView$FailureHighlight;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r10.<in.shick.lockpatterngenerator.LockPatternView$FailureHighlight: void <init>()>();
        _sym_tmp_11 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeFailureMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 516);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeFailureMode$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(516);
        r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mPracticeFailureMode> = $r10;
        $r11 = new in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r11.<in.shick.lockpatterngenerator.LockPatternView$SuccessHighlight: void <init>()>();
        _sym_tmp_12 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeSuccessMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_12, 517);
        _sym_tmp_12 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeSuccessMode$a3tid> = _sym_tmp_12;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(517);
        r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mPracticeSuccessMode> = $r11;
        $r12 = new android.os.Handler;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r12.<android.os.Handler: void <init>()>();
        _sym_tmp_13 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mHandler$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_13, 518);
        _sym_tmp_13 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mHandler$a3tid> = _sym_tmp_13;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(518);
        r0.<in.shick.lockpatterngenerator.LockPatternView: android.os.Handler mHandler> = $r12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1272, null);
        $r13 = virtualinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: android.content.Context getContext()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(102, null, null);
        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");
        $r14$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(102);
        $r15 = (android.os.Vibrator) $r14;
        _sym_tmp_14 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mVibrator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_14, 519);
        _sym_tmp_14 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mVibrator$a3tid> = _sym_tmp_14;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(519);
        r0.<in.shick.lockpatterngenerator.LockPatternView: android.os.Vibrator mVibrator> = $r15;
        $r16 = new android.graphics.Paint;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r16.<android.graphics.Paint: void <init>()>();
        _sym_tmp_15 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mEdgePaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_15, 520);
        _sym_tmp_15 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mEdgePaint$a3tid> = _sym_tmp_15;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(520);
        r0.<in.shick.lockpatterngenerator.LockPatternView: android.graphics.Paint mEdgePaint> = $r16;
        _sym_tmp_16 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mEdgePaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 520);
        $r17 = r0.<in.shick.lockpatterngenerator.LockPatternView: android.graphics.Paint mEdgePaint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2092, null, null);
        virtualinvoke $r17.<android.graphics.Paint: void setColor(int)>(-3355444);
        _sym_tmp_17 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mEdgePaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 520);
        $r18 = r0.<in.shick.lockpatterngenerator.LockPatternView: android.graphics.Paint mEdgePaint>;
        $r19 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2095, null, null);
        virtualinvoke $r18.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r19);
        _sym_tmp_18 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mEdgePaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 520);
        $r20 = r0.<in.shick.lockpatterngenerator.LockPatternView: android.graphics.Paint mEdgePaint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(11418, null, null);
        virtualinvoke $r20.<android.graphics.Paint: void setFlags(int)>(1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        return;
    }

    private void buildDrawables()
    {
        acteve.symbolic.integer.Expression _sym_tmp_20, $z0$sym, $i22$sym, $i21$sym, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $b16$sym, $l15$sym, $l14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $f3$sym, $f2$sym, $f1$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, i3$sym, i2$sym, l1$sym, i0$sym, f0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i17, $i18, $i19, $i20, $i21, $i22;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;
        float f0, $f1, $f2, $f3;
        long l1, $l14, $l15;
        in.shick.lockpatterngenerator.external.Point r3, $r7;
        in.shick.lockpatterngenerator.NodeDrawable[][] $r4, $r8;
        android.graphics.Paint $r5;
        byte $b16;
        android.content.Context $r6;
        in.shick.lockpatterngenerator.NodeDrawable[] $r9;
        in.shick.lockpatterngenerator.NodeDrawable $r10;
        boolean $z0;
        java.util.List $r11;
        in.shick.lockpatterngenerator.LockPatternView$HighlightMode $r12;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21785, 32541, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_20 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45484, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45484, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        $i4$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 510);
        $i4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        $i5$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 510);
        $i5 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        $r4 = newmultiarray (in.shick.lockpatterngenerator.NodeDrawable)[$i4][$i5];
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 500);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(500);
        r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables> = $r4;
        $i6$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthPx$sym>;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthPx$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 509);
        $i6 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthPx>;
        $i7$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 510);
        $i7 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i6$sym, $i7$sym, $i6, $i7);
        $i8 = $i6 / $i7;
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mCellLength$sym> = $i8$sym;
        _sym_tmp_7 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_7, 521);
        _sym_tmp_7 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength$a3tid> = _sym_tmp_7;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(521);
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength> = $i8;
        $i9$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mCellLength$sym>;
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 521);
        $i9 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength>;
        $f1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i9$sym, 6);
        $f1 = (float) $i9;
        f0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f1$sym, null, $f1, 0.75F);
        f0 = $f1 * 0.75F;
        _sym_tmp_9 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mEdgePaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 520);
        $r5 = r0.<in.shick.lockpatterngenerator.LockPatternView: android.graphics.Paint mEdgePaint>;
        $f2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f0$sym, null, f0, 0.33F);
        $f2 = f0 * 0.33F;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2139, null, $f2$sym);
        virtualinvoke $r5.<android.graphics.Paint: void setStrokeWidth(float)>($f2);
        $f3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f0$sym, null, f0, 2.0F);
        $f3 = f0 / 2.0F;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f3$sym, 4);
        $i10 = (int) $f3;
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mTouchThreshold$sym> = $i10$sym;
        _sym_tmp_10 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchThreshold$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_10, 522);
        _sym_tmp_10 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchThreshold$a3tid> = _sym_tmp_10;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(522);
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchThreshold> = $i10;
        $i11$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mCellLength$sym>;
        _sym_tmp_11 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 521);
        $i11 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength>;
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, null, $i11, 2);
        i0 = $i11 / 2;
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(212);
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        l1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(212);
        i2$sym = null;
        i2 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        $i12$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_12 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 510);
        $i12 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_20 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i12$sym, i2, $i12);
        if i2 >= $i12 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45485, 0);
        i3$sym = null;
        i3 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label3:
        $i13$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_13 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 510);
        $i13 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_20 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, $i13$sym, i3, $i13);
        if i3 >= $i13 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45486, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(212);
        $l14 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l14$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(212);
        $l15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,long,long)>($l14$sym, l1$sym, $l14, l1);
        $l15 = $l14 - l1;
        $b16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,long,long)>($l15$sym, null, $l15, 1000L);
        $b16 = $l15 cmp 1000L;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_20 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($b16$sym, null, $b16, 0);
        if $b16 < 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45487, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1272, null);
        $r6 = virtualinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: android.content.Context getContext()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21743, null);
        staticinvoke <in.shick.lockpatterngenerator.EmergencyExit: void clearAndBail(android.content.Context)>($r6);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45487, 1);
        goto label5;

     label5:
        $r7 = new in.shick.lockpatterngenerator.external.Point;
        $i17$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mCellLength$sym>;
        _sym_tmp_14 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 521);
        $i17 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength>;
        $i18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, $i17$sym, i3, $i17);
        $i18 = i3 * $i17;
        $i19$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i18$sym, i0$sym, $i18, i0);
        $i19 = $i18 + i0;
        $i20$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mCellLength$sym>;
        _sym_tmp_15 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 521);
        $i20 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength>;
        $i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i20$sym, i2, $i20);
        $i21 = i2 * $i20;
        $i22$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i21$sym, i0$sym, $i21, i0);
        $i22 = $i21 + i0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, $i19$sym, $i22$sym);
        specialinvoke $r7.<in.shick.lockpatterngenerator.external.Point: void <init>(int,int)>($i19, $i22);
        r3 = $r7;
        _sym_tmp_16 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 500);
        $r8 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, i3);
        $r9 = $r8[i3];
        $r10 = new in.shick.lockpatterngenerator.NodeDrawable;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21783, null, f0$sym, null);
        specialinvoke $r10.<in.shick.lockpatterngenerator.NodeDrawable: void <init>(float,in.shick.lockpatterngenerator.external.Point)>(f0, r3);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r9, i2);
        $r9[i2] = $r10;
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 1);
        i3 = i3 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label3;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45486, 1);
        goto label7;

     label7:
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label2;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45485, 1);
        goto label9;

     label9:
        $z0$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mPracticeMode$sym>;
        _sym_tmp_17 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 523);
        $z0 = r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mPracticeMode>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        _sym_tmp_20 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45488, 0);
        _sym_tmp_18 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 511);
        $r11 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern>;
        _sym_tmp_19 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 512);
        $r12 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mHighlightMode>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21784, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void loadPattern(java.util.List,in.shick.lockpatterngenerator.LockPatternView$HighlightMode)>($r11, $r12);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45488, 1);
        goto label11;

     label11:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 10);
        r2[10] = 1;
        return;
    }

    private void clearPattern(java.util.List)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i1$sym, $i0$sym, $r6$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        java.util.List r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Iterator r4;
        in.shick.lockpatterngenerator.external.Point r5;
        boolean $z0;
        java.lang.Object $r6;
        in.shick.lockpatterngenerator.NodeDrawable[][] $r7;
        in.shick.lockpatterngenerator.NodeDrawable[] $r8;
        in.shick.lockpatterngenerator.NodeDrawable $r9;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        r1 := @parameter0: java.util.List;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21787, 32542, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45489, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45489, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 2);
        r3 = $r2[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45490, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (in.shick.lockpatterngenerator.external.Point) $r6;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 500);
        $r7 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        $i0$sym = r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_3 = r5.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 501);
        $i0 = r5.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r7, $i0);
        $r8 = $r7[$i0];
        $i1$sym = r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_4 = r5.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 502);
        $i1 = r5.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, $i1);
        $r9 = $r8[$i1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21786, null, null);
        virtualinvoke $r9.<in.shick.lockpatterngenerator.NodeDrawable: void setNodeState(int)>(0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45490, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return;
    }

    private void loadPattern(java.util.List, in.shick.lockpatterngenerator.LockPatternView$HighlightMode)
    {
        acteve.symbolic.integer.Expression _sym_tmp_21, $f0$sym, $d2$sym, $d1$sym, $i23$sym, $i22$sym, $i21$sym, $d0$sym, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $r13$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $r10$sym, $i2$sym, i1$sym, i0$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        in.shick.lockpatterngenerator.LockPatternView r0;
        java.util.List r1;
        in.shick.lockpatterngenerator.LockPatternView$HighlightMode r2;
        boolean[][] $r3;
        boolean[] r4;
        in.shick.lockpatterngenerator.external.Point r5, r7, r8, r9;
        in.shick.lockpatterngenerator.NodeDrawable r6, $r16, $r19, $r22;
        java.lang.Object $r10, $r13;
        in.shick.lockpatterngenerator.NodeDrawable[][] $r11, $r14, $r17, $r20;
        in.shick.lockpatterngenerator.NodeDrawable[] $r12, $r15, $r18, $r21;
        double $d0, $d1, $d2;
        float $f0;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        r1 := @parameter0: java.util.List;
        r2 := @parameter1: in.shick.lockpatterngenerator.LockPatternView$HighlightMode;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21784, 32543, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r3 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_21 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45491, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45491, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 3);
        r4 = $r3[3];
        i0$sym = null;
        i0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();
        $i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i2$sym, i0, $i2);
        if i0 >= $i2 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45492, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);
        $r10$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r5 = (in.shick.lockpatterngenerator.external.Point) $r10;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 500);
        $r11 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        $i3$sym = r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_3 = r5.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 501);
        $i3 = r5.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r11, $i3);
        $r12 = $r11[$i3];
        $i4$sym = r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_4 = r5.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 502);
        $i4 = r5.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r12, $i4);
        r6 = $r12[$i4];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i5 = interfaceinvoke r1.<java.util.List: int size()>();
        $i5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        $i6$sym = r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_5 = r5.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 501);
        $i6 = r5.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i7$sym = r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_6 = r5.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 502);
        $i7 = r5.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i8$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_7 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 510);
        $i8 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21781, null, null, i0$sym, $i5$sym, $i6$sym, $i7$sym, $i8$sym);
        i1 = interfaceinvoke r2.<in.shick.lockpatterngenerator.LockPatternView$HighlightMode: int select(in.shick.lockpatterngenerator.NodeDrawable,int,int,int,int,int)>(r6, i0, $i5, $i6, $i7, $i8);
        i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21781);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21786, null, i1$sym);
        virtualinvoke r6.<in.shick.lockpatterngenerator.NodeDrawable: void setNodeState(int)>(i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i9 = interfaceinvoke r1.<java.util.List: int size()>();
        $i9$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, null, $i9, 1);
        $i10 = $i9 - 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i10$sym, i0, $i10);
        if i0 >= $i10 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45493, 0);
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        $i11 = i0 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i11$sym);
        $r13 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i11);
        $r13$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r7 = (in.shick.lockpatterngenerator.external.Point) $r13;
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 500);
        $r14 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        $i12$sym = r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_9 = r5.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 501);
        $i12 = r5.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r14, $i12);
        $r15 = $r14[$i12];
        $i13$sym = r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_10 = r5.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 502);
        $i13 = r5.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r15, $i13);
        $r16 = $r15[$i13];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21779, null);
        r8 = virtualinvoke $r16.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point getCenter()>();
        _sym_tmp_11 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 500);
        $r17 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        $i14$sym = r7.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_12 = r7.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 501);
        $i14 = r7.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r17, $i14);
        $r18 = $r17[$i14];
        $i15$sym = r7.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_13 = r7.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 502);
        $i15 = r7.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r18, $i15);
        $r19 = $r18[$i15];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21779, null);
        r9 = virtualinvoke $r19.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point getCenter()>();
        _sym_tmp_14 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 500);
        $r20 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        $i16$sym = r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_15 = r5.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 501);
        $i16 = r5.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r20, $i16);
        $r21 = $r20[$i16];
        $i17$sym = r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_16 = r5.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 502);
        $i17 = r5.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r21, $i17);
        $r22 = $r21[$i17];
        $i18$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_17 = r8.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 502);
        $i18 = r8.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i19$sym = r9.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_18 = r9.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 502);
        $i19 = r9.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i20$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i18$sym, $i19$sym, $i18, $i19);
        $i20 = $i18 - $i19;
        $d0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i20$sym, 7);
        $d0 = (double) $i20;
        $i21$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_19 = r8.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 501);
        $i21 = r8.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i22$sym = r9.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_20 = r9.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 501);
        $i22 = r9.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i23$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i21$sym, $i22$sym, $i21, $i22);
        $i23 = $i21 - $i22;
        $d1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i23$sym, 7);
        $d1 = (double) $i23;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2148, $d0$sym, $d1$sym);
        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);
        $d2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2148);
        $f0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d2$sym, 6);
        $f0 = (float) $d2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21788, null, $f0$sym);
        virtualinvoke $r22.<in.shick.lockpatterngenerator.NodeDrawable: void setExitAngle(float)>($f0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 3);
        r4[3] = 1;
        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45493, 1);
        goto label4;

     label4:
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 4);
        r4[4] = 1;
        goto label2;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45492, 1);
        goto label6;

     label6:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 5);
        r4[5] = 1;
        return;
    }

    private void appendPattern(java.util.List, in.shick.lockpatterngenerator.external.Point)
    {
        acteve.symbolic.integer.Expression _sym_tmp_12, $f0$sym, $d2$sym, $d1$sym, $i12$sym, $i11$sym, $i10$sym, $d0$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $r12$sym, $i4$sym, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        in.shick.lockpatterngenerator.LockPatternView r0;
        java.util.List r1;
        in.shick.lockpatterngenerator.external.Point r2, r6, r8, r9;
        boolean[][] $r3;
        boolean[] r4;
        in.shick.lockpatterngenerator.NodeDrawable r5, r7;
        in.shick.lockpatterngenerator.NodeDrawable[][] $r10, $r13;
        in.shick.lockpatterngenerator.NodeDrawable[] $r11, $r14;
        java.lang.Object $r12;
        double $d0, $d1, $d2;
        float $f0;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        r1 := @parameter0: java.util.List;
        r2 := @parameter1: in.shick.lockpatterngenerator.external.Point;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21789, 32544, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r3 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_12 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45494, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45494, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 4);
        r4 = $r3[4];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 500);
        $r10 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        $i0$sym = r2.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_3 = r2.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 501);
        $i0 = r2.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r10, $i0);
        $r11 = $r10[$i0];
        $i1$sym = r2.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_4 = r2.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 502);
        $i1 = r2.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r11, $i1);
        r5 = $r11[$i1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21786, null, null);
        virtualinvoke r5.<in.shick.lockpatterngenerator.NodeDrawable: void setNodeState(int)>(1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();
        $i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, null, $i2, 0);
        if $i2 <= 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45495, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();
        $i3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 1);
        $i4 = $i3 - 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i4$sym);
        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i4);
        $r12$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r6 = (in.shick.lockpatterngenerator.external.Point) $r12;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 500);
        $r13 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        $i5$sym = r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_6 = r6.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 501);
        $i5 = r6.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r13, $i5);
        $r14 = $r13[$i5];
        $i6$sym = r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_7 = r6.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 502);
        $i6 = r6.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r14, $i6);
        r7 = $r14[$i6];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21779, null);
        r8 = virtualinvoke r7.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point getCenter()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21779, null);
        r9 = virtualinvoke r5.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point getCenter()>();
        $i7$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_8 = r8.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 502);
        $i7 = r8.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i8$sym = r9.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_9 = r9.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 502);
        $i8 = r9.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, $i8$sym, $i7, $i8);
        $i9 = $i7 - $i8;
        $d0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i9$sym, 7);
        $d0 = (double) $i9;
        $i10$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_10 = r8.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 501);
        $i10 = r8.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i11$sym = r9.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_11 = r9.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 501);
        $i11 = r9.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, $i11$sym, $i10, $i11);
        $i12 = $i10 - $i11;
        $d1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i12$sym, 7);
        $d1 = (double) $i12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2148, $d0$sym, $d1$sym);
        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);
        $d2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2148);
        $f0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d2$sym, 6);
        $f0 = (float) $d2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21788, null, $f0$sym);
        virtualinvoke r7.<in.shick.lockpatterngenerator.NodeDrawable: void setExitAngle(float)>($f0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45495, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        return;
    }

    private void testPracticePattern()
    {
        acteve.symbolic.integer.Expression _sym_tmp_9, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.LockPatternView$HighlightMode r3;
        java.util.List $r4, $r5, $r6;
        boolean $z0;
        android.os.Handler $r7;
        in.shick.lockpatterngenerator.LockPatternView$1 $r8;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21790, 32545, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_9 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45496, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45496, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 5);
        r2 = $r1[5];
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mDisplayingPracticeResult$sym> = null;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mDisplayingPracticeResult$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 496);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mDisplayingPracticeResult$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(496);
        r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mDisplayingPracticeResult> = 1;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeFailureMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 516);
        r3 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mPracticeFailureMode>;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 524);
        $r4 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mPracticePattern>;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 511);
        $r5 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z0 = interfaceinvoke $r4.<java.util.List: boolean equals(java.lang.Object)>($r5);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_9 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45497, 0);
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeSuccessMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 517);
        r3 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mPracticeSuccessMode>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45497, 1);
        goto label3;

     label3:
        _sym_tmp_7 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 524);
        $r6 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mPracticePattern>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21784, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void loadPattern(java.util.List,in.shick.lockpatterngenerator.LockPatternView$HighlightMode)>($r6, r3);
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mHandler$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 518);
        $r7 = r0.<in.shick.lockpatterngenerator.LockPatternView: android.os.Handler mHandler>;
        $r8 = new in.shick.lockpatterngenerator.LockPatternView$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21776, null, null);
        specialinvoke $r8.<in.shick.lockpatterngenerator.LockPatternView$1: void <init>(in.shick.lockpatterngenerator.LockPatternView)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1473, null, null, null);
        virtualinvoke $r7.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r8, 1000L);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    private void resetPractice()
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.List $r3, $r4;
        java.util.Set $r5;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21791, 32546, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45498, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45498, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 6);
        r2 = $r1[6];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 524);
        $r3 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mPracticePattern>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21787, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void clearPattern(java.util.List)>($r3);
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 524);
        $r4 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mPracticePattern>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(76, null);
        interfaceinvoke $r4.<java.util.List: void clear()>();
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePool$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 525);
        $r5 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.Set mPracticePool>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(76, null);
        interfaceinvoke $r5.<java.util.Set: void clear()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mDisplayingPracticeResult$sym> = null;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mDisplayingPracticeResult$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 496);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mDisplayingPracticeResult$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(496);
        r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mDisplayingPracticeResult> = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        acteve.symbolic.integer.Expression _sym_tmp_21, $i11$sym, $i10$sym, $f7$sym, $i9$sym, $f6$sym, $i8$sym, $f5$sym, $i7$sym, $f4$sym, $i6$sym, $z3$sym, $f3$sym, $i5$sym, $f2$sym, $i4$sym, $f1$sym, $i3$sym, $f0$sym, $i2$sym, $z2$sym, $z1$sym, $z0$sym, i1$sym, i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        in.shick.lockpatterngenerator.LockPatternView r0;
        android.graphics.Canvas r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.List r4;
        in.shick.lockpatterngenerator.LockPatternView$CenterIterator r5, $r8;
        in.shick.lockpatterngenerator.external.Point r6, r7, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.graphics.Paint $r10, $r13;
        in.shick.lockpatterngenerator.NodeDrawable[][] $r14;
        in.shick.lockpatterngenerator.NodeDrawable[] $r15;
        in.shick.lockpatterngenerator.NodeDrawable $r16;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        r1 := @parameter0: android.graphics.Canvas;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1463, 32547, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_21 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45499, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45499, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 7);
        r3 = $r2[7];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 511);
        r4 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern>;
        $z0$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mPracticeMode$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 523);
        $z0 = r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mPracticeMode>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45500, 0);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 524);
        r4 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mPracticePattern>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45500, 1);
        goto label3;

     label3:
        $r8 = new in.shick.lockpatterngenerator.LockPatternView$CenterIterator;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        $r9 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21778, null, null, null);
        specialinvoke $r8.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: void <init>(in.shick.lockpatterngenerator.LockPatternView,java.util.Iterator)>(r0, $r9);
        r5 = $r8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z1 = virtualinvoke r5.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean hasNext()>();
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45501, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21780, null);
        r6 = virtualinvoke r5.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: in.shick.lockpatterngenerator.external.Point next()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;

     label4:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z2 = virtualinvoke r5.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: boolean hasNext()>();
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45502, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21780, null);
        r7 = virtualinvoke r5.<in.shick.lockpatterngenerator.LockPatternView$CenterIterator: in.shick.lockpatterngenerator.external.Point next()>();
        $i2$sym = r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_5 = r6.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 501);
        $i2 = r6.<in.shick.lockpatterngenerator.external.Point: int x>;
        $f0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i2$sym, 6);
        $f0 = (float) $i2;
        $i3$sym = r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_6 = r6.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 502);
        $i3 = r6.<in.shick.lockpatterngenerator.external.Point: int y>;
        $f1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i3$sym, 6);
        $f1 = (float) $i3;
        $i4$sym = r7.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_7 = r7.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 501);
        $i4 = r7.<in.shick.lockpatterngenerator.external.Point: int x>;
        $f2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i4$sym, 6);
        $f2 = (float) $i4;
        $i5$sym = r7.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_8 = r7.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 502);
        $i5 = r7.<in.shick.lockpatterngenerator.external.Point: int y>;
        $f3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i5$sym, 6);
        $f3 = (float) $i5;
        _sym_tmp_9 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mEdgePaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 520);
        $r10 = r0.<in.shick.lockpatterngenerator.LockPatternView: android.graphics.Paint mEdgePaint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2456, null, $f0$sym, $f1$sym, $f2$sym, $f3$sym, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r10);
        r6 = r7;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label4;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45502, 1);
        goto label6;

     label6:
        $z3$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mDrawTouchExtension$sym>;
        _sym_tmp_10 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mDrawTouchExtension$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 515);
        $z3 = r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mDrawTouchExtension>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 == 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45503, 0);
        $i6$sym = r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_11 = r6.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 501);
        $i6 = r6.<in.shick.lockpatterngenerator.external.Point: int x>;
        $f4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i6$sym, 6);
        $f4 = (float) $i6;
        $i7$sym = r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_12 = r6.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 502);
        $i7 = r6.<in.shick.lockpatterngenerator.external.Point: int y>;
        $f5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i7$sym, 6);
        $f5 = (float) $i7;
        _sym_tmp_13 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchPoint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 513);
        $r11 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchPoint>;
        $i8$sym = $r11.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_14 = $r11.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 501);
        $i8 = $r11.<in.shick.lockpatterngenerator.external.Point: int x>;
        $f6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i8$sym, 6);
        $f6 = (float) $i8;
        _sym_tmp_15 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchPoint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 513);
        $r12 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchPoint>;
        $i9$sym = $r12.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_16 = $r12.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 502);
        $i9 = $r12.<in.shick.lockpatterngenerator.external.Point: int y>;
        $f7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i9$sym, 6);
        $f7 = (float) $i9;
        _sym_tmp_17 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mEdgePaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 520);
        $r13 = r0.<in.shick.lockpatterngenerator.LockPatternView: android.graphics.Paint mEdgePaint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2456, null, $f4$sym, $f5$sym, $f6$sym, $f7$sym, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f4, $f5, $f6, $f7, $r13);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        goto label9;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45501, 1);
        goto label9;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45503, 1);
        goto label9;

     label9:
        i0$sym = null;
        i0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;

     label10:
        $i10$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_18 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 510);
        $i10 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i10$sym, i0, $i10);
        if i0 >= $i10 goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45504, 0);
        i1$sym = null;
        i1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;

     label11:
        $i11$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_19 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 510);
        $i11 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i11$sym, i1, $i11);
        if i1 >= $i11 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45505, 0);
        _sym_tmp_20 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 500);
        $r14 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r14, i1);
        $r15 = $r14[i1];
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r15, i0);
        $r16 = $r15[i0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1462, null, null);
        virtualinvoke $r16.<in.shick.lockpatterngenerator.NodeDrawable: void draw(android.graphics.Canvas)>(r1);
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;
        goto label11;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45505, 1);
        goto label13;

     label13:
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 13);
        r3[13] = 1;
        goto label10;

        goto label15;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45504, 1);
        goto label15;

     label15:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 14);
        r3[14] = 1;
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        acteve.symbolic.integer.Expression _sym_tmp_41, $z6$sym, $z4$sym, $z3$sym, $i20$sym, $d5$sym, $d4$sym, $d3$sym, $d2$sym, $f5$sym, $f4$sym, $i19$sym, $d1$sym, $d0$sym, $f3$sym, $f2$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, $z2$sym, $i1$sym, $z1$sym, $z0$sym, i0$sym, f1$sym, f0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_40, _sym_tmp_39, _sym_tmp_38, _sym_tmp_37, _sym_tmp_36, _sym_tmp_35, _sym_tmp_34, _sym_tmp_33, _sym_tmp_32, _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        in.shick.lockpatterngenerator.LockPatternView r0;
        android.view.MotionEvent r1;
        boolean[][] $r2;
        boolean[] r3;
        float f0, f1, $f2, $f3, $f4, $f5;
        in.shick.lockpatterngenerator.external.Point r4, r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r17, $r20, $r22, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z6;
        in.shick.lockpatterngenerator.NodeDrawable[][] $r14;
        in.shick.lockpatterngenerator.NodeDrawable[] $r16;
        in.shick.lockpatterngenerator.NodeDrawable $r18;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.util.Set $r19, $r25;
        android.os.Vibrator $r21;
        java.util.List $r24;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        r1 := @parameter0: android.view.MotionEvent;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(2129, 32548, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_41 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45506, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45506, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 8);
        r3 = $r2[8];
        $z0$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mPracticeMode$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 523);
        $z0 = r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mPracticeMode>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45507, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2129, null, null);
        $z1 = specialinvoke r0.<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>(r1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2129);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(2129, $z1$sym);
        return $z1;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45507, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1469, null);
        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();
        $i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1469);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, null, $i1, 0);
        if $i1 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45508, 0);
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, null, $i1, 1);
        if $i1 == 1 goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45509, 0);
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, null, $i1, 2);
        if $i1 == 2 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45510, 0);
        goto label16;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45508, 1);
        goto label5;

     label5:
        $z2$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mDisplayingPracticeResult$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mDisplayingPracticeResult$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 496);
        $z2 = r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mDisplayingPracticeResult>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45511, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21791, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void resetPractice()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45511, 1);
        goto label7;

     label7:
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mDrawTouchExtension$sym> = null;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mDrawTouchExtension$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 515);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mDrawTouchExtension$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(515);
        r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mDrawTouchExtension> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45510, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2130, null);
        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();
        f0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2130);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2131, null);
        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();
        f1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2131);
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchPoint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 513);
        $r6 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchPoint>;
        $i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f0$sym, 4);
        $i2 = (int) f0;
        $r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym> = $i2$sym;
        _sym_tmp_6 = $r6.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 501);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r6.<in.shick.lockpatterngenerator.external.Point: int x$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        $r6.<in.shick.lockpatterngenerator.external.Point: int x> = $i2;
        _sym_tmp_7 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchPoint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 513);
        $r7 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchPoint>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f1$sym, 4);
        $i3 = (int) f1;
        $r7.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym> = $i3$sym;
        _sym_tmp_8 = $r7.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_8, 502);
        _sym_tmp_8 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r7.<in.shick.lockpatterngenerator.external.Point: int y$a3tid> = _sym_tmp_8;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        $r7.<in.shick.lockpatterngenerator.external.Point: int y> = $i3;
        _sym_tmp_9 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 514);
        $r8 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f0$sym, 4);
        $i4 = (int) f0;
        $i5$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mCellLength$sym>;
        _sym_tmp_10 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 521);
        $i5 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, $i5$sym, $i4, $i5);
        $i6 = $i4 / $i5;
        $r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym> = $i6$sym;
        _sym_tmp_11 = $r8.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 501);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r8.<in.shick.lockpatterngenerator.external.Point: int x$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        $r8.<in.shick.lockpatterngenerator.external.Point: int x> = $i6;
        _sym_tmp_12 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 514);
        $r9 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f1$sym, 4);
        $i7 = (int) f1;
        $i8$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mCellLength$sym>;
        _sym_tmp_13 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 521);
        $i8 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCellLength>;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, $i8$sym, $i7, $i8);
        $i9 = $i7 / $i8;
        $r9.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym> = $i9$sym;
        _sym_tmp_14 = $r9.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_14, 502);
        _sym_tmp_14 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r9.<in.shick.lockpatterngenerator.external.Point: int y$a3tid> = _sym_tmp_14;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        $r9.<in.shick.lockpatterngenerator.external.Point: int y> = $i9;
        _sym_tmp_15 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 514);
        $r10 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell>;
        $i10$sym = $r10.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_16 = $r10.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 501);
        $i10 = $r10.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, null, $i10, 0);
        if $i10 < 0 goto label17;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45512, 0);
        _sym_tmp_17 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 514);
        $r11 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell>;
        $i11$sym = $r11.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_18 = $r11.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 501);
        $i11 = $r11.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i12$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_19 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 510);
        $i12 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, $i12$sym, $i11, $i12);
        if $i11 >= $i12 goto label18;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45513, 0);
        _sym_tmp_20 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 514);
        $r12 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell>;
        $i13$sym = $r12.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_21 = $r12.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 502);
        $i13 = $r12.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i13$sym, null, $i13, 0);
        if $i13 < 0 goto label19;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45514, 0);
        _sym_tmp_22 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 514);
        $r13 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell>;
        $i14$sym = $r13.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_23 = $r13.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 502);
        $i14 = $r13.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i15$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_24 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 510);
        $i15 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, $i15$sym, $i14, $i15);
        if $i14 < $i15 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45515, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        goto label22;

        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45515, 1);
        goto label11;

     label11:
        _sym_tmp_25 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mNodeDrawables$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 500);
        $r14 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.NodeDrawable[][] mNodeDrawables>;
        _sym_tmp_26 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 514);
        $r15 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell>;
        $i16$sym = $r15.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_27 = $r15.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 501);
        $i16 = $r15.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r14, $i16);
        $r16 = $r14[$i16];
        _sym_tmp_28 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_28, 514);
        $r17 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell>;
        $i17$sym = $r17.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_29 = $r17.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 502);
        $i17 = $r17.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r16, $i17);
        $r18 = $r16[$i17];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21779, null);
        r4 = virtualinvoke $r18.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point getCenter()>();
        $i18$sym = r4.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_30 = r4.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 501);
        $i18 = r4.<in.shick.lockpatterngenerator.external.Point: int x>;
        $f2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i18$sym, 6);
        $f2 = (float) $i18;
        $f3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f0$sym, $f2$sym, f0, $f2);
        $f3 = f0 - $f2;
        $d0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f3$sym, 7);
        $d0 = (double) $f3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5951, $d0$sym, null);
        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, 2.0);
        $d1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5951);
        $i19$sym = r4.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_31 = r4.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_31, 502);
        $i19 = r4.<in.shick.lockpatterngenerator.external.Point: int y>;
        $f4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i19$sym, 6);
        $f4 = (float) $i19;
        $f5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f1$sym, $f4$sym, f1, $f4);
        $f5 = f1 - $f4;
        $d2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f5$sym, 7);
        $d2 = (double) $f5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5951, $d2$sym, null);
        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, 2.0);
        $d3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5951);
        $d4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,double,double)>($d1$sym, $d3$sym, $d1, $d3);
        $d4 = $d1 + $d3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2587, $d4$sym);
        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);
        $d5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2587);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d5$sym, 4);
        i0 = (int) $d5;
        $i20$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mTouchThreshold$sym>;
        _sym_tmp_32 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchThreshold$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_32, 522);
        $i20 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchThreshold>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i20$sym, i0, $i20);
        if i0 >= $i20 goto label20;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45516, 0);
        _sym_tmp_33 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePool$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_33, 525);
        $r19 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.Set mPracticePool>;
        _sym_tmp_34 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_34, 514);
        $r20 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(49, null, null);
        $z3 = interfaceinvoke $r19.<java.util.Set: boolean contains(java.lang.Object)>($r20);
        $z3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(49);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 != 0 goto label21;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45517, 0);
        $z4$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mTactileFeedback$sym>;
        _sym_tmp_35 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTactileFeedback$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_35, 526);
        $z4 = r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mTactileFeedback>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 13);
        r3[13] = 1;
        _sym_tmp_41 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z4$sym, null, $z4, 0);
        if $z4 == 0 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45518, 0);
        _sym_tmp_36 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mVibrator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_36, 519);
        $r21 = r0.<in.shick.lockpatterngenerator.LockPatternView: android.os.Vibrator mVibrator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1824, null, null);
        virtualinvoke $r21.<android.os.Vibrator: void vibrate(long)>(35L);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 14);
        r3[14] = 1;
        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45518, 1);
        goto label13;

     label13:
        $r22 = new in.shick.lockpatterngenerator.external.Point;
        _sym_tmp_37 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTouchCell$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_37, 514);
        $r23 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.external.Point mTouchCell>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21792, null, null);
        specialinvoke $r22.<in.shick.lockpatterngenerator.external.Point: void <init>(in.shick.lockpatterngenerator.external.Point)>($r23);
        r5 = $r22;
        _sym_tmp_38 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_38, 524);
        $r24 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mPracticePattern>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21789, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void appendPattern(java.util.List,in.shick.lockpatterngenerator.external.Point)>($r24, r5);
        _sym_tmp_39 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePool$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_39, 525);
        $r25 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.Set mPracticePool>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r25.<java.util.Set: boolean add(java.lang.Object)>(r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 15);
        r3[15] = 1;
        goto label22;

        goto label15;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45509, 1);
        goto label15;

     label15:
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mDrawTouchExtension$sym> = null;
        _sym_tmp_40 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mDrawTouchExtension$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_40, 515);
        _sym_tmp_40 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mDrawTouchExtension$a3tid> = _sym_tmp_40;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(515);
        r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mDrawTouchExtension> = 0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21790, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void testPracticePattern()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 16);
        r3[16] = 1;
        goto label22;

     label16:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2129, null, null);
        $z6 = specialinvoke r0.<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>(r1);
        $z6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2129);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 17);
        r3[17] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(2129, $z6$sym);
        return $z6;

        goto label22;

     label17:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45512, 1);
        goto label22;

        goto label22;

     label18:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45513, 1);
        goto label22;

        goto label22;

     label19:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45514, 1);
        goto label22;

        goto label22;

     label20:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45516, 1);
        goto label22;

        goto label22;

     label21:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_41, 45517, 1);
        goto label22;

     label22:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 18, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 18);
        r3[18] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(2129, null);
        return 1;
    }

    protected void onMeasure(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, i6$sym, i5$sym, i4$sym, i3$sym, i2$sym, z0$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1, i2, i3, i4, i5, i6;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean z0;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1460, 32549, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45519, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45519, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];
        z0$sym = null;
        z0 = 0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2119, i0$sym);
        i2 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);
        i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2119);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2073, i0$sym);
        i3 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);
        i3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2073);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2119, i1$sym);
        i4 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i1);
        i4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2119);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2073, i1$sym);
        i5 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i1);
        i5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2073);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 0);
        if i3 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45520, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i5$sym, null, i5, 0);
        if i5 != 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45521, 0);
        i6$sym = null;
        i6 = 100;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1459, null, i6$sym, i6$sym);
        virtualinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void setMeasuredDimension(int,int)>(i6, i6);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label9;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45520, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45521, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 0);
        if i3 != 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45522, 0);
        i6$sym = i4$sym;
        i6 = i4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        goto label9;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45522, 1);
        goto label6;

     label6:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i5$sym, null, i5, 0);
        if i5 != 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45523, 0);
        i6$sym = i2$sym;
        i6 = i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label9;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45523, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1439, i2$sym, i4$sym);
        i6 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i4);
        i6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1439);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;

     label9:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1459, null, i6$sym, i6$sym);
        virtualinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void setMeasuredDimension(int,int)>(i6, i6);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $z0$sym, $i4$sym, r2$sym, i3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, $i4;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0;
        java.util.List $r3;
        in.shick.lockpatterngenerator.LockPatternView$HighlightMode $r4;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        i3 := @parameter3: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(2118, 32550, 5);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        i2$sym = a3targs$symargs[3];
        i3$sym = a3targs$symargs[4];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45524, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45524, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 10);
        r2 = $r1[10];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1439, i0$sym, i1$sym);
        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);
        $i4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1439);
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthPx$sym> = $i4$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthPx$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 509);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthPx$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(509);
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthPx> = $i4;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21785, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void buildDrawables()>();
        $z0$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mPracticeMode$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 523);
        $z0 = r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mPracticeMode>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45525, 0);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 511);
        $r3 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern>;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 512);
        $r4 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mHighlightMode>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21784, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void loadPattern(java.util.List,in.shick.lockpatterngenerator.LockPatternView$HighlightMode)>($r3, $r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45525, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    public void setPattern(java.util.List)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        java.util.List r1, $r4;
        boolean[][] $r2;
        boolean[] r3;
        in.shick.lockpatterngenerator.LockPatternView$HighlightMode $r5;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        r1 := @parameter0: java.util.List;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21758, 32551, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45526, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45526, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 11);
        r3 = $r2[11];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 511);
        $r4 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21787, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void clearPattern(java.util.List)>($r4);
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 512);
        $r5 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mHighlightMode>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21784, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void loadPattern(java.util.List,in.shick.lockpatterngenerator.LockPatternView$HighlightMode)>(r1, $r5);
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 511);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(511);
        r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern> = r1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public java.util.List getPattern()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.List $r3;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21757, 32552, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45527, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45527, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 12);
        r2 = $r1[12];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 511);
        $r3 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    public void setGridLength(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.List $r3;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21767, 32553, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45528, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45528, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 13);
        r2 = $r1[13];
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym> = i0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 510);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(510);
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes> = i0;
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(15924);
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 511);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(511);
        r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern> = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21785, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void buildDrawables()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public int getGridLength()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21759, 32554, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45529, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45529, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 14);
        r2 = $r1[14];
        $i0$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mLengthNodes$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 510);
        $i0 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mLengthNodes>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21759, $i0$sym);
        return $i0;
    }

    public void setHighlightMode(in.shick.lockpatterngenerator.LockPatternView$HighlightMode)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        in.shick.lockpatterngenerator.LockPatternView$HighlightMode r1;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        r1 := @parameter0: in.shick.lockpatterngenerator.LockPatternView$HighlightMode;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21761, 32555, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45530, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45530, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 15);
        r3 = $r2[15];
        $z0$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mPracticeMode$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 523);
        $z0 = r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mPracticeMode>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21763, null, null, $z0$sym);
        virtualinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void setHighlightMode(in.shick.lockpatterngenerator.LockPatternView$HighlightMode,boolean)>(r1, $z0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void setHighlightMode(in.shick.lockpatterngenerator.LockPatternView$HighlightMode, boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, r3$sym, z0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        in.shick.lockpatterngenerator.LockPatternView$HighlightMode r1, $r5;
        boolean z0;
        boolean[][] $r2;
        boolean[] r3;
        java.util.List $r4;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        r1 := @parameter0: in.shick.lockpatterngenerator.LockPatternView$HighlightMode;
        z0 := @parameter1: boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21763, 32556, 3);
        z0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r2 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45531, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45531, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 16);
        r3 = $r2[16];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 512);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mHighlightMode$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(512);
        r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mHighlightMode> = r1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, null, z0, 0);
        if z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45532, 0);
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 511);
        $r4 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern>;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 512);
        $r5 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mHighlightMode>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21784, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void loadPattern(java.util.List,in.shick.lockpatterngenerator.LockPatternView$HighlightMode)>($r4, $r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45532, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        return;
    }

    public in.shick.lockpatterngenerator.LockPatternView$HighlightMode getHighlightMode()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.LockPatternView$HighlightMode $r3;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21760, 32557, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45533, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45533, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 17);
        r2 = $r1[17];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 512);
        $r3 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mHighlightMode>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    public void setPracticeMode(boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_10, r2$sym, z0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean z0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList $r3;
        java.util.HashSet $r4;
        java.util.List $r5, $r6, $r7;
        in.shick.lockpatterngenerator.LockPatternView$HighlightMode $r8;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        z0 := @parameter0: boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21765, 32558, 2);
        z0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_10 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45534, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45534, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 18);
        r2 = $r1[18];
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mDisplayingPracticeResult$sym> = null;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mDisplayingPracticeResult$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 496);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mDisplayingPracticeResult$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(496);
        r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mDisplayingPracticeResult> = 0;
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mPracticeMode$sym> = z0$sym;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 523);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeMode$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(523);
        r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mPracticeMode> = z0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, null, z0, 0);
        if z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45535, 0);
        $r3 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.util.ArrayList: void <init>()>();
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 524);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePattern$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(524);
        r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mPracticePattern> = $r3;
        $r4 = new java.util.HashSet;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.util.HashSet: void <init>()>();
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePool$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 525);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePool$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(525);
        r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.Set mPracticePool> = $r4;
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 511);
        $r5 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21787, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void clearPattern(java.util.List)>($r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45535, 1);
        goto label3;

     label3:
        _sym_tmp_7 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticePattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 524);
        $r6 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mPracticePattern>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21787, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void clearPattern(java.util.List)>($r6);
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mCurrentPattern$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 511);
        $r7 = r0.<in.shick.lockpatterngenerator.LockPatternView: java.util.List mCurrentPattern>;
        _sym_tmp_9 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mHighlightMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 512);
        $r8 = r0.<in.shick.lockpatterngenerator.LockPatternView: in.shick.lockpatterngenerator.LockPatternView$HighlightMode mHighlightMode>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21784, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void loadPattern(java.util.List,in.shick.lockpatterngenerator.LockPatternView$HighlightMode)>($r7, $r8);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return;
    }

    public boolean getPracticeMode()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21793, 32559, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45536, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45536, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 19);
        r2 = $r1[19];
        $z0$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mPracticeMode$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mPracticeMode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 523);
        $z0 = r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mPracticeMode>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21793, $z0$sym);
        return $z0;
    }

    public void setTactileFeedbackEnabled(boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym, z0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean z0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        z0 := @parameter0: boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(2104, 32560, 2);
        z0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45537, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45537, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 20);
        r2 = $r1[20];
        r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mTactileFeedback$sym> = z0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTactileFeedback$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 526);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.LockPatternView: int mTactileFeedback$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(526);
        r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mTactileFeedback> = z0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public boolean getTactileFeedbackEnabled()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0;

        r0 := @this: in.shick.lockpatterngenerator.LockPatternView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21794, 32561, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45538, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45538, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 21);
        r2 = $r1[21];
        $z0$sym = r0.<in.shick.lockpatterngenerator.LockPatternView: acteve.symbolic.integer.Expression mTactileFeedback$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.LockPatternView: int mTactileFeedback$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 526);
        $z0 = r0.<in.shick.lockpatterngenerator.LockPatternView: boolean mTactileFeedback>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21794, $z0$sym);
        return $z0;
    }

    static void access$000(in.shick.lockpatterngenerator.LockPatternView)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.LockPatternView r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @parameter0: in.shick.lockpatterngenerator.LockPatternView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21777, 32562, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 508);
        $r1 = <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45539, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45539, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 22);
        r2 = $r1[22];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21791, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.LockPatternView: void resetPractice()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32563, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 23);
        r1 = $r0[23];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r24$sym, $r23$sym, $r22$sym, $r21$sym, $r20$sym, $r19$sym, $r18$sym, $r17$sym, $r16$sym, $r15$sym, $r14$sym, $r13$sym, $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32564, 0);
        $r0 = newmultiarray (boolean)[24][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 508);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.LockPatternView: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(508);
        <in.shick.lockpatterngenerator.LockPatternView: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[11];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[4];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[6];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[3];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[3];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[1];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[15];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[19];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[9];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[3];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[1];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        $r13 = newarray (boolean)[1];
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 12);
        $r0[12] = $r13;
        $r14 = newarray (boolean)[1];
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 13);
        $r0[13] = $r14;
        $r15 = newarray (boolean)[1];
        $r15$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 14);
        $r0[14] = $r15;
        $r16 = newarray (boolean)[1];
        $r16$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 15);
        $r0[15] = $r16;
        $r17 = newarray (boolean)[3];
        $r17$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 16);
        $r0[16] = $r17;
        $r18 = newarray (boolean)[1];
        $r18$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 17);
        $r0[17] = $r18;
        $r19 = newarray (boolean)[4];
        $r19$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 18);
        $r0[18] = $r19;
        $r20 = newarray (boolean)[1];
        $r20$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 19);
        $r0[19] = $r20;
        $r21 = newarray (boolean)[1];
        $r21$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 20);
        $r0[20] = $r21;
        $r22 = newarray (boolean)[1];
        $r22$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 21);
        $r0[21] = $r22;
        $r23 = newarray (boolean)[1];
        $r23$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 22);
        $r0[22] = $r23;
        $r24 = newarray (boolean)[1];
        $r24$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 23);
        $r0[23] = $r24;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/LockPatternView", 8297267337855791982L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.NodeDrawable extends android.graphics.drawable.Drawable
{
    public static final int STATE_UNSELECTED;
    public static final int STATE_SELECTED;
    public static final int STATE_HIGHLIGHTED;
    public static final int STATE_CORRECT;
    public static final int STATE_INCORRECT;
    public static final int STATE_CUSTOM;
    public static final int[] DEFAULT_STATE_COLORS;
    public static final int CIRCLE_COUNT;
    public static final int CIRCLE_OUTER;
    public static final int CIRCLE_MIDDLE;
    public static final int CIRCLE_INNER;
    public static final float[] CIRCLE_RATIOS;
    public static final int[] DEFAULT_CIRCLE_COLORS;
    public static final int[] CIRCLE_ORDER;
    protected float mArrowTipRad;
    protected float mArrowBaseRad;
    protected float mArrowHalfBase;
    protected android.graphics.drawable.ShapeDrawable[] mCircles;
    protected android.graphics.Paint mExitPaint;
    protected android.graphics.Path mExitIndicator;
    protected float mExitAngle;
    protected in.shick.lockpatterngenerator.external.Point mCenter;
    protected float mDiameter;
    protected int mState;
    protected int mCustomColor;
    private static final boolean[][] $VRc;
    public static final acteve.symbolic.integer.Expression STATE_UNSELECTED$sym;
    public static final int STATE_UNSELECTED$a3tid;
    public static final acteve.symbolic.integer.Expression STATE_SELECTED$sym;
    public static final int STATE_SELECTED$a3tid;
    public static final acteve.symbolic.integer.Expression STATE_HIGHLIGHTED$sym;
    public static final int STATE_HIGHLIGHTED$a3tid;
    public static final acteve.symbolic.integer.Expression STATE_CORRECT$sym;
    public static final int STATE_CORRECT$a3tid;
    public static final acteve.symbolic.integer.Expression STATE_INCORRECT$sym;
    public static final int STATE_INCORRECT$a3tid;
    public static final acteve.symbolic.integer.Expression STATE_CUSTOM$sym;
    public static final int STATE_CUSTOM$a3tid;
    public static final acteve.symbolic.integer.Expression DEFAULT_STATE_COLORS$sym;
    public static final int DEFAULT_STATE_COLORS$a3tid;
    public static final acteve.symbolic.integer.Expression CIRCLE_COUNT$sym;
    public static final int CIRCLE_COUNT$a3tid;
    public static final acteve.symbolic.integer.Expression CIRCLE_OUTER$sym;
    public static final int CIRCLE_OUTER$a3tid;
    public static final acteve.symbolic.integer.Expression CIRCLE_MIDDLE$sym;
    public static final int CIRCLE_MIDDLE$a3tid;
    public static final acteve.symbolic.integer.Expression CIRCLE_INNER$sym;
    public static final int CIRCLE_INNER$a3tid;
    public static final acteve.symbolic.integer.Expression CIRCLE_RATIOS$sym;
    public static final int CIRCLE_RATIOS$a3tid;
    public static final acteve.symbolic.integer.Expression DEFAULT_CIRCLE_COLORS$sym;
    public static final int DEFAULT_CIRCLE_COLORS$a3tid;
    public static final acteve.symbolic.integer.Expression CIRCLE_ORDER$sym;
    public static final int CIRCLE_ORDER$a3tid;
    protected acteve.symbolic.integer.Expression mArrowTipRad$sym;
    protected int mArrowTipRad$a3tid;
    protected acteve.symbolic.integer.Expression mArrowBaseRad$sym;
    protected int mArrowBaseRad$a3tid;
    protected acteve.symbolic.integer.Expression mArrowHalfBase$sym;
    protected int mArrowHalfBase$a3tid;
    protected int mCircles$a3tid;
    protected int mExitPaint$a3tid;
    protected int mExitIndicator$a3tid;
    protected acteve.symbolic.integer.Expression mExitAngle$sym;
    protected int mExitAngle$a3tid;
    protected int mCenter$a3tid;
    protected acteve.symbolic.integer.Expression mDiameter$sym;
    protected int mDiameter$a3tid;
    protected acteve.symbolic.integer.Expression mState$sym;
    protected int mState$a3tid;
    protected acteve.symbolic.integer.Expression mCustomColor$sym;
    protected int mCustomColor$a3tid;
    private static final int $VRc$a3tid;

    public void <init>(float, in.shick.lockpatterngenerator.external.Point)
    {
        acteve.symbolic.integer.Expression _sym_tmp_11, $i0$sym, $r5$sym, r3$sym, f0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        float f0;
        in.shick.lockpatterngenerator.external.Point r1;
        boolean[][] $r2;
        boolean[] r3;
        android.graphics.drawable.ShapeDrawable[] $r4;
        int[] $r5;
        android.graphics.Paint $r6, $r7, $r9;
        android.graphics.Paint$Style $r8;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        f0 := @parameter0: float;
        r1 := @parameter1: in.shick.lockpatterngenerator.external.Point;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21783, 32565, 3);
        f0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r2 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_11 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45540, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45540, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();
        $r4 = newarray (android.graphics.drawable.ShapeDrawable)[3];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCircles$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 528);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCircles$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(528);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.drawable.ShapeDrawable[] mCircles> = $r4;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCenter$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 529);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCenter$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(529);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point mCenter> = r1;
        r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mDiameter$sym> = f0$sym;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mDiameter$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 530);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mDiameter$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(530);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: float mDiameter> = f0;
        r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mState$sym> = null;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mState$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 531);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mState$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(531);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mState> = 0;
        r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mExitAngle$sym> = null;
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitAngle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 532);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitAngle$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(532);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: float mExitAngle> = #NaNF;
        $r5$sym = <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression DEFAULT_STATE_COLORS$sym>;
        _sym_tmp_7 = <in.shick.lockpatterngenerator.NodeDrawable: int DEFAULT_STATE_COLORS$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 533);
        $r5 = <in.shick.lockpatterngenerator.NodeDrawable: int[] DEFAULT_STATE_COLORS>;
        $i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r5$sym, null, $r5, 5);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r5, 5);
        $i0 = $r5[5];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21782, null, $i0$sym);
        virtualinvoke r0.<in.shick.lockpatterngenerator.NodeDrawable: void setCustomColor(int)>($i0);
        $r6 = new android.graphics.Paint;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<android.graphics.Paint: void <init>()>();
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitPaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_8, 534);
        _sym_tmp_8 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitPaint$a3tid> = _sym_tmp_8;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(534);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.Paint mExitPaint> = $r6;
        _sym_tmp_9 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitPaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 534);
        $r7 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.Paint mExitPaint>;
        $r8 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2093, null, null);
        virtualinvoke $r7.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r8);
        _sym_tmp_10 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitPaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 534);
        $r9 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.Paint mExitPaint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(11418, null, null);
        virtualinvoke $r9.<android.graphics.Paint: void setFlags(int)>(1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21795, null, f0$sym, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.NodeDrawable: void buildShapes(float,in.shick.lockpatterngenerator.external.Point)>(f0, r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void draw(android.graphics.Canvas)
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, $z0$sym, $f0$sym, $i1$sym, $r5$sym, i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        android.graphics.Canvas r1;
        boolean[][] $r2;
        boolean[] r3;
        android.graphics.drawable.ShapeDrawable[] $r4;
        int[] $r5;
        android.graphics.drawable.ShapeDrawable $r6;
        float $f0;
        boolean $z0;
        android.graphics.Path $r7;
        android.graphics.Paint $r8;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        r1 := @parameter0: android.graphics.Canvas;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1462, 32566, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r2 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45541, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45541, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        i0$sym = null;
        i0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_7 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 3);
        if i0 >= 3 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45542, 0);
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCircles$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 528);
        $r4 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.drawable.ShapeDrawable[] mCircles>;
        $r5$sym = <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression CIRCLE_ORDER$sym>;
        _sym_tmp_3 = <in.shick.lockpatterngenerator.NodeDrawable: int CIRCLE_ORDER$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 535);
        $r5 = <in.shick.lockpatterngenerator.NodeDrawable: int[] CIRCLE_ORDER>;
        $i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r5$sym, i0$sym, $r5, i0);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r5, i0);
        $i1 = $r5[i0];
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r4, $i1);
        $r6 = $r4[$i1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1462, null, null);
        virtualinvoke $r6.<android.graphics.drawable.ShapeDrawable: void draw(android.graphics.Canvas)>(r1);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45542, 1);
        goto label4;

     label4:
        $f0$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mExitAngle$sym>;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitAngle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 532);
        $f0 = r0.<in.shick.lockpatterngenerator.NodeDrawable: float mExitAngle>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2455, $f0$sym);
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2455);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_7 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45543, 0);
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitIndicator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 536);
        $r7 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.Path mExitIndicator>;
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitPaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 534);
        $r8 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.Paint mExitPaint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2143, null, null, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r7, $r8);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45543, 1);
        goto label6;

     label6:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        return;
    }

    private void buildShapes(float, in.shick.lockpatterngenerator.external.Point)
    {
        acteve.symbolic.integer.Expression _sym_tmp_15, $f11$sym, $f10$sym, $f9$sym, $f8$sym, $f7$sym, $f6$sym, f5$sym, $f4$sym, $r14$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $f3$sym, $f2$sym, $r11$sym, $i2$sym, $r10$sym, i1$sym, f1$sym, i0$sym, r3$sym, f0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        float f0, f1, $f2, $f3, $f4, f5, $f6, $f7, $f8, $f9, $f10, $f11;
        in.shick.lockpatterngenerator.external.Point r1;
        boolean[][] $r2;
        boolean[] r3;
        android.graphics.Paint r4;
        android.graphics.drawable.ShapeDrawable[] $r5, $r8, $r12;
        android.graphics.drawable.ShapeDrawable $r6, $r9, $r13;
        android.graphics.drawable.shapes.OvalShape $r7;
        int[] $r10;
        float[] $r11, $r14;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        f0 := @parameter0: float;
        r1 := @parameter1: in.shick.lockpatterngenerator.external.Point;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21795, 32567, 3);
        f0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r2 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_15 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_15, 45544, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_15, 45544, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 2);
        r3 = $r2[2];
        i0$sym = null;
        i0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_15 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 3);
        if i0 >= 3 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_15, 45545, 0);
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCircles$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 528);
        $r5 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.drawable.ShapeDrawable[] mCircles>;
        $r6 = new android.graphics.drawable.ShapeDrawable;
        $r7 = new android.graphics.drawable.shapes.OvalShape;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r7.<android.graphics.drawable.shapes.OvalShape: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2571, null, null);
        specialinvoke $r6.<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.shapes.Shape)>($r7);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r5, i0);
        $r5[i0] = $r6;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCircles$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 528);
        $r8 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.drawable.ShapeDrawable[] mCircles>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, i0);
        $r9 = $r8[i0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2575, null);
        r4 = virtualinvoke $r9.<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()>();
        $r10$sym = <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression DEFAULT_CIRCLE_COLORS$sym>;
        _sym_tmp_4 = <in.shick.lockpatterngenerator.NodeDrawable: int DEFAULT_CIRCLE_COLORS$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 537);
        $r10 = <in.shick.lockpatterngenerator.NodeDrawable: int[] DEFAULT_CIRCLE_COLORS>;
        $i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r10$sym, i0$sym, $r10, i0);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r10, i0);
        $i2 = $r10[i0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2092, null, $i2$sym);
        virtualinvoke r4.<android.graphics.Paint: void setColor(int)>($i2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(11418, null, null);
        virtualinvoke r4.<android.graphics.Paint: void setFlags(int)>(1);
        $r11$sym = <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression CIRCLE_RATIOS$sym>;
        _sym_tmp_5 = <in.shick.lockpatterngenerator.NodeDrawable: int CIRCLE_RATIOS$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 538);
        $r11 = <in.shick.lockpatterngenerator.NodeDrawable: float[] CIRCLE_RATIOS>;
        $f2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float[],int)>($r11$sym, i0$sym, $r11, i0);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r11, i0);
        $f2 = $r11[i0];
        f1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f0$sym, $f2$sym, f0, $f2);
        f1 = f0 * $f2;
        $f3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f1$sym, null, f1, 2.0F);
        $f3 = f1 / 2.0F;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f3$sym, 4);
        i1 = (int) $f3;
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCircles$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 528);
        $r12 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.drawable.ShapeDrawable[] mCircles>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r12, i0);
        $r13 = $r12[i0];
        $i3$sym = r1.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_7 = r1.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 501);
        $i3 = r1.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, i1$sym, $i3, i1);
        $i4 = $i3 - i1;
        $i5$sym = r1.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_8 = r1.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 502);
        $i5 = r1.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, i1$sym, $i5, i1);
        $i6 = $i5 - i1;
        $i7$sym = r1.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_9 = r1.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 501);
        $i7 = r1.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, i1$sym, $i7, i1);
        $i8 = $i7 + i1;
        $i9$sym = r1.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_10 = r1.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 502);
        $i9 = r1.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, i1$sym, $i9, i1);
        $i10 = $i9 + i1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1353, null, $i4$sym, $i6$sym, $i8$sym, $i10$sym);
        virtualinvoke $r13.<android.graphics.drawable.ShapeDrawable: void setBounds(int,int,int,int)>($i4, $i6, $i8, $i10);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_15, 45545, 1);
        goto label4;

     label4:
        $r14$sym = <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression CIRCLE_RATIOS$sym>;
        _sym_tmp_11 = <in.shick.lockpatterngenerator.NodeDrawable: int CIRCLE_RATIOS$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 538);
        $r14 = <in.shick.lockpatterngenerator.NodeDrawable: float[] CIRCLE_RATIOS>;
        $f4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float[],int)>($r14$sym, null, $r14, 1);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r14, 1);
        $f4 = $r14[1];
        f5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f0$sym, $f4$sym, f0, $f4);
        f5 = f0 * $f4;
        $f6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f5$sym, null, f5, 2.0F);
        $f6 = f5 / 2.0F;
        $f7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f6$sym, null, $f6, 0.9F);
        $f7 = $f6 * 0.9F;
        r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowTipRad$sym> = $f7$sym;
        _sym_tmp_12 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowTipRad$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_12, 539);
        _sym_tmp_12 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowTipRad$a3tid> = _sym_tmp_12;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(539);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowTipRad> = $f7;
        $f8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f5$sym, null, f5, 2.0F);
        $f8 = f5 / 2.0F;
        $f9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f8$sym, null, $f8, 0.6F);
        $f9 = $f8 * 0.6F;
        r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowBaseRad$sym> = $f9$sym;
        _sym_tmp_13 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowBaseRad$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_13, 540);
        _sym_tmp_13 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowBaseRad$a3tid> = _sym_tmp_13;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(540);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowBaseRad> = $f9;
        $f10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f5$sym, null, f5, 2.0F);
        $f10 = f5 / 2.0F;
        $f11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f10$sym, null, $f10, 0.3F);
        $f11 = $f10 * 0.3F;
        r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowHalfBase$sym> = $f11$sym;
        _sym_tmp_14 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowHalfBase$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_14, 541);
        _sym_tmp_14 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowHalfBase$a3tid> = _sym_tmp_14;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(541);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowHalfBase> = $f11;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return;
    }

    public void setNodeState(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, $r3$sym, i1$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        boolean[][] $r1;
        boolean[] r2;
        int[] $r3;
        android.graphics.drawable.ShapeDrawable[] $r4;
        android.graphics.drawable.ShapeDrawable $r5;
        android.graphics.Paint $r6, $r7;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21786, 32568, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r1 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45546, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45546, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        i1$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mCustomColor$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCustomColor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 542);
        i1 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCustomColor>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_7 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 5);
        if i0 == 5 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45547, 0);
        $r3$sym = <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression DEFAULT_STATE_COLORS$sym>;
        _sym_tmp_3 = <in.shick.lockpatterngenerator.NodeDrawable: int DEFAULT_STATE_COLORS$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 533);
        $r3 = <in.shick.lockpatterngenerator.NodeDrawable: int[] DEFAULT_STATE_COLORS>;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r3$sym, i0$sym, $r3, i0);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, i0);
        i1 = $r3[i0];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45547, 1);
        goto label3;

     label3:
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCircles$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 528);
        $r4 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.drawable.ShapeDrawable[] mCircles>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r4, 0);
        $r5 = $r4[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2575, null);
        $r6 = virtualinvoke $r5.<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2092, null, i1$sym);
        virtualinvoke $r6.<android.graphics.Paint: void setColor(int)>(i1);
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitPaint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 534);
        $r7 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.Paint mExitPaint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2092, null, i1$sym);
        virtualinvoke $r7.<android.graphics.Paint: void setColor(int)>(i1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_7 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 != 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45548, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21788, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.NodeDrawable: void setExitAngle(float)>(#NaNF);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45548, 1);
        goto label5;

     label5:
        r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mState$sym> = i0$sym;
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mState$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 531);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mState$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(531);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mState> = i0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        return;
    }

    public int getNodeState()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21796, 32569, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r1 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45549, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45549, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        $i0$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mState$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mState$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 531);
        $i0 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mState>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21796, $i0$sym);
        return $i0;
    }

    public void setExitAngle(float)
    {
        acteve.symbolic.integer.Expression _sym_tmp_20, $f36$sym, $f35$sym, $d19$sym, $d18$sym, $d17$sym, $f34$sym, $f33$sym, $f32$sym, $d16$sym, $d15$sym, $d14$sym, $f31$sym, $f30$sym, $f29$sym, $d13$sym, $d12$sym, $d11$sym, $f28$sym, $f27$sym, $f26$sym, $d10$sym, $d9$sym, $d8$sym, $f25$sym, $f24$sym, $f23$sym, $f22$sym, $d7$sym, $d6$sym, $f21$sym, $i3$sym, $f20$sym, $f19$sym, $f18$sym, $d5$sym, $d4$sym, $f17$sym, $i2$sym, $f16$sym, $f15$sym, $f14$sym, $d3$sym, $d2$sym, $f13$sym, $i1$sym, $f12$sym, $f11$sym, $f10$sym, $d1$sym, $d0$sym, $f9$sym, $i0$sym, $z0$sym, f8$sym, f7$sym, f6$sym, f5$sym, f4$sym, f3$sym, f2$sym, f1$sym, r2$sym, f0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36;
        boolean[][] $r1;
        boolean[] r2;
        android.graphics.Path r3, $r8;
        boolean $z0;
        in.shick.lockpatterngenerator.external.Point $r4, $r5, $r6, $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        f0 := @parameter0: float;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21788, 32570, 2);
        f0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r1 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_20 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45550, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45550, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 5);
        r2 = $r1[5];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2455, f0$sym);
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2455);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_20 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45551, 0);
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCenter$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 529);
        $r4 = r0.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point mCenter>;
        $i0$sym = $r4.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_3 = $r4.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 501);
        $i0 = $r4.<in.shick.lockpatterngenerator.external.Point: int x>;
        $f9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i0$sym, 6);
        $f9 = (float) $i0;
        $d0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f0$sym, 7);
        $d0 = (double) f0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6072, $d0$sym);
        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);
        $d1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(6072);
        $f10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d1$sym, 6);
        $f10 = (float) $d1;
        $f11$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowTipRad$sym>;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowTipRad$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 539);
        $f11 = r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowTipRad>;
        $f12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f10$sym, $f11$sym, $f10, $f11);
        $f12 = $f10 * $f11;
        f1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f9$sym, $f12$sym, $f9, $f12);
        f1 = $f9 - $f12;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCenter$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 529);
        $r5 = r0.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point mCenter>;
        $i1$sym = $r5.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_6 = $r5.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 502);
        $i1 = $r5.<in.shick.lockpatterngenerator.external.Point: int y>;
        $f13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i1$sym, 6);
        $f13 = (float) $i1;
        $d2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f0$sym, 7);
        $d2 = (double) f0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6073, $d2$sym);
        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);
        $d3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(6073);
        $f14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d3$sym, 6);
        $f14 = (float) $d3;
        $f15$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowTipRad$sym>;
        _sym_tmp_7 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowTipRad$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 539);
        $f15 = r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowTipRad>;
        $f16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f14$sym, $f15$sym, $f14, $f15);
        $f16 = $f14 * $f15;
        f2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f13$sym, $f16$sym, $f13, $f16);
        f2 = $f13 - $f16;
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCenter$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 529);
        $r6 = r0.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point mCenter>;
        $i2$sym = $r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_9 = $r6.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 501);
        $i2 = $r6.<in.shick.lockpatterngenerator.external.Point: int x>;
        $f17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i2$sym, 6);
        $f17 = (float) $i2;
        $d4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f0$sym, 7);
        $d4 = (double) f0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6072, $d4$sym);
        $d5 = staticinvoke <java.lang.Math: double cos(double)>($d4);
        $d5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(6072);
        $f18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d5$sym, 6);
        $f18 = (float) $d5;
        $f19$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowBaseRad$sym>;
        _sym_tmp_10 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowBaseRad$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 540);
        $f19 = r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowBaseRad>;
        $f20$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f18$sym, $f19$sym, $f18, $f19);
        $f20 = $f18 * $f19;
        f3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f17$sym, $f20$sym, $f17, $f20);
        f3 = $f17 - $f20;
        _sym_tmp_11 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCenter$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 529);
        $r7 = r0.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point mCenter>;
        $i3$sym = $r7.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_12 = $r7.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 502);
        $i3 = $r7.<in.shick.lockpatterngenerator.external.Point: int y>;
        $f21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i3$sym, 6);
        $f21 = (float) $i3;
        $d6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f0$sym, 7);
        $d6 = (double) f0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6073, $d6$sym);
        $d7 = staticinvoke <java.lang.Math: double sin(double)>($d6);
        $d7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(6073);
        $f22$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d7$sym, 6);
        $f22 = (float) $d7;
        $f23$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowBaseRad$sym>;
        _sym_tmp_13 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowBaseRad$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 540);
        $f23 = r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowBaseRad>;
        $f24$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f22$sym, $f23$sym, $f22, $f23);
        $f24 = $f22 * $f23;
        f4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f21$sym, $f24$sym, $f21, $f24);
        f4 = $f21 - $f24;
        $f25$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowHalfBase$sym>;
        _sym_tmp_14 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowHalfBase$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 541);
        $f25 = r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowHalfBase>;
        $d8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f0$sym, 7);
        $d8 = (double) f0;
        $d9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,double,double)>($d8$sym, null, $d8, 1.5707963267948966);
        $d9 = $d8 + 1.5707963267948966;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6072, $d9$sym);
        $d10 = staticinvoke <java.lang.Math: double cos(double)>($d9);
        $d10$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(6072);
        $f26$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d10$sym, 6);
        $f26 = (float) $d10;
        $f27$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f25$sym, $f26$sym, $f25, $f26);
        $f27 = $f25 * $f26;
        f5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f3$sym, $f27$sym, f3, $f27);
        f5 = f3 - $f27;
        $f28$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowHalfBase$sym>;
        _sym_tmp_15 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowHalfBase$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 541);
        $f28 = r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowHalfBase>;
        $d11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f0$sym, 7);
        $d11 = (double) f0;
        $d12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,double,double)>($d11$sym, null, $d11, 1.5707963267948966);
        $d12 = $d11 + 1.5707963267948966;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6073, $d12$sym);
        $d13 = staticinvoke <java.lang.Math: double sin(double)>($d12);
        $d13$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(6073);
        $f29$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d13$sym, 6);
        $f29 = (float) $d13;
        $f30$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f28$sym, $f29$sym, $f28, $f29);
        $f30 = $f28 * $f29;
        f6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f4$sym, $f30$sym, f4, $f30);
        f6 = f4 - $f30;
        $f31$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowHalfBase$sym>;
        _sym_tmp_16 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowHalfBase$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 541);
        $f31 = r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowHalfBase>;
        $d14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f0$sym, 7);
        $d14 = (double) f0;
        $d15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,double,double)>($d14$sym, null, $d14, 1.5707963267948966);
        $d15 = $d14 - 1.5707963267948966;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6072, $d15$sym);
        $d16 = staticinvoke <java.lang.Math: double cos(double)>($d15);
        $d16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(6072);
        $f32$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d16$sym, 6);
        $f32 = (float) $d16;
        $f33$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f31$sym, $f32$sym, $f31, $f32);
        $f33 = $f31 * $f32;
        f7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f3$sym, $f33$sym, f3, $f33);
        f7 = f3 - $f33;
        $f34$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mArrowHalfBase$sym>;
        _sym_tmp_17 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mArrowHalfBase$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 541);
        $f34 = r0.<in.shick.lockpatterngenerator.NodeDrawable: float mArrowHalfBase>;
        $d17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>(f0$sym, 7);
        $d17 = (double) f0;
        $d18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,double,double)>($d17$sym, null, $d17, 1.5707963267948966);
        $d18 = $d17 - 1.5707963267948966;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6073, $d18$sym);
        $d19 = staticinvoke <java.lang.Math: double sin(double)>($d18);
        $d19$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(6073);
        $f35$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d19$sym, 6);
        $f35 = (float) $d19;
        $f36$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f34$sym, $f35$sym, $f34, $f35);
        $f36 = $f34 * $f35;
        f8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f4$sym, $f36$sym, f4, $f36);
        f8 = f4 - $f36;
        $r8 = new android.graphics.Path;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r8.<android.graphics.Path: void <init>()>();
        r3 = $r8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2141, null, f1$sym, f2$sym);
        virtualinvoke r3.<android.graphics.Path: void moveTo(float,float)>(f1, f2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2142, null, f5$sym, f6$sym);
        virtualinvoke r3.<android.graphics.Path: void lineTo(float,float)>(f5, f6);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2142, null, f7$sym, f8$sym);
        virtualinvoke r3.<android.graphics.Path: void lineTo(float,float)>(f7, f8);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2142, null, f1$sym, f2$sym);
        virtualinvoke r3.<android.graphics.Path: void lineTo(float,float)>(f1, f2);
        _sym_tmp_18 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitIndicator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_18, 536);
        _sym_tmp_18 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitIndicator$a3tid> = _sym_tmp_18;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(536);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.Path mExitIndicator> = r3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45551, 1);
        goto label3;

     label3:
        r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mExitAngle$sym> = f0$sym;
        _sym_tmp_19 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitAngle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_19, 532);
        _sym_tmp_19 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitAngle$a3tid> = _sym_tmp_19;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(532);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: float mExitAngle> = f0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    public float getExitAngle()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $f0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        boolean[][] $r1;
        boolean[] r2;
        float $f0;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21797, 32571, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r1 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45552, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45552, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 6);
        r2 = $r1[6];
        $f0$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mExitAngle$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mExitAngle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 532);
        $f0 = r0.<in.shick.lockpatterngenerator.NodeDrawable: float mExitAngle>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21797, $f0$sym);
        return $f0;
    }

    public in.shick.lockpatterngenerator.external.Point getCenter()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.external.Point $r3;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21779, 32572, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r1 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45553, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45553, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 7);
        r2 = $r1[7];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCenter$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 529);
        $r3 = r0.<in.shick.lockpatterngenerator.NodeDrawable: in.shick.lockpatterngenerator.external.Point mCenter>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    public void setCustomColor(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21782, 32573, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r1 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45554, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45554, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 8);
        r2 = $r1[8];
        r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mCustomColor$sym> = i0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCustomColor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 542);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCustomColor$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(542);
        r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCustomColor> = i0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public int getCustomColor()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21798, 32574, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r1 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45555, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45555, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];
        $i0$sym = r0.<in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression mCustomColor$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCustomColor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 542);
        $i0 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCustomColor>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21798, $i0$sym);
        return $i0;
    }

    public int getOpacity()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        boolean[][] $r1;
        boolean[] r2;
        android.graphics.drawable.ShapeDrawable[] $r3;
        android.graphics.drawable.ShapeDrawable $r4;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(6576, 32575, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r1 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45556, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45556, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 10);
        r2 = $r1[10];
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCircles$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 528);
        $r3 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.drawable.ShapeDrawable[] mCircles>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 0);
        $r4 = $r3[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6576, null);
        $i0 = virtualinvoke $r4.<android.graphics.drawable.ShapeDrawable: int getOpacity()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(6576);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6576, $i0$sym);
        return $i0;
    }

    public void setAlpha(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, i1$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0, i1;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        boolean[][] $r1;
        boolean[] r2;
        android.graphics.drawable.ShapeDrawable[] $r3;
        android.graphics.drawable.ShapeDrawable $r4;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1364, 32576, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r1 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45557, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45557, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 11);
        r2 = $r1[11];
        i1$sym = null;
        i1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_3 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 3);
        if i1 >= 3 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45558, 0);
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCircles$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 528);
        $r3 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.drawable.ShapeDrawable[] mCircles>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, i1);
        $r4 = $r3[i1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1364, null, i0$sym);
        virtualinvoke $r4.<android.graphics.drawable.ShapeDrawable: void setAlpha(int)>(i0);
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45558, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.NodeDrawable r0;
        android.graphics.ColorFilter r1;
        boolean[][] $r2;
        boolean[] r3;
        android.graphics.drawable.ShapeDrawable[] $r4;
        android.graphics.drawable.ShapeDrawable $r5;

        r0 := @this: in.shick.lockpatterngenerator.NodeDrawable;
        r1 := @parameter0: android.graphics.ColorFilter;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(9342, 32577, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 527);
        $r2 = <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45559, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45559, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 12);
        r3 = $r2[12];
        i0$sym = null;
        i0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_3 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 3);
        if i0 >= 3 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45560, 0);
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.NodeDrawable: int mCircles$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 528);
        $r4 = r0.<in.shick.lockpatterngenerator.NodeDrawable: android.graphics.drawable.ShapeDrawable[] mCircles>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r4, i0);
        $r5 = $r4[i0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9342, null, null);
        virtualinvoke $r5.<android.graphics.drawable.ShapeDrawable: void setColorFilter(android.graphics.ColorFilter)>(r1);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45560, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0;
        acteve.symbolic.integer.Expression $r6$sym, $i0$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, r1$sym;
        boolean[][] $r0;
        boolean[] r1;
        int[] $r2, $r4, $r5, $r6;
        float[] $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32578, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 13);
        r1 = $r0[13];
        $r2 = newarray (int)[6];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 0, -6710887);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 0);
        $r2[0] = -6710887;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 1, -16724992);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 1);
        $r2[1] = -16724992;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 2, -16724788);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 2);
        $r2[2] = -16724788;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 3, -15658497);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 3);
        $r2[3] = -15658497;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 4, -2289391);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 4);
        $r2[4] = -2289391;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 5, -6710887);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 5);
        $r2[5] = -6710887;
        <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression DEFAULT_STATE_COLORS$sym> = $r2$sym;
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int DEFAULT_STATE_COLORS$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 533);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.NodeDrawable: int DEFAULT_STATE_COLORS$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(533);
        <in.shick.lockpatterngenerator.NodeDrawable: int[] DEFAULT_STATE_COLORS> = $r2;
        $r3 = newarray (float)[3];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float[],int,float)>($r3$sym, null, null, $r3, 0, 1.0F);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 0);
        $r3[0] = 1.0F;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float[],int,float)>($r3$sym, null, null, $r3, 1, 0.9F);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 1);
        $r3[1] = 0.9F;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float[],int,float)>($r3$sym, null, null, $r3, 2, 0.33F);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 2);
        $r3[2] = 0.33F;
        <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression CIRCLE_RATIOS$sym> = $r3$sym;
        _sym_tmp_2 = <in.shick.lockpatterngenerator.NodeDrawable: int CIRCLE_RATIOS$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 538);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.NodeDrawable: int CIRCLE_RATIOS$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(538);
        <in.shick.lockpatterngenerator.NodeDrawable: float[] CIRCLE_RATIOS> = $r3;
        $r4 = newarray (int)[3];
        $r4$sym = null;
        $r5$sym = <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression DEFAULT_STATE_COLORS$sym>;
        _sym_tmp_3 = <in.shick.lockpatterngenerator.NodeDrawable: int DEFAULT_STATE_COLORS$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 533);
        $r5 = <in.shick.lockpatterngenerator.NodeDrawable: int[] DEFAULT_STATE_COLORS>;
        $i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r5$sym, null, $r5, 0);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r5, 0);
        $i0 = $r5[0];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r4$sym, null, $i0$sym, $r4, 0, $i0);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 0);
        $r4[0] = $i0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r4$sym, null, null, $r4, 1, -16777216);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 1);
        $r4[1] = -16777216;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r4$sym, null, null, $r4, 2, -1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 2);
        $r4[2] = -1;
        <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression DEFAULT_CIRCLE_COLORS$sym> = $r4$sym;
        _sym_tmp_4 = <in.shick.lockpatterngenerator.NodeDrawable: int DEFAULT_CIRCLE_COLORS$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 537);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.NodeDrawable: int DEFAULT_CIRCLE_COLORS$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(537);
        <in.shick.lockpatterngenerator.NodeDrawable: int[] DEFAULT_CIRCLE_COLORS> = $r4;
        $r6 = newarray (int)[3];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r6$sym, null, null, $r6, 0, 0);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r6, 0);
        $r6[0] = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r6$sym, null, null, $r6, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r6, 1);
        $r6[1] = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r6$sym, null, null, $r6, 2, 2);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r6, 2);
        $r6[2] = 2;
        <in.shick.lockpatterngenerator.NodeDrawable: acteve.symbolic.integer.Expression CIRCLE_ORDER$sym> = $r6$sym;
        _sym_tmp_5 = <in.shick.lockpatterngenerator.NodeDrawable: int CIRCLE_ORDER$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 535);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.NodeDrawable: int CIRCLE_ORDER$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(535);
        <in.shick.lockpatterngenerator.NodeDrawable: int[] CIRCLE_ORDER> = $r6;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r14$sym, $r13$sym, $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32579, 0);
        $r0 = newmultiarray (boolean)[14][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 527);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.NodeDrawable: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(527);
        <in.shick.lockpatterngenerator.NodeDrawable: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[6];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[4];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[5];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[3];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[1];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[1];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[1];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[1];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[1];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[4];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        $r13 = newarray (boolean)[4];
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 12);
        $r0[12] = $r13;
        $r14 = newarray (boolean)[1];
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 13);
        $r0[13] = $r14;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/NodeDrawable", 1747057987268297595L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.PatternGenerator extends java.lang.Object
{
    protected int mGridLength;
    protected int mMinNodes;
    protected int mMaxNodes;
    protected java.util.Random mRng;
    protected java.util.List mAllNodes;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    protected acteve.symbolic.integer.Expression mGridLength$sym;
    protected int mGridLength$a3tid;
    protected acteve.symbolic.integer.Expression mMinNodes$sym;
    protected int mMinNodes$a3tid;
    protected acteve.symbolic.integer.Expression mMaxNodes$sym;
    protected int mMaxNodes$a3tid;
    protected int mRng$a3tid;
    protected int mAllNodes$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.PatternGenerator r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.Random $r3;

        r0 := @this: in.shick.lockpatterngenerator.PatternGenerator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32580, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 543);
        $r1 = <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45561, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45561, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new java.util.Random;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.util.Random: void <init>()>();
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mRng$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 544);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.PatternGenerator: int mRng$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(544);
        r0.<in.shick.lockpatterngenerator.PatternGenerator: java.util.Random mRng> = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21767, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.PatternGenerator: void setGridLength(int)>(0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21774, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.PatternGenerator: void setMinNodes(int)>(0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21775, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.PatternGenerator: void setMaxNodes(int)>(0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public java.util.List getPattern()
    {
        acteve.symbolic.integer.Expression _sym_tmp_32, $i40$sym, $i39$sym, $i38$sym, $i37$sym, $i36$sym, $i35$sym, $z2$sym, $i34$sym, $i33$sym, $i32$sym, $i31$sym, $i30$sym, $i29$sym, $i28$sym, $i27$sym, $i26$sym, $i25$sym, $i24$sym, $i23$sym, $i22$sym, $i21$sym, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $r19$sym, $i15$sym, $i14$sym, $r17$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $d3$sym, $d2$sym, $d1$sym, $i6$sym, $d0$sym, $i5$sym, $i4$sym, i3$sym, i2$sym, i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40;
        in.shick.lockpatterngenerator.PatternGenerator r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList r3, r4, $r10, $r11;
        java.util.HashSet r5, $r13;
        in.shick.lockpatterngenerator.external.Point r6, r7, r8, r9, $r20, $r23;
        java.util.List $r12, $r14;
        double $d0, $d1, $d2, $d3;
        java.util.Random $r15, $r16, $r18;
        java.lang.Object $r17, $r19;
        boolean $z2;

        r0 := @this: in.shick.lockpatterngenerator.PatternGenerator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21757, 32581, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 543);
        $r1 = <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRc>;
        _sym_tmp_32 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45562, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45562, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        $r10 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r10.<java.util.ArrayList: void <init>()>();
        r3 = $r10;
        $i4$sym = r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mMaxNodes$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMaxNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 545);
        $i4 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMaxNodes>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, null, $i4, 1);
        if $i4 >= 1 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45563, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        return r3;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45563, 1);
        goto label3;

     label3:
        $r11 = new java.util.ArrayList;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mAllNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 546);
        $r12 = r0.<in.shick.lockpatterngenerator.PatternGenerator: java.util.List mAllNodes>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8348, null, null);
        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r12);
        r4 = $r11;
        $r13 = new java.util.HashSet;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mAllNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 546);
        $r14 = r0.<in.shick.lockpatterngenerator.PatternGenerator: java.util.List mAllNodes>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8348, null, null);
        specialinvoke $r13.<java.util.HashSet: void <init>(java.util.Collection)>($r14);
        r5 = $r13;
        $i5$sym = r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mMaxNodes$sym>;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMaxNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 545);
        $i5 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMaxNodes>;
        $d0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i5$sym, 7);
        $d0 = (double) $i5;
        $i6$sym = r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mGridLength$sym>;
        _sym_tmp_6 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mGridLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 547);
        $i6 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mGridLength>;
        $d1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i6$sym, 7);
        $d1 = (double) $i6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5951, $d1$sym, null);
        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, 2.0);
        $d2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5951);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(17642, $d0$sym, $d2$sym);
        $d3 = staticinvoke <java.lang.Math: double min(double,double)>($d0, $d2);
        $d3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(17642);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($d3$sym, 4);
        i0 = (int) $d3;
        _sym_tmp_7 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mRng$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 544);
        $r15 = r0.<in.shick.lockpatterngenerator.PatternGenerator: java.util.Random mRng>;
        $i7$sym = r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mMinNodes$sym>;
        _sym_tmp_8 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMinNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 548);
        $i7 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMinNodes>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i7$sym, i0, $i7);
        $i8 = i0 - $i7;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, null, $i8, 1);
        $i9 = $i8 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1030, null, $i9$sym);
        $i10 = virtualinvoke $r15.<java.util.Random: int nextInt(int)>($i9);
        $i10$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1030);
        $i11$sym = r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mMinNodes$sym>;
        _sym_tmp_9 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMinNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 548);
        $i11 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMinNodes>;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, $i11$sym, $i10, $i11);
        i1 = $i10 + $i11;
        _sym_tmp_10 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mRng$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 544);
        $r16 = r0.<in.shick.lockpatterngenerator.PatternGenerator: java.util.Random mRng>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i12 = interfaceinvoke r4.<java.util.List: int size()>();
        $i12$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1030, null, $i12$sym);
        $i13 = virtualinvoke $r16.<java.util.Random: int nextInt(int)>($i12);
        $i13$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1030);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(345, null, $i13$sym);
        $r17 = interfaceinvoke r4.<java.util.List: java.lang.Object remove(int)>($i13);
        $r17$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(345);
        r6 = (in.shick.lockpatterngenerator.external.Point) $r17;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(97, null, null);
        interfaceinvoke r5.<java.util.Set: boolean remove(java.lang.Object)>(r6);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r6);
        i2$sym = null;
        i2 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, i1$sym, i2, i1);
        if i2 >= i1 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45564, 0);
        _sym_tmp_11 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mRng$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 544);
        $r18 = r0.<in.shick.lockpatterngenerator.PatternGenerator: java.util.Random mRng>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i14 = interfaceinvoke r4.<java.util.List: int size()>();
        $i14$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1030, null, $i14$sym);
        $i15 = virtualinvoke $r18.<java.util.Random: int nextInt(int)>($i14);
        $i15$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1030);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i15$sym);
        $r19 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i15);
        $r19$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r7 = (in.shick.lockpatterngenerator.external.Point) $r19;
        $r20 = new in.shick.lockpatterngenerator.external.Point;
        $i16$sym = r7.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_12 = r7.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 501);
        $i16 = r7.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i17$sym = r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_13 = r6.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 501);
        $i17 = r6.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i16$sym, $i17$sym, $i16, $i17);
        $i18 = $i16 - $i17;
        $i19$sym = r7.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_14 = r7.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 502);
        $i19 = r7.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i20$sym = r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_15 = r6.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 502);
        $i20 = r6.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i19$sym, $i20$sym, $i19, $i20);
        $i21 = $i19 - $i20;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, $i18$sym, $i21$sym);
        specialinvoke $r20.<in.shick.lockpatterngenerator.external.Point: void <init>(int,int)>($i18, $i21);
        r8 = $r20;
        $i22$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_16 = r8.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 501);
        $i22 = r8.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i23$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_17 = r8.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 502);
        $i23 = r8.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21799, null, $i22$sym, $i23$sym);
        $i24 = virtualinvoke r0.<in.shick.lockpatterngenerator.PatternGenerator: int computeGcd(int,int)>($i22, $i23);
        $i24$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21799);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2121, $i24$sym);
        i3 = staticinvoke <java.lang.Math: int abs(int)>($i24);
        i3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2121);
        $i25$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_18 = r8.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 501);
        $i25 = r8.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i26$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i25$sym, i3$sym, $i25, i3);
        $i26 = $i25 / i3;
        r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym> = $i26$sym;
        _sym_tmp_19 = r8.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_19, 501);
        _sym_tmp_19 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r8.<in.shick.lockpatterngenerator.external.Point: int x$a3tid> = _sym_tmp_19;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        r8.<in.shick.lockpatterngenerator.external.Point: int x> = $i26;
        $i27$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_20 = r8.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 502);
        $i27 = r8.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i28$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i27$sym, i3$sym, $i27, i3);
        $i28 = $i27 / i3;
        r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym> = $i28$sym;
        _sym_tmp_21 = r8.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_21, 502);
        _sym_tmp_21 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r8.<in.shick.lockpatterngenerator.external.Point: int y$a3tid> = _sym_tmp_21;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        r8.<in.shick.lockpatterngenerator.external.Point: int y> = $i28;
        $r23 = new in.shick.lockpatterngenerator.external.Point;
        $i29$sym = r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_22 = r6.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 501);
        $i29 = r6.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i30$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_23 = r8.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 501);
        $i30 = r8.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i31$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i29$sym, $i30$sym, $i29, $i30);
        $i31 = $i29 + $i30;
        $i32$sym = r6.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_24 = r6.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 502);
        $i32 = r6.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i33$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_25 = r8.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 502);
        $i33 = r8.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i34$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i32$sym, $i33$sym, $i32, $i33);
        $i34 = $i32 + $i33;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, $i31$sym, $i34$sym);
        specialinvoke $r23.<in.shick.lockpatterngenerator.external.Point: void <init>(int,int)>($i31, $i34);
        r9 = $r23;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;

     label5:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(49, null, null);
        $z2 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>(r9);
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(49);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 != 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45565, 0);
        $i35$sym = r9.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_26 = r9.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 501);
        $i35 = r9.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i36$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_27 = r8.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 501);
        $i36 = r8.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i37$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i35$sym, $i36$sym, $i35, $i36);
        $i37 = $i35 + $i36;
        r9.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym> = $i37$sym;
        _sym_tmp_28 = r9.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_28, 501);
        _sym_tmp_28 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r9.<in.shick.lockpatterngenerator.external.Point: int x$a3tid> = _sym_tmp_28;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        r9.<in.shick.lockpatterngenerator.external.Point: int x> = $i37;
        $i38$sym = r9.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_29 = r9.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 502);
        $i38 = r9.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i39$sym = r8.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_30 = r8.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 502);
        $i39 = r8.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i40$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i38$sym, $i39$sym, $i38, $i39);
        $i40 = $i38 + $i39;
        r9.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym> = $i40$sym;
        _sym_tmp_31 = r9.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_31, 502);
        _sym_tmp_31 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r9.<in.shick.lockpatterngenerator.external.Point: int y$a3tid> = _sym_tmp_31;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        r9.<in.shick.lockpatterngenerator.external.Point: int y> = $i40;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label5;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45565, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(97, null, null);
        interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>(r9);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(97, null, null);
        interfaceinvoke r5.<java.util.Set: boolean remove(java.lang.Object)>(r9);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r9);
        r6 = r9;
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label4;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45564, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return r3;
    }

    public void setGridLength(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, i2$sym, i1$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2;
        in.shick.lockpatterngenerator.PatternGenerator r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList r3, $r4;
        in.shick.lockpatterngenerator.external.Point $r5;

        r0 := @this: in.shick.lockpatterngenerator.PatternGenerator;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21767, 32582, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 543);
        $r1 = <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45566, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45566, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        $r4 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();
        r3 = $r4;
        i1$sym = null;
        i1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, i0$sym, i1, i0);
        if i1 >= i0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45567, 0);
        i2$sym = null;
        i2 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, i0$sym, i2, i0);
        if i2 >= i0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45568, 0);
        $r5 = new in.shick.lockpatterngenerator.external.Point;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, i2$sym, i1$sym);
        specialinvoke $r5.<in.shick.lockpatterngenerator.external.Point: void <init>(int,int)>(i2, i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r5);
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        goto label3;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45568, 1);
        goto label5;

     label5:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label2;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45567, 1);
        goto label7;

     label7:
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mAllNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 546);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.PatternGenerator: int mAllNodes$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(546);
        r0.<in.shick.lockpatterngenerator.PatternGenerator: java.util.List mAllNodes> = r3;
        r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mGridLength$sym> = i0$sym;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mGridLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 547);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.PatternGenerator: int mGridLength$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(547);
        r0.<in.shick.lockpatterngenerator.PatternGenerator: int mGridLength> = i0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        return;
    }

    public int getGridLength()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.PatternGenerator r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.PatternGenerator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21759, 32583, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 543);
        $r1 = <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45569, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45569, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        $i0$sym = r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mGridLength$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mGridLength$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 547);
        $i0 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mGridLength>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21759, $i0$sym);
        return $i0;
    }

    public void setMinNodes(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.PatternGenerator r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.PatternGenerator;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21774, 32584, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 543);
        $r1 = <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45570, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45570, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mMinNodes$sym> = i0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMinNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 548);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMinNodes$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(548);
        r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMinNodes> = i0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public int getMinNodes()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.PatternGenerator r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.PatternGenerator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21800, 32585, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 543);
        $r1 = <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45571, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45571, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 5);
        r2 = $r1[5];
        $i0$sym = r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mMinNodes$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMinNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 548);
        $i0 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMinNodes>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21800, $i0$sym);
        return $i0;
    }

    public void setMaxNodes(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.PatternGenerator r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.PatternGenerator;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21775, 32586, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 543);
        $r1 = <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45572, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45572, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 6);
        r2 = $r1[6];
        r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mMaxNodes$sym> = i0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMaxNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 545);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMaxNodes$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(545);
        r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMaxNodes> = i0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public int getMaxNodes()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        in.shick.lockpatterngenerator.PatternGenerator r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.PatternGenerator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21801, 32587, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 543);
        $r1 = <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45573, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45573, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 7);
        r2 = $r1[7];
        $i0$sym = r0.<in.shick.lockpatterngenerator.PatternGenerator: acteve.symbolic.integer.Expression mMaxNodes$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMaxNodes$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 545);
        $i0 = r0.<in.shick.lockpatterngenerator.PatternGenerator: int mMaxNodes>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21801, $i0$sym);
        return $i0;
    }

    public int computeGcd(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, i3$sym, i2$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1, i2, i3;
        in.shick.lockpatterngenerator.PatternGenerator r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.PatternGenerator;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21799, 32588, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 543);
        $r1 = <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45574, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45574, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 8);
        r2 = $r1[8];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, i0$sym, i1, i0);
        if i1 <= i0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45575, 0);
        i2$sym = i0$sym;
        i2 = i0;
        i0$sym = i1$sym;
        i0 = i1;
        i1$sym = i2$sym;
        i1 = i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45575, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 0);
        if i1 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45576, 0);
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, i1$sym, i0, i1);
        i3 = i0 % i1;
        i0$sym = i1$sym;
        i0 = i1;
        i1$sym = i3$sym;
        i1 = i3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label3;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45576, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21799, i0$sym);
        return i0;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32589, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 9);
        r1 = $r0[9];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32590, 0);
        $r0 = newmultiarray (boolean)[10][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 543);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.PatternGenerator: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(543);
        <in.shick.lockpatterngenerator.PatternGenerator: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[9];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[7];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[1];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[1];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[5];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[1];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/PatternGenerator", 5616777523648671883L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.PreferencesActivity extends android.preference.PreferenceActivity implements android.content.SharedPreferences$OnSharedPreferenceChangeListener
{
    private android.content.SharedPreferences mPreferences;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private int mPreferences$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.PreferencesActivity r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.PreferencesActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32591, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PreferencesActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 549);
        $r1 = <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45577, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45577, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.preference.PreferenceActivity: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void onCreate(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.PreferencesActivity r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;
        android.content.SharedPreferences $r4;

        r0 := @this: in.shick.lockpatterngenerator.PreferencesActivity;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1621, 32592, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PreferencesActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 549);
        $r2 = <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45578, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45578, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1621, null, null);
        specialinvoke r0.<android.preference.PreferenceActivity: void onCreate(android.os.Bundle)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(18567, null, null);
        virtualinvoke r0.<in.shick.lockpatterngenerator.PreferencesActivity: void addPreferencesFromResource(int)>(2130968576);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(4842, null);
        $r4 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r0);
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PreferencesActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 550);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.PreferencesActivity: int mPreferences$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(550);
        r0.<in.shick.lockpatterngenerator.PreferencesActivity: android.content.SharedPreferences mPreferences> = $r4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    protected void onResume()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.PreferencesActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        android.content.SharedPreferences $r3;

        r0 := @this: in.shick.lockpatterngenerator.PreferencesActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1787, 32593, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PreferencesActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 549);
        $r1 = <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45579, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45579, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1787, null);
        specialinvoke r0.<android.preference.PreferenceActivity: void onResume()>();
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PreferencesActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 550);
        $r3 = r0.<in.shick.lockpatterngenerator.PreferencesActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8721, null, null);
        interfaceinvoke $r3.<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>(r0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    protected void onPause()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        in.shick.lockpatterngenerator.PreferencesActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        android.content.SharedPreferences $r3;

        r0 := @this: in.shick.lockpatterngenerator.PreferencesActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1669, 32594, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PreferencesActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 549);
        $r1 = <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45580, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45580, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1669, null);
        specialinvoke r0.<android.preference.PreferenceActivity: void onPause()>();
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.PreferencesActivity: int mPreferences$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 550);
        $r3 = r0.<in.shick.lockpatterngenerator.PreferencesActivity: android.content.SharedPreferences mPreferences>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8722, null, null);
        interfaceinvoke $r3.<android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>(r0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void onSharedPreferenceChanged(android.content.SharedPreferences, java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $z2$sym, $z1$sym, $z0$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.PreferencesActivity r0;
        android.content.SharedPreferences r1;
        java.lang.String r2;
        boolean[][] $r3;
        boolean[] r4;
        boolean $z0, $z1, $z2;

        r0 := @this: in.shick.lockpatterngenerator.PreferencesActivity;
        r1 := @parameter0: android.content.SharedPreferences;
        r2 := @parameter1: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(8351, 32595, 3);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PreferencesActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 549);
        $r3 = <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45581, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45581, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 4);
        r4 = $r3[4];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("dummy_pattern_max");
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45582, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21802, null, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.PreferencesActivity: void dummyToInt(java.lang.String,android.content.SharedPreferences,int)>("pattern_max", r1, 5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        goto label7;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45582, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("dummy_pattern_min");
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45583, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21802, null, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.PreferencesActivity: void dummyToInt(java.lang.String,android.content.SharedPreferences,int)>("pattern_min", r1, 4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 3);
        r4[3] = 1;
        goto label7;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45583, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("dummy_grid_length");
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 4);
        r4[4] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45584, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21802, null, null, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.PreferencesActivity: void dummyToInt(java.lang.String,android.content.SharedPreferences,int)>("grid_length", r1, 3);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 5);
        r4[5] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45584, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 6);
        r4[6] = 1;
        return;
    }

    private void dummyToInt(java.lang.String, android.content.SharedPreferences, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, i1$sym, r4$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1;
        in.shick.lockpatterngenerator.PreferencesActivity r0;
        java.lang.String r1, $r9, $r13, $r14, $r20, $r24;
        android.content.SharedPreferences r2;
        boolean[][] $r3;
        boolean[] r4;
        java.lang.NumberFormatException r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r12, $r17, $r18, $r19, $r21, $r22, $r23;
        android.content.SharedPreferences$Editor $r16, $r25, $r26, $r27;

        r0 := @this: in.shick.lockpatterngenerator.PreferencesActivity;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: android.content.SharedPreferences;
        i0 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21802, 32596, 4);
        i0$sym = a3targs$symargs[3];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PreferencesActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 549);
        $r3 = <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45585, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45585, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 5);
        r4 = $r3[5];
        i1$sym = i0$sym;
        i1 = i0;

     label2:
        $r6 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dummy_");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        $r10 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, i0$sym);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2699, null, null, null);
        $r14 = interfaceinvoke r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r9, $r13);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2063, null);
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14);
        i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2063);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;
        r5 = $r15;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5321, null);
        $r16 = interfaceinvoke r2.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();
        $r17 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dummy_");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        $r21 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, i0$sym);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5322, null, null, null);
        $r25 = interfaceinvoke $r16.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>($r20, $r24);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8350, null);
        interfaceinvoke $r25.<android.content.SharedPreferences$Editor: boolean commit()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;

     label5:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5321, null);
        $r26 = interfaceinvoke r2.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5502, null, null, i1$sym);
        $r27 = interfaceinvoke $r26.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>(r1, i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8350, null);
        interfaceinvoke $r27.<android.content.SharedPreferences$Editor: boolean commit()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        return;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32597, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 6);
        r1 = $r0[6];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32598, 0);
        $r0 = newmultiarray (boolean)[7][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.PreferencesActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 549);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.PreferencesActivity: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(549);
        <in.shick.lockpatterngenerator.PreferencesActivity: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[7];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[3];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[1];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/PreferencesActivity", -9020691207711199448L);
        return $r0;
    }
}
public final class in.shick.lockpatterngenerator.R$array extends java.lang.Object
{
    public static final int highlight_entries;
    public static final int highlight_values;
    public static final acteve.symbolic.integer.Expression highlight_entries$sym;
    public static final int highlight_entries$a3tid;
    public static final acteve.symbolic.integer.Expression highlight_values$sym;
    public static final int highlight_values$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.R$array r0;

        r0 := @this: in.shick.lockpatterngenerator.R$array;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32599, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class in.shick.lockpatterngenerator.R$attr extends java.lang.Object
{

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.R$attr r0;

        r0 := @this: in.shick.lockpatterngenerator.R$attr;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32600, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class in.shick.lockpatterngenerator.R$drawable extends java.lang.Object
{
    public static final int black_background;
    public static final int icon;
    public static final int license_icon;
    public static final int menu_about;
    public static final int menu_help;
    public static final int menu_settings;
    public static final int pref_grid_length;
    public static final int pref_highlight;
    public static final int pref_pattern_max;
    public static final int pref_pattern_min;
    public static final acteve.symbolic.integer.Expression black_background$sym;
    public static final int black_background$a3tid;
    public static final acteve.symbolic.integer.Expression icon$sym;
    public static final int icon$a3tid;
    public static final acteve.symbolic.integer.Expression license_icon$sym;
    public static final int license_icon$a3tid;
    public static final acteve.symbolic.integer.Expression menu_about$sym;
    public static final int menu_about$a3tid;
    public static final acteve.symbolic.integer.Expression menu_help$sym;
    public static final int menu_help$a3tid;
    public static final acteve.symbolic.integer.Expression menu_settings$sym;
    public static final int menu_settings$a3tid;
    public static final acteve.symbolic.integer.Expression pref_grid_length$sym;
    public static final int pref_grid_length$a3tid;
    public static final acteve.symbolic.integer.Expression pref_highlight$sym;
    public static final int pref_highlight$a3tid;
    public static final acteve.symbolic.integer.Expression pref_pattern_max$sym;
    public static final int pref_pattern_max$a3tid;
    public static final acteve.symbolic.integer.Expression pref_pattern_min$sym;
    public static final int pref_pattern_min$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.R$drawable r0;

        r0 := @this: in.shick.lockpatterngenerator.R$drawable;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32601, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class in.shick.lockpatterngenerator.R$id extends java.lang.Object
{
    public static final int disable_checkbox;
    public static final int generate_button;
    public static final int menu_about;
    public static final int menu_help;
    public static final int menu_settings;
    public static final int pattern_view;
    public static final int practice_toggle;
    public static final int security_settings_button;
    public static final int text_wall;
    public static final acteve.symbolic.integer.Expression disable_checkbox$sym;
    public static final int disable_checkbox$a3tid;
    public static final acteve.symbolic.integer.Expression generate_button$sym;
    public static final int generate_button$a3tid;
    public static final acteve.symbolic.integer.Expression menu_about$sym;
    public static final int menu_about$a3tid;
    public static final acteve.symbolic.integer.Expression menu_help$sym;
    public static final int menu_help$a3tid;
    public static final acteve.symbolic.integer.Expression menu_settings$sym;
    public static final int menu_settings$a3tid;
    public static final acteve.symbolic.integer.Expression pattern_view$sym;
    public static final int pattern_view$a3tid;
    public static final acteve.symbolic.integer.Expression practice_toggle$sym;
    public static final int practice_toggle$a3tid;
    public static final acteve.symbolic.integer.Expression security_settings_button$sym;
    public static final int security_settings_button$a3tid;
    public static final acteve.symbolic.integer.Expression text_wall$sym;
    public static final int text_wall$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.R$id r0;

        r0 := @this: in.shick.lockpatterngenerator.R$id;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32602, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class in.shick.lockpatterngenerator.R$layout extends java.lang.Object
{
    public static final int generator_activity;
    public static final int grid_length_pref_widget;
    public static final int highlight_pref_widget;
    public static final int pattern_max_pref_widget;
    public static final int pattern_min_pref_widget;
    public static final int separation_reminder_disable;
    public static final int text_wall_about;
    public static final int text_wall_basic;
    public static final acteve.symbolic.integer.Expression generator_activity$sym;
    public static final int generator_activity$a3tid;
    public static final acteve.symbolic.integer.Expression grid_length_pref_widget$sym;
    public static final int grid_length_pref_widget$a3tid;
    public static final acteve.symbolic.integer.Expression highlight_pref_widget$sym;
    public static final int highlight_pref_widget$a3tid;
    public static final acteve.symbolic.integer.Expression pattern_max_pref_widget$sym;
    public static final int pattern_max_pref_widget$a3tid;
    public static final acteve.symbolic.integer.Expression pattern_min_pref_widget$sym;
    public static final int pattern_min_pref_widget$a3tid;
    public static final acteve.symbolic.integer.Expression separation_reminder_disable$sym;
    public static final int separation_reminder_disable$a3tid;
    public static final acteve.symbolic.integer.Expression text_wall_about$sym;
    public static final int text_wall_about$a3tid;
    public static final acteve.symbolic.integer.Expression text_wall_basic$sym;
    public static final int text_wall_basic$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.R$layout r0;

        r0 := @this: in.shick.lockpatterngenerator.R$layout;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32603, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class in.shick.lockpatterngenerator.R$menu extends java.lang.Object
{
    public static final int generator_activity;
    public static final acteve.symbolic.integer.Expression generator_activity$sym;
    public static final int generator_activity$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.R$menu r0;

        r0 := @this: in.shick.lockpatterngenerator.R$menu;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32604, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class in.shick.lockpatterngenerator.R$string extends java.lang.Object
{
    public static final int about;
    public static final int cont;
    public static final int derp_pref_category;
    public static final int display_pref_category;
    public static final int emergency_exit;
    public static final int generate_button_label;
    public static final int generation_pref_category;
    public static final int grid_length_pref;
    public static final int grid_length_pref_summary;
    public static final int help;
    public static final int highlight_pref;
    public static final int highlight_pref_summary;
    public static final int notice;
    public static final int path_max_pref;
    public static final int path_min_pref;
    public static final int practice;
    public static final int program_name;
    public static final int separation_reminder_pref;
    public static final int separation_reminder_pref_summary;
    public static final int separation_warning;
    public static final int separation_warning_disable;
    public static final int settings;
    public static final int settings_button_label;
    public static final int settings_shortcut_failure;
    public static final int settings_view_name;
    public static final int tactile_feedback_pref;
    public static final int tactile_feedback_pref_summary;
    public static final int text_wall_failure;
    public static final int understood;
    public static final int warn;
    public static final acteve.symbolic.integer.Expression about$sym;
    public static final int about$a3tid;
    public static final acteve.symbolic.integer.Expression cont$sym;
    public static final int cont$a3tid;
    public static final acteve.symbolic.integer.Expression derp_pref_category$sym;
    public static final int derp_pref_category$a3tid;
    public static final acteve.symbolic.integer.Expression display_pref_category$sym;
    public static final int display_pref_category$a3tid;
    public static final acteve.symbolic.integer.Expression emergency_exit$sym;
    public static final int emergency_exit$a3tid;
    public static final acteve.symbolic.integer.Expression generate_button_label$sym;
    public static final int generate_button_label$a3tid;
    public static final acteve.symbolic.integer.Expression generation_pref_category$sym;
    public static final int generation_pref_category$a3tid;
    public static final acteve.symbolic.integer.Expression grid_length_pref$sym;
    public static final int grid_length_pref$a3tid;
    public static final acteve.symbolic.integer.Expression grid_length_pref_summary$sym;
    public static final int grid_length_pref_summary$a3tid;
    public static final acteve.symbolic.integer.Expression help$sym;
    public static final int help$a3tid;
    public static final acteve.symbolic.integer.Expression highlight_pref$sym;
    public static final int highlight_pref$a3tid;
    public static final acteve.symbolic.integer.Expression highlight_pref_summary$sym;
    public static final int highlight_pref_summary$a3tid;
    public static final acteve.symbolic.integer.Expression notice$sym;
    public static final int notice$a3tid;
    public static final acteve.symbolic.integer.Expression path_max_pref$sym;
    public static final int path_max_pref$a3tid;
    public static final acteve.symbolic.integer.Expression path_min_pref$sym;
    public static final int path_min_pref$a3tid;
    public static final acteve.symbolic.integer.Expression practice$sym;
    public static final int practice$a3tid;
    public static final acteve.symbolic.integer.Expression program_name$sym;
    public static final int program_name$a3tid;
    public static final acteve.symbolic.integer.Expression separation_reminder_pref$sym;
    public static final int separation_reminder_pref$a3tid;
    public static final acteve.symbolic.integer.Expression separation_reminder_pref_summary$sym;
    public static final int separation_reminder_pref_summary$a3tid;
    public static final acteve.symbolic.integer.Expression separation_warning$sym;
    public static final int separation_warning$a3tid;
    public static final acteve.symbolic.integer.Expression separation_warning_disable$sym;
    public static final int separation_warning_disable$a3tid;
    public static final acteve.symbolic.integer.Expression settings$sym;
    public static final int settings$a3tid;
    public static final acteve.symbolic.integer.Expression settings_button_label$sym;
    public static final int settings_button_label$a3tid;
    public static final acteve.symbolic.integer.Expression settings_shortcut_failure$sym;
    public static final int settings_shortcut_failure$a3tid;
    public static final acteve.symbolic.integer.Expression settings_view_name$sym;
    public static final int settings_view_name$a3tid;
    public static final acteve.symbolic.integer.Expression tactile_feedback_pref$sym;
    public static final int tactile_feedback_pref$a3tid;
    public static final acteve.symbolic.integer.Expression tactile_feedback_pref_summary$sym;
    public static final int tactile_feedback_pref_summary$a3tid;
    public static final acteve.symbolic.integer.Expression text_wall_failure$sym;
    public static final int text_wall_failure$a3tid;
    public static final acteve.symbolic.integer.Expression understood$sym;
    public static final int understood$a3tid;
    public static final acteve.symbolic.integer.Expression warn$sym;
    public static final int warn$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.R$string r0;

        r0 := @this: in.shick.lockpatterngenerator.R$string;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32605, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class in.shick.lockpatterngenerator.R$style extends java.lang.Object
{
    public static final int application_theme;
    public static final acteve.symbolic.integer.Expression application_theme$sym;
    public static final int application_theme$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.R$style r0;

        r0 := @this: in.shick.lockpatterngenerator.R$style;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32606, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class in.shick.lockpatterngenerator.R$xml extends java.lang.Object
{
    public static final int prefs;
    public static final acteve.symbolic.integer.Expression prefs$sym;
    public static final int prefs$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.R$xml r0;

        r0 := @this: in.shick.lockpatterngenerator.R$xml;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32607, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class in.shick.lockpatterngenerator.R extends java.lang.Object
{

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.R r0;

        r0 := @this: in.shick.lockpatterngenerator.R;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32608, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public class in.shick.lockpatterngenerator.TextWallActivity extends in.shick.lockpatterngenerator.BaseActivity
{
    public static final java.lang.String EXTRA_LAYOUT_RESOURCE;
    public static final java.lang.String EXTRA_HTML_ASSET;
    public static final int DEFAULT_LAYOUT_RESOURCE;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    public static final int EXTRA_LAYOUT_RESOURCE$a3tid;
    public static final int EXTRA_HTML_ASSET$a3tid;
    public static final acteve.symbolic.integer.Expression DEFAULT_LAYOUT_RESOURCE$sym;
    public static final int DEFAULT_LAYOUT_RESOURCE$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.TextWallActivity r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.TextWallActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32609, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.TextWallActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 551);
        $r1 = <in.shick.lockpatterngenerator.TextWallActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45586, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.TextWallActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45586, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.BaseActivity: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void onCreate(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $i1$sym, r9$sym, i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, $i1;
        in.shick.lockpatterngenerator.TextWallActivity r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;
        android.widget.TextView r4;
        java.lang.String r5, r6, $r13, $r18;
        android.content.res.AssetManager r7;
        java.io.InputStream r8;
        byte[] r9;
        android.content.Intent $r10, $r12;
        android.view.View $r11;
        java.lang.Throwable $r14, r15;
        java.lang.StringBuilder $r16, $r17, $r19;
        android.text.Spanned $r20;
        android.text.method.MovementMethod $r21;

        r0 := @this: in.shick.lockpatterngenerator.TextWallActivity;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1621, 32610, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.TextWallActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 551);
        $r2 = <in.shick.lockpatterngenerator.TextWallActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45587, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.TextWallActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45587, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1621, null, null);
        specialinvoke r0.<in.shick.lockpatterngenerator.BaseActivity: void onCreate(android.os.Bundle)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1407, null);
        $r10 = virtualinvoke r0.<in.shick.lockpatterngenerator.TextWallActivity: android.content.Intent getIntent()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(925, null, null, null);
        i0 = virtualinvoke $r10.<android.content.Intent: int getIntExtra(java.lang.String,int)>("layout_res", 2130903047);
        i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(925);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1626, null, i0$sym);
        virtualinvoke r0.<in.shick.lockpatterngenerator.TextWallActivity: void setContentView(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r11 = virtualinvoke r0.<in.shick.lockpatterngenerator.TextWallActivity: android.view.View findViewById(int)>(2131296261);
        r4 = (android.widget.TextView) $r11;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        r5 = virtualinvoke r0.<in.shick.lockpatterngenerator.TextWallActivity: java.lang.String getString(int)>(2131099664);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1407, null);
        $r12 = virtualinvoke r0.<in.shick.lockpatterngenerator.TextWallActivity: android.content.Intent getIntent()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1625, null, null);
        r6 = virtualinvoke $r12.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("html_source");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5641, null);
        r7 = virtualinvoke r0.<in.shick.lockpatterngenerator.TextWallActivity: android.content.res.AssetManager getAssets()>();

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(10412, null, null);
        r8 = virtualinvoke r7.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>(r6);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(199, null);
        $i1 = virtualinvoke r8.<java.io.InputStream: int available()>();
        $i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(199);
        r9 = newarray (byte)[$i1];
        r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(295, null, r9$sym);
        virtualinvoke r8.<java.io.InputStream: int read(byte[])>(r9);
        $r13 = new java.lang.String;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(133, null, r9$sym);
        specialinvoke $r13.<java.lang.String: void <init>(byte[])>(r9);
        r5 = $r13;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;
        r15 = $r14;
        $r16 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r18 = virtualinvoke r15.<java.lang.Throwable: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;

     label5:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(17375, null);
        $r20 = staticinvoke <android.text.Html: android.text.Spanned fromHtml(java.lang.String)>(r5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1348, null, null);
        virtualinvoke r4.<android.widget.TextView: void setText(java.lang.CharSequence)>($r20);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(12727);
        $r21 = staticinvoke <android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2410, null, null);
        virtualinvoke r4.<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>($r21);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1333, null, null);
        virtualinvoke r4.<android.widget.TextView: void setClickable(boolean)>(0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6415, null, null);
        virtualinvoke r4.<android.widget.TextView: void setLongClickable(boolean)>(0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32611, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.TextWallActivity: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32612, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.TextWallActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 551);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.TextWallActivity: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(551);
        <in.shick.lockpatterngenerator.TextWallActivity: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/TextWallActivity", -3731053438912885654L);
        return $r0;
    }
}
final class in.shick.lockpatterngenerator.external.Point$1 extends java.lang.Object implements android.os.Parcelable$Creator
{
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.external.Point$1 r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.external.Point$1;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32613, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 552);
        $r1 = <in.shick.lockpatterngenerator.external.Point$1: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45588, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45588, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public in.shick.lockpatterngenerator.external.Point createFromParcel(android.os.Parcel)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.external.Point$1 r0;
        android.os.Parcel r1;
        boolean[][] $r2;
        boolean[] r3;
        in.shick.lockpatterngenerator.external.Point r4, $r5;

        r0 := @this: in.shick.lockpatterngenerator.external.Point$1;
        r1 := @parameter0: android.os.Parcel;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21803, 32614, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 552);
        $r2 = <in.shick.lockpatterngenerator.external.Point$1: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45589, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.external.Point$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45589, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        $r5 = new in.shick.lockpatterngenerator.external.Point;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<in.shick.lockpatterngenerator.external.Point: void <init>()>();
        r4 = $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1995, null, null);
        virtualinvoke r4.<in.shick.lockpatterngenerator.external.Point: void readFromParcel(android.os.Parcel)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return r4;
    }

    public in.shick.lockpatterngenerator.external.Point[] newArray(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0;
        in.shick.lockpatterngenerator.external.Point$1 r0;
        boolean[][] $r1;
        boolean[] r2;
        in.shick.lockpatterngenerator.external.Point[] $r3;

        r0 := @this: in.shick.lockpatterngenerator.external.Point$1;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21804, 32615, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 552);
        $r1 = <in.shick.lockpatterngenerator.external.Point$1: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45590, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45590, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        $r3 = newarray (in.shick.lockpatterngenerator.external.Point)[i0];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression i0$sym;
        in.shick.lockpatterngenerator.external.Point$1 r0;
        int i0;
        in.shick.lockpatterngenerator.external.Point[] $r1;

        r0 := @this: in.shick.lockpatterngenerator.external.Point$1;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1159, 32616, 2);
        i0$sym = a3targs$symargs[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21804, null, i0$sym);
        $r1 = virtualinvoke r0.<in.shick.lockpatterngenerator.external.Point$1: in.shick.lockpatterngenerator.external.Point[] newArray(int)>(i0);
        return $r1;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        in.shick.lockpatterngenerator.external.Point$1 r0;
        android.os.Parcel r1;
        in.shick.lockpatterngenerator.external.Point $r2;

        r0 := @this: in.shick.lockpatterngenerator.external.Point$1;
        r1 := @parameter0: android.os.Parcel;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1070, 32617, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21803, null, null);
        $r2 = virtualinvoke r0.<in.shick.lockpatterngenerator.external.Point$1: in.shick.lockpatterngenerator.external.Point createFromParcel(android.os.Parcel)>(r1);
        return $r2;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32618, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.external.Point$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 5);
        r1 = $r0[5];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32619, 0);
        $r0 = newmultiarray (boolean)[6][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 552);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.external.Point$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(552);
        <in.shick.lockpatterngenerator.external.Point$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r4;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/external/Point$1", 1297427078969199586L);
        return $r0;
    }
}
public class in.shick.lockpatterngenerator.external.Point extends java.lang.Object implements android.os.Parcelable
{
    public int x;
    public int y;
    public static final android.os.Parcelable$Creator CREATOR;
    private static final boolean[][] $VRc;
    public acteve.symbolic.integer.Expression x$sym;
    public int x$a3tid;
    public acteve.symbolic.integer.Expression y$sym;
    public int y$a3tid;
    public static final int CREATOR$a3tid;
    private static final int $VRc$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.external.Point r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32620, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r1 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45591, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45591, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void <init>(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1;
        in.shick.lockpatterngenerator.external.Point r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1371, 32621, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r1 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45592, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45592, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym> = i0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 501);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        r0.<in.shick.lockpatterngenerator.external.Point: int x> = i0;
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym> = i1$sym;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 502);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        r0.<in.shick.lockpatterngenerator.external.Point: int y> = i1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void <init>(in.shick.lockpatterngenerator.external.Point)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $i1$sym, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        in.shick.lockpatterngenerator.external.Point r0, r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        r1 := @parameter0: in.shick.lockpatterngenerator.external.Point;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21792, 32622, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r2 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45593, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45593, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 2);
        r3 = $r2[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i0$sym = r1.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_2 = r1.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 501);
        $i0 = r1.<in.shick.lockpatterngenerator.external.Point: int x>;
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym> = $i0$sym;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 501);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        r0.<in.shick.lockpatterngenerator.external.Point: int x> = $i0;
        $i1$sym = r1.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_4 = r1.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 502);
        $i1 = r1.<in.shick.lockpatterngenerator.external.Point: int y>;
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym> = $i1$sym;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 502);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        r0.<in.shick.lockpatterngenerator.external.Point: int y> = $i1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void set(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1;
        in.shick.lockpatterngenerator.external.Point r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(4778, 32623, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r1 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45594, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45594, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym> = i0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 501);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        r0.<in.shick.lockpatterngenerator.external.Point: int x> = i0;
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym> = i1$sym;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 502);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        r0.<in.shick.lockpatterngenerator.external.Point: int y> = i1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public final void negate()
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3;
        in.shick.lockpatterngenerator.external.Point r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(19528, 32624, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r1 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45595, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45595, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        $i0$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 501);
        $i0 = r0.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i0$sym);
        $i1 = neg $i0;
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym> = $i1$sym;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 501);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        r0.<in.shick.lockpatterngenerator.external.Point: int x> = $i1;
        $i2$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 502);
        $i2 = r0.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i2$sym);
        $i3 = neg $i2;
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym> = $i3$sym;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 502);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        r0.<in.shick.lockpatterngenerator.external.Point: int y> = $i3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public final void offset(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $i5$sym, $i4$sym, $i3$sym, $i2$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5;
        in.shick.lockpatterngenerator.external.Point r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(6433, 32625, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r1 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45596, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45596, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 5);
        r2 = $r1[5];
        $i2$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 501);
        $i2 = r0.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, i0$sym, $i2, i0);
        $i3 = $i2 + i0;
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym> = $i3$sym;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 501);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        r0.<in.shick.lockpatterngenerator.external.Point: int x> = $i3;
        $i4$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 502);
        $i4 = r0.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, i1$sym, $i4, i1);
        $i5 = $i4 + i1;
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym> = $i5$sym;
        _sym_tmp_5 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 502);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        r0.<in.shick.lockpatterngenerator.external.Point: int y> = $i5;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public final boolean equals(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $z0$sym, $i3$sym, $i2$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3;
        in.shick.lockpatterngenerator.external.Point r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(19529, 32626, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r1 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45597, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45597, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 6);
        r2 = $r1[6];
        $i2$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 501);
        $i2 = r0.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, i0$sym, $i2, i0);
        if $i2 != i0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45598, 0);
        $i3$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 502);
        $i3 = r0.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, i1$sym, $i3, i1);
        if $i3 != i1 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45599, 0);
        $z0$sym = null;
        $z0 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label5;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45598, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45599, 1);
        goto label4;

     label4:
        $z0$sym = null;
        $z0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(19529, $z0$sym);
        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $z1$sym, $i3$sym, $i2$sym, $i1$sym, $i0$sym, $z0$sym, r3$sym, r1$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3;
        in.shick.lockpatterngenerator.external.Point r0, r4;
        java.lang.Object r1;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0, $z1;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        r1 := @parameter0: java.lang.Object;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(59, 32627, 2);
        r1$sym = a3targs$symargs[1];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r2 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45600, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45600, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 7);
        r3 = $r2[7];
        $z0$sym = null;
        $z0 = r1 instanceof in.shick.lockpatterngenerator.external.Point;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45601, 0);
        r4 = (in.shick.lockpatterngenerator.external.Point) r1;
        $i0$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 501);
        $i0 = r0.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i1$sym = r4.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_3 = r4.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 501);
        $i1 = r4.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, $i1$sym, $i0, $i1);
        if $i0 != $i1 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45602, 0);
        $i2$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_4 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 502);
        $i2 = r0.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i3$sym = r4.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_5 = r4.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 502);
        $i3 = r4.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, $i3$sym, $i2, $i3);
        if $i2 != $i3 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45603, 0);
        $z1$sym = null;
        $z1 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label5;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45602, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45603, 1);
        goto label4;

     label4:
        $z1$sym = null;
        $z1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(59, $z1$sym);
        return $z1;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45601, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(59, null);
        return 0;
    }

    public int hashCode()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3;
        in.shick.lockpatterngenerator.external.Point r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(4976, 32628, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r1 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45604, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45604, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 8);
        r2 = $r1[8];
        $i0$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 501);
        $i0 = r0.<in.shick.lockpatterngenerator.external.Point: int x>;
        $i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 32713);
        $i1 = $i0 * 32713;
        $i2$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 502);
        $i2 = r0.<in.shick.lockpatterngenerator.external.Point: int y>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, $i2$sym, $i1, $i2);
        $i3 = $i1 + $i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(4976, $i3$sym);
        return $i3;
    }

    public java.lang.String toString()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        in.shick.lockpatterngenerator.external.Point r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(148, 32629, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r1 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45605, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45605, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];
        $r3 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Point(");
        $i0$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 501);
        $i0 = r0.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i0$sym);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        $i1$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 502);
        $i1 = r0.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i1$sym);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r9;
    }

    public int describeContents()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        in.shick.lockpatterngenerator.external.Point r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1532, 32630, 1);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r1 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45606, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45606, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 10);
        r2 = $r1[10];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(1532, null);
        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i2$sym, $i1$sym, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2;
        in.shick.lockpatterngenerator.external.Point r0;
        android.os.Parcel r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        r1 := @parameter0: android.os.Parcel;
        i0 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1068, 32631, 3);
        i0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r2 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45607, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45607, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 11);
        r3 = $r2[11];
        $i1$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym>;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 501);
        $i1 = r0.<in.shick.lockpatterngenerator.external.Point: int x>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1065, null, $i1$sym);
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);
        $i2$sym = r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym>;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 502);
        $i2 = r0.<in.shick.lockpatterngenerator.external.Point: int y>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1065, null, $i2$sym);
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void readFromParcel(android.os.Parcel)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i1$sym, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        in.shick.lockpatterngenerator.external.Point r0;
        android.os.Parcel r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: in.shick.lockpatterngenerator.external.Point;
        r1 := @parameter0: android.os.Parcel;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1995, 32632, 2);
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 553);
        $r2 = <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45608, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45608, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 12);
        r3 = $r2[12];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1069, null);
        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1069);
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression x$sym> = $i0$sym;
        _sym_tmp_2 = r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 501);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int x$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        r0.<in.shick.lockpatterngenerator.external.Point: int x> = $i0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1069, null);
        $i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();
        $i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1069);
        r0.<in.shick.lockpatterngenerator.external.Point: acteve.symbolic.integer.Expression y$sym> = $i1$sym;
        _sym_tmp_3 = r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 502);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<in.shick.lockpatterngenerator.external.Point: int y$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        r0.<in.shick.lockpatterngenerator.external.Point: int y> = $i1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;
        in.shick.lockpatterngenerator.external.Point$1 $r2;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32633, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 13);
        r1 = $r0[13];
        $r2 = new in.shick.lockpatterngenerator.external.Point$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r2.<in.shick.lockpatterngenerator.external.Point$1: void <init>()>();
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int CREATOR$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 554);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.external.Point: int CREATOR$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(554);
        <in.shick.lockpatterngenerator.external.Point: android.os.Parcelable$Creator CREATOR> = $r2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r14$sym, $r13$sym, $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32634, 0);
        $r0 = newmultiarray (boolean)[14][];
        _sym_tmp_1 = <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 553);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <in.shick.lockpatterngenerator.external.Point: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(553);
        <in.shick.lockpatterngenerator.external.Point: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[5];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[7];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[1];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[1];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[1];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[1];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        $r13 = newarray (boolean)[1];
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 12);
        $r0[12] = $r13;
        $r14 = newarray (boolean)[1];
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 13);
        $r0[13] = $r14;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21742, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "in/shick/lockpatterngenerator/external/Point", 4184677936995007685L);
        return $r0;
    }
}
