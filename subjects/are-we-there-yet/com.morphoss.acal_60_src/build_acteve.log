Buildfile: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/build_acteve.xml

emma:

-set-mode-check:

-set-debug-files:

-check-env:
 [checkenv] Android SDK Tools Revision 23.0.2
 [checkenv] Installed at /home/vagrant/android-sdk-linux

-setup:
     [echo] Project Name: aCal
  [gettype] Project Type: Self-Tested Application

-set-debug-mode:

-debug-obfuscation-check:

-pre-build:

-build-setup:
[getbuildtools] Using latest Build Tools: 20.0.0
     [echo] Resolving Build Target for aCal...
[gettarget] Project Target:   Android 2.3.3
[gettarget] API level:        10
     [echo] ----------
     [echo] Creating output directories if needed...
    [mkdir] Created dir: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/rsObj
    [mkdir] Created dir: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/rsLibs
     [echo] ----------
     [echo] Resolving Dependencies for aCal...
[dependency] Library dependencies:
[dependency] No Libraries
[dependency] 
[dependency] ------------------
[dependency] API<=15: Adding annotations.jar to the classpath.
     [echo] ----------
     [echo] Building Libraries with 'instrument'...
   [subant] No sub-builds to iterate on

-code-gen:
[mergemanifest] No changes in the AndroidManifest files.
     [echo] Handling aidl files...
     [aidl] Found 7 AIDL files.
     [aidl] No AIDL files to compile.
     [echo] ----------
     [echo] Handling RenderScript files...
     [echo] ----------
     [echo] Handling Resources...
     [aapt] Found new input file
     [aapt] Generating resource IDs...
     [echo] ----------
     [echo] Handling BuildConfig class...
[buildconfig] No need to generate new BuildConfig.

-pre-compile:

-compile:
    [javac] Compiling 1 source file to /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/classes
     [echo] Instrumenting classes from /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/classes...

-post-compile:
   [delete] Deleting: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/original.jar
   [delete] Deleting: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/instrumented.jar
      [jar] Building jar: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/original.jar

instrument:
     [java] a3t.in.jars=/vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/original.jar
     [java] a3t.out.jar=/vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/instrumented.jar
     [java] a3t.lib.jars=/home/vagrant/tools/acteve/jars/a3t_symbolic.jar:/home/vagrant/tools/acteve/jars/a3t_models.jar:/home/vagrant/android-sdk-linux/platforms/android-10/android.jar:/home/vagrant/tools/acteve/a3t_sdk/instrumentedframework.jar:/home/vagrant/tools/acteve/jars/a3t_stubs.jar:/home/vagrant/tools/acteve/jars/emma.jar
     [java] a3t.inputmeths.file=null
     [java] a3t.modelmeths.file=null
     [java] a3t.out.dir=/vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t
     [java] a3t.sdk.dir=/home/vagrant/tools/acteve/a3t_sdk (SDK if null)
     [java] a3t.rw.kind=ID_FIELD_WRITE
     [java] a3t.whiteflds.file=null
     [java] a3t.blackflds.file=null
     [java] a3t.whitemeths.file=null
     [java] a3t.instrflds.all=false
     [java] SHAUVIK config.inJars=/vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/original.jar
     [java] SHAUVIK config.libJars=/home/vagrant/tools/acteve/jars/a3t_symbolic.jar:/home/vagrant/tools/acteve/jars/a3t_models.jar:/home/vagrant/android-sdk-linux/platforms/android-10/android.jar:/home/vagrant/tools/acteve/a3t_sdk/instrumentedframework.jar:/home/vagrant/tools/acteve/jars/a3t_stubs.jar:/home/vagrant/tools/acteve/jars/emma.jar
     [java] Failed to load class: com.morphoss.acal.desktop.ShowUpcomingWidgetProvider
     [java] couldn't find class: android.annotation.TargetApi (is your soot-class-path set properly?)
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_3;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_2, _sym_tmp_1;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_3 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         _sym_tmp_2 = interfaceinvoke _sym_tmp_3.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _neg()>();
     [java]         return _sym_tmp_2;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_4;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_3, _sym_tmp_1;
     [java]         int _sym_tmp_2;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_4 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         _sym_tmp_3 = interfaceinvoke _sym_tmp_4.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _cast(int)>(_sym_tmp_2);
     [java]         return _sym_tmp_3;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, java.lang.Object, java.lang.Object)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         java.lang.Object _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: java.lang.Object;
     [java]         _sym_tmp_4 := @parameter3: java.lang.Object;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, java.lang.Object, java.lang.Object)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         java.lang.Object _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: java.lang.Object;
     [java]         _sym_tmp_4 := @parameter3: java.lang.Object;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.LongExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.LongExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.LongExpression: acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int[], int, int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_6, _sym_tmp_5;
     [java]         int[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: int[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.IntegerArrayConstant: acteve.symbolic.array.IntegerArrayConstant get(int[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         int[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.IntegerArrayConstant: acteve.symbolic.array.IntegerArrayConstant get(int[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, short[], int, short)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         short _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         short[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: short[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: short;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.ShortArrayConstant: acteve.symbolic.array.ShortArrayConstant get(short[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, short[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         short[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: short[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.ShortArrayConstant: acteve.symbolic.array.ShortArrayConstant get(short[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, char[], int, char)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         char _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         char[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: char[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: char;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.CharArrayConstant: acteve.symbolic.array.CharArrayConstant get(char[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, char[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         char[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: char[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.CharArrayConstant: acteve.symbolic.array.CharArrayConstant get(char[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, byte[], int, byte)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         byte _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         byte[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: byte[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: byte;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.ByteArrayConstant: acteve.symbolic.array.ByteArrayConstant get(byte[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, byte[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         byte[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: byte[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.ByteArrayConstant: acteve.symbolic.array.ByteArrayConstant get(byte[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, boolean[], int, boolean)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         boolean _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         boolean[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: boolean[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: boolean;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.BooleanArrayConstant: acteve.symbolic.array.BooleanArrayConstant get(boolean[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, boolean[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         boolean[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: boolean[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.BooleanArrayConstant: acteve.symbolic.array.BooleanArrayConstant get(boolean[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long[], int, long)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         long[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: long[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.LongArrayConstant: acteve.symbolic.array.LongArrayConstant get(long[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.LongArrayConstant: acteve.symbolic.array.LongArrayConstant get(long[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float[], int, float)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         float[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: float[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.FloatArrayConstant: acteve.symbolic.array.FloatArrayConstant get(float[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         float[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.FloatArrayConstant: acteve.symbolic.array.FloatArrayConstant get(float[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double[], int, double)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         double[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: double[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.DoubleArrayConstant: acteve.symbolic.array.DoubleArrayConstant get(double[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         double[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.DoubleArrayConstant: acteve.symbolic.array.DoubleArrayConstant get(double[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _alen(acteve.symbolic.integer.Expression)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_3;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_2, _sym_tmp_1;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_3 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         _sym_tmp_2 = virtualinvoke _sym_tmp_3.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _alen()>();
     [java]         return _sym_tmp_2;
     [java]     }
     [java] SHAUVIK: Soot args-w -p cg off -keep-line-number -keep-bytecode-offset -dynamic-class acteve.symbolic.Util -soot-classpath /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/original.jar:/home/vagrant/tools/acteve/jars/a3t_symbolic.jar:/home/vagrant/tools/acteve/jars/a3t_models.jar:/home/vagrant/android-sdk-linux/platforms/android-10/android.jar:/home/vagrant/tools/acteve/a3t_sdk/instrumentedframework.jar:/home/vagrant/tools/acteve/jars/a3t_stubs.jar:/home/vagrant/tools/acteve/jars/emma.jar -dynamic-package acteve.symbolic.integer. -dynamic-package models. -outjar -d /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/instrumented.jar -O -validate acteve.symbolic.DummyMain
     [java] Soot started on Sun Nov 09 06:09:06 UTC 2014
     [java] com.morphoss.acal.AcalApplication
     [java] com.morphoss.acal.AcalDebug
     [java] com.morphoss.acal.AcalTheme
     [java] com.morphoss.acal.BuildConfig
     [java] com.morphoss.acal.CheckServerFailedError
     [java] com.morphoss.acal.Constants
     [java] com.morphoss.acal.EmmaInstrument.EmmaInstrumentation
     [java] com.morphoss.acal.EmmaInstrument.FinishListener
     [java] com.morphoss.acal.EmmaInstrument.InstrumentedActivity$CoverageCollector
     [java] com.morphoss.acal.EmmaInstrument.InstrumentedActivity
     [java] com.morphoss.acal.EmmaInstrument.SMSInstrumentedReceiver
     [java] com.morphoss.acal.HashCodeUtil
     [java] com.morphoss.acal.L10nUtil
     [java] com.morphoss.acal.PrefNames
     [java] com.morphoss.acal.R$anim
     [java] com.morphoss.acal.R$array
     [java] com.morphoss.acal.R$attr
     [java] com.morphoss.acal.R$color
     [java] com.morphoss.acal.R$dimen
     [java] com.morphoss.acal.R$drawable
     [java] com.morphoss.acal.R$id
     [java] com.morphoss.acal.R$layout
     [java] com.morphoss.acal.R$menu
     [java] com.morphoss.acal.R$raw
     [java] com.morphoss.acal.R$string
     [java] com.morphoss.acal.R$style
     [java] com.morphoss.acal.R$xml
     [java] com.morphoss.acal.R
     [java] com.morphoss.acal.ServiceManager$1
     [java] com.morphoss.acal.ServiceManager
     [java] com.morphoss.acal.ServiceManagerCallBack
     [java] com.morphoss.acal.StaticHelpers
     [java] com.morphoss.acal.TimePickerPreference
     [java] com.morphoss.acal.aCal
     [java] com.morphoss.acal.aCalNotes
     [java] com.morphoss.acal.aCalTasks
     [java] com.morphoss.acal.acaltime.AcalDateRange$1
     [java] com.morphoss.acal.acaltime.AcalDateRange
     [java] com.morphoss.acal.acaltime.AcalDateTime$1
     [java] com.morphoss.acal.acaltime.AcalDateTime$AcalDateTimeSorter
     [java] com.morphoss.acal.acaltime.AcalDateTime
     [java] com.morphoss.acal.acaltime.AcalDateTimeFormatter
     [java] com.morphoss.acal.acaltime.AcalDuration$1
     [java] com.morphoss.acal.acaltime.AcalDuration
     [java] com.morphoss.acal.acaltime.AcalRepeatDaily
     [java] com.morphoss.acal.acaltime.AcalRepeatMonthly
     [java] com.morphoss.acal.acaltime.AcalRepeatRule$LocalEventInstance
     [java] com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType
     [java] com.morphoss.acal.acaltime.AcalRepeatRule
     [java] com.morphoss.acal.acaltime.AcalRepeatRuleDay
     [java] com.morphoss.acal.acaltime.AcalRepeatRuleParser$1
     [java] com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType
     [java] com.morphoss.acal.acaltime.AcalRepeatRuleParser
     [java] com.morphoss.acal.acaltime.AcalRepeatWeekly
     [java] com.morphoss.acal.acaltime.AcalRepeatYearly
     [java] com.morphoss.acal.acaltime.UnrecognisedTimeZone
     [java] com.morphoss.acal.activity.AcalActivity
     [java] com.morphoss.acal.activity.AcalPreferences
     [java] com.morphoss.acal.activity.AlarmActivity$1
     [java] com.morphoss.acal.activity.AlarmActivity$MyPhoneStateListener
     [java] com.morphoss.acal.activity.AlarmActivity
     [java] com.morphoss.acal.activity.CollectionConfigList$1
     [java] com.morphoss.acal.activity.CollectionConfigList
     [java] com.morphoss.acal.activity.CollectionConfigListItemPreference
     [java] com.morphoss.acal.activity.CollectionConfiguration
     [java] com.morphoss.acal.activity.ColourPickerDialog$1
     [java] com.morphoss.acal.activity.ColourPickerDialog$2
     [java] com.morphoss.acal.activity.ColourPickerDialog$3
     [java] com.morphoss.acal.activity.ColourPickerDialog$4
     [java] com.morphoss.acal.activity.ColourPickerDialog$OnColourPickerListener
     [java] com.morphoss.acal.activity.ColourPickerDialog
     [java] com.morphoss.acal.activity.ColourPickerPreference$1
     [java] com.morphoss.acal.activity.ColourPickerPreference
     [java] com.morphoss.acal.activity.ColourPickerView
     [java] com.morphoss.acal.activity.DebugSettings$1
     [java] com.morphoss.acal.activity.DebugSettings$SettingsListClickListener
     [java] com.morphoss.acal.activity.DebugSettings
     [java] com.morphoss.acal.activity.EventEdit$1
     [java] com.morphoss.acal.activity.EventEdit$10
     [java] com.morphoss.acal.activity.EventEdit$11
     [java] com.morphoss.acal.activity.EventEdit$2
     [java] com.morphoss.acal.activity.EventEdit$3
     [java] com.morphoss.acal.activity.EventEdit$4
     [java] com.morphoss.acal.activity.EventEdit$5
     [java] com.morphoss.acal.activity.EventEdit$6
     [java] com.morphoss.acal.activity.EventEdit$7
     [java] com.morphoss.acal.activity.EventEdit$8
     [java] com.morphoss.acal.activity.EventEdit$9
     [java] com.morphoss.acal.activity.EventEdit
     [java] com.morphoss.acal.activity.EventListAdapter$1
     [java] com.morphoss.acal.activity.EventListAdapter$2
     [java] com.morphoss.acal.activity.EventListAdapter
     [java] com.morphoss.acal.activity.EventView$1
     [java] com.morphoss.acal.activity.EventView$2
     [java] com.morphoss.acal.activity.EventView
     [java] com.morphoss.acal.activity.JournalEdit$1
     [java] com.morphoss.acal.activity.JournalEdit$2
     [java] com.morphoss.acal.activity.JournalEdit$3
     [java] com.morphoss.acal.activity.JournalEdit$4
     [java] com.morphoss.acal.activity.JournalEdit$5
     [java] com.morphoss.acal.activity.JournalEdit$6
     [java] com.morphoss.acal.activity.JournalEdit$CollectionForArrayAdapter
     [java] com.morphoss.acal.activity.JournalEdit
     [java] com.morphoss.acal.activity.JournalListAdapter$1
     [java] com.morphoss.acal.activity.JournalListAdapter$2
     [java] com.morphoss.acal.activity.JournalListAdapter
     [java] com.morphoss.acal.activity.JournalListView$1
     [java] com.morphoss.acal.activity.JournalListView
     [java] com.morphoss.acal.activity.JournalView$1
     [java] com.morphoss.acal.activity.JournalView
     [java] com.morphoss.acal.activity.MonthAdapter$1
     [java] com.morphoss.acal.activity.MonthAdapter$MonthButtonListener
     [java] com.morphoss.acal.activity.MonthAdapter
     [java] com.morphoss.acal.activity.MonthView$1
     [java] com.morphoss.acal.activity.MonthView
     [java] com.morphoss.acal.activity.RREventEditedRequest$RREventEditedResponse
     [java] com.morphoss.acal.activity.RREventEditedRequest
     [java] com.morphoss.acal.activity.RRResourceEditedRequest$RRResourceEditedResponse
     [java] com.morphoss.acal.activity.RRResourceEditedRequest
     [java] com.morphoss.acal.activity.Settings$1
     [java] com.morphoss.acal.activity.Settings$SettingsListClickListener
     [java] com.morphoss.acal.activity.Settings
     [java] com.morphoss.acal.activity.ShowUpgradeChanges
     [java] com.morphoss.acal.activity.TodoEdit$1
     [java] com.morphoss.acal.activity.TodoEdit$10
     [java] com.morphoss.acal.activity.TodoEdit$11
     [java] com.morphoss.acal.activity.TodoEdit$12
     [java] com.morphoss.acal.activity.TodoEdit$13
     [java] com.morphoss.acal.activity.TodoEdit$2
     [java] com.morphoss.acal.activity.TodoEdit$3
     [java] com.morphoss.acal.activity.TodoEdit$4
     [java] com.morphoss.acal.activity.TodoEdit$5
     [java] com.morphoss.acal.activity.TodoEdit$6
     [java] com.morphoss.acal.activity.TodoEdit$7
     [java] com.morphoss.acal.activity.TodoEdit$8
     [java] com.morphoss.acal.activity.TodoEdit$9
     [java] com.morphoss.acal.activity.TodoEdit$CollectionForArrayAdapter
     [java] com.morphoss.acal.activity.TodoEdit
     [java] com.morphoss.acal.activity.TodoListAdapter$1
     [java] com.morphoss.acal.activity.TodoListAdapter$2
     [java] com.morphoss.acal.activity.TodoListAdapter
     [java] com.morphoss.acal.activity.TodoListView$1
     [java] com.morphoss.acal.activity.TodoListView$2
     [java] com.morphoss.acal.activity.TodoListView
     [java] com.morphoss.acal.activity.TodoView$1
     [java] com.morphoss.acal.activity.TodoView$2
     [java] com.morphoss.acal.activity.TodoView
     [java] com.morphoss.acal.activity.YearView
     [java] com.morphoss.acal.activity.serverconfig.AddServerList
     [java] com.morphoss.acal.activity.serverconfig.AddServerListAdapter$1
     [java] com.morphoss.acal.activity.serverconfig.AddServerListAdapter$2
     [java] com.morphoss.acal.activity.serverconfig.AddServerListAdapter
     [java] com.morphoss.acal.activity.serverconfig.AuthenticationFailure
     [java] com.morphoss.acal.activity.serverconfig.CheckServerDialog$1
     [java] com.morphoss.acal.activity.serverconfig.CheckServerDialog$2
     [java] com.morphoss.acal.activity.serverconfig.CheckServerDialog$3
     [java] com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests$TestsCancelledException
     [java] com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests
     [java] com.morphoss.acal.activity.serverconfig.CheckServerDialog
     [java] com.morphoss.acal.activity.serverconfig.NewServerConfiguration
     [java] com.morphoss.acal.activity.serverconfig.ServerConfigData$ServerDataSaxParser
     [java] com.morphoss.acal.activity.serverconfig.ServerConfigData
     [java] com.morphoss.acal.activity.serverconfig.ServerConfigList$1
     [java] com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListClickListener
     [java] com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListCreateContextListener
     [java] com.morphoss.acal.activity.serverconfig.ServerConfigList
     [java] com.morphoss.acal.activity.serverconfig.ServerConfiguration
     [java] com.morphoss.acal.activity.serverconfig.ServerConfigurator
     [java] com.morphoss.acal.activity.serverconfig.TestPort
     [java] com.morphoss.acal.contacts.VCardContact
     [java] com.morphoss.acal.database.AcalDBHelper
     [java] com.morphoss.acal.database.CacheModifier
     [java] com.morphoss.acal.database.CacheWindow
     [java] com.morphoss.acal.database.DMAction
     [java] com.morphoss.acal.database.DMDeleteQuery
     [java] com.morphoss.acal.database.DMInsertQuery
     [java] com.morphoss.acal.database.DMQueryBuilder$1
     [java] com.morphoss.acal.database.DMQueryBuilder
     [java] com.morphoss.acal.database.DMQueryList
     [java] com.morphoss.acal.database.DMUpdateQuery
     [java] com.morphoss.acal.database.DataChangeEvent$1
     [java] com.morphoss.acal.database.DataChangeEvent
     [java] com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION
     [java] com.morphoss.acal.database.DatabaseTableManager
     [java] com.morphoss.acal.database.alarmmanager.ALARM_STATE
     [java] com.morphoss.acal.database.alarmmanager.AlarmChangedEvent
     [java] com.morphoss.acal.database.alarmmanager.AlarmChangedListener
     [java] com.morphoss.acal.database.alarmmanager.AlarmProcessingException
     [java] com.morphoss.acal.database.alarmmanager.AlarmQueueManager$1
     [java] com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager
     [java] com.morphoss.acal.database.alarmmanager.AlarmQueueManager
     [java] com.morphoss.acal.database.alarmmanager.AlarmRow
     [java] com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm$ARGetNextAlarmResult
     [java] com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm
     [java] com.morphoss.acal.database.alarmmanager.requests.ARRebuildRequest
     [java] com.morphoss.acal.database.alarmmanager.requests.ARResourceChanged
     [java] com.morphoss.acal.database.alarmmanager.requests.ARUpdateAlarmState
     [java] com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequest
     [java] com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse$1
     [java] com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse
     [java] com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse
     [java] com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponseListener
     [java] com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequest
     [java] com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequestWithResponse
     [java] com.morphoss.acal.database.cachemanager.BlockingCacheRequest
     [java] com.morphoss.acal.database.cachemanager.BlockingCacheRequestWithResponse
     [java] com.morphoss.acal.database.cachemanager.CacheChangedEvent
     [java] com.morphoss.acal.database.cachemanager.CacheChangedListener
     [java] com.morphoss.acal.database.cachemanager.CacheManager$1
     [java] com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager
     [java] com.morphoss.acal.database.cachemanager.CacheManager
     [java] com.morphoss.acal.database.cachemanager.CacheObject$1
     [java] com.morphoss.acal.database.cachemanager.CacheObject
     [java] com.morphoss.acal.database.cachemanager.CacheProcessingException
     [java] com.morphoss.acal.database.cachemanager.CacheRequest
     [java] com.morphoss.acal.database.cachemanager.CacheRequestWithResponse$1
     [java] com.morphoss.acal.database.cachemanager.CacheRequestWithResponse
     [java] com.morphoss.acal.database.cachemanager.CacheResponse
     [java] com.morphoss.acal.database.cachemanager.CacheResponseListener
     [java] com.morphoss.acal.database.cachemanager.requests.CRAddRangeResult
     [java] com.morphoss.acal.database.cachemanager.requests.CRClearCacheRequest
     [java] com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects$CRGetNextNObjectsResponse
     [java] com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects
     [java] com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$1
     [java] com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$CRJournalsByTypeResponse
     [java] com.morphoss.acal.database.cachemanager.requests.CRJournalsByType
     [java] com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay$CREventsInMonthByDayResponse
     [java] com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay
     [java] com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$1
     [java] com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$CRObjectsInRangeResponse
     [java] com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange
     [java] com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$1
     [java] com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$CRObjectsInWindowResponse
     [java] com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow
     [java] com.morphoss.acal.database.cachemanager.requests.CRReduceRangeSize
     [java] com.morphoss.acal.database.cachemanager.requests.CRResourceChanged
     [java] com.morphoss.acal.database.cachemanager.requests.CRTodosByType$1
     [java] com.morphoss.acal.database.cachemanager.requests.CRTodosByType$CRTodosByTypeResponse
     [java] com.morphoss.acal.database.cachemanager.requests.CRTodosByType
     [java] com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent
     [java] com.morphoss.acal.database.resourcesmanager.ResourceChangedListener
     [java] com.morphoss.acal.database.resourcesmanager.ResourceManager$1
     [java] com.morphoss.acal.database.resourcesmanager.ResourceManager$ReadOnlyResourceTableManager
     [java] com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager
     [java] com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager
     [java] com.morphoss.acal.database.resourcesmanager.ResourceManager
     [java] com.morphoss.acal.database.resourcesmanager.ResourceProcessingException
     [java] com.morphoss.acal.database.resourcesmanager.ResourceResponse
     [java] com.morphoss.acal.database.resourcesmanager.ResourceResponseListener
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm$RRAlarmRowToAcalAlarmResponse
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRBlockAndProcessQueryList
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRDeleteByCollectionId
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$1
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$RREventsInRangeResponse
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection$RRGetResourceInCollectionResult
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection$RRGetResourcesInCollectionResult
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms$RRGetUpcomingAlarmsResult
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance$RRRequestInstanceResponse
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking$RRRequestInstanceBlockingResult
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap$RRSyncQueryMapResponse
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap
     [java] com.morphoss.acal.database.resourcesmanager.requests.RRUpdateCollection
     [java] com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequest
     [java] com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequestWithResponse
     [java] com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyBlockingRequestWithResponse
     [java] com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequest
     [java] com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse$1
     [java] com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse
     [java] com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequest
     [java] com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse$1
     [java] com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse
     [java] com.morphoss.acal.dataservice.CalendarInstance
     [java] com.morphoss.acal.dataservice.Collection
     [java] com.morphoss.acal.dataservice.ComponentResource
     [java] com.morphoss.acal.dataservice.EventInstance$1
     [java] com.morphoss.acal.dataservice.EventInstance$BadlyConstructedEventException
     [java] com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER
     [java] com.morphoss.acal.dataservice.EventInstance
     [java] com.morphoss.acal.dataservice.JournalInstance
     [java] com.morphoss.acal.dataservice.MethodsRequired
     [java] com.morphoss.acal.dataservice.Resource
     [java] com.morphoss.acal.dataservice.TodoInstance
     [java] com.morphoss.acal.davacal.AcalAlarm$1
     [java] com.morphoss.acal.davacal.AcalAlarm$ActionType
     [java] com.morphoss.acal.davacal.AcalAlarm$RelateWith
     [java] com.morphoss.acal.davacal.AcalAlarm
     [java] com.morphoss.acal.davacal.AcalProperty
     [java] com.morphoss.acal.davacal.InvalidCalendarActionException
     [java] com.morphoss.acal.davacal.InvalidCalendarComponentException
     [java] com.morphoss.acal.davacal.Masterable
     [java] com.morphoss.acal.davacal.PropertyName
     [java] com.morphoss.acal.davacal.RecurrenceId$VComponentComparatorByRecurrenceId
     [java] com.morphoss.acal.davacal.RecurrenceId
     [java] com.morphoss.acal.davacal.UnrecognizedTimeZoneException
     [java] com.morphoss.acal.davacal.VAlarm
     [java] com.morphoss.acal.davacal.VCalendar$1
     [java] com.morphoss.acal.davacal.VCalendar
     [java] com.morphoss.acal.davacal.VCalendarCreationException
     [java] com.morphoss.acal.davacal.VCard
     [java] com.morphoss.acal.davacal.VComponent$ComponentParts
     [java] com.morphoss.acal.davacal.VComponent$PartInfo
     [java] com.morphoss.acal.davacal.VComponent
     [java] com.morphoss.acal.davacal.VComponentCreationException
     [java] com.morphoss.acal.davacal.VEvent
     [java] com.morphoss.acal.davacal.VGenericComponent
     [java] com.morphoss.acal.davacal.VJournal
     [java] com.morphoss.acal.davacal.VTimezone
     [java] com.morphoss.acal.davacal.VTodo$1
     [java] com.morphoss.acal.davacal.VTodo$Status
     [java] com.morphoss.acal.davacal.VTodo
     [java] com.morphoss.acal.davacal.YouMustSurroundThisMethodInTryCatchOrIllEatYouException
     [java] com.morphoss.acal.davacal.ZoneData
     [java] com.morphoss.acal.desktop.ShowUpcomingRowLayout$BackgroundShape
     [java] com.morphoss.acal.desktop.ShowUpcomingRowLayout
     [java] com.morphoss.acal.providers.DavCollections
     [java] com.morphoss.acal.providers.PathSets
     [java] com.morphoss.acal.providers.Servers
     [java] com.morphoss.acal.providers.Timezones
     [java] com.morphoss.acal.receivers.StartUpIntentReceiver
     [java] com.morphoss.acal.receivers.TimezoneChangedReceiver
     [java] com.morphoss.acal.receivers.iMIPReceiver
     [java] com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation
     [java] com.morphoss.acal.service.AcalAuthenticator
     [java] com.morphoss.acal.service.AddressbookToContacts
     [java] com.morphoss.acal.service.ContactsSyncAdapterService$SyncAdapterImpl
     [java] com.morphoss.acal.service.ContactsSyncAdapterService
     [java] com.morphoss.acal.service.DebugDatabase
     [java] com.morphoss.acal.service.HomeSetDiscovery
     [java] com.morphoss.acal.service.HomeSetsUpdate
     [java] com.morphoss.acal.service.InitialCollectionSync
     [java] com.morphoss.acal.service.ServiceJob
     [java] com.morphoss.acal.service.ServiceRequest$Stub$Proxy
     [java] com.morphoss.acal.service.ServiceRequest$Stub
     [java] com.morphoss.acal.service.ServiceRequest
     [java] com.morphoss.acal.service.SyncChangesToServer
     [java] com.morphoss.acal.service.SyncCollectionContents
     [java] com.morphoss.acal.service.SynchronisationJobs$WriteActions
     [java] com.morphoss.acal.service.SynchronisationJobs
     [java] com.morphoss.acal.service.UpdateTimezones
     [java] com.morphoss.acal.service.WorkerClass$1
     [java] com.morphoss.acal.service.WorkerClass$WakeUpTimer
     [java] com.morphoss.acal.service.WorkerClass
     [java] com.morphoss.acal.service.aCalService$1
     [java] com.morphoss.acal.service.aCalService$ServiceRequestHandler
     [java] com.morphoss.acal.service.aCalService
     [java] com.morphoss.acal.service.connector.AcalConnectionPool$1
     [java] com.morphoss.acal.service.connector.AcalConnectionPool
     [java] com.morphoss.acal.service.connector.AcalRequestor
     [java] com.morphoss.acal.service.connector.Base64Coder
     [java] com.morphoss.acal.service.connector.ConnectionFailedException
     [java] com.morphoss.acal.service.connector.ConnectorRequestError
     [java] com.morphoss.acal.service.connector.DavRequest
     [java] com.morphoss.acal.service.connector.EasySSLSocketFactory
     [java] com.morphoss.acal.service.connector.EasyX509TrustManager
     [java] com.morphoss.acal.service.connector.SendRequestFailedException
     [java] com.morphoss.acal.views.CustomYearDrawable
     [java] com.morphoss.acal.views.MonthDayBox
     [java] com.morphoss.acal.views.MonthImage
     [java] com.morphoss.acal.views.MonthImageGenerator
     [java] com.morphoss.acal.views.YearHeader
     [java] com.morphoss.acal.views.YearViewLinkedList
     [java] com.morphoss.acal.views.YearViewNode
     [java] com.morphoss.acal.weekview.WVCacheObject
     [java] com.morphoss.acal.weekview.WeekViewActivity
     [java] com.morphoss.acal.weekview.WeekViewCache$1
     [java] com.morphoss.acal.weekview.WeekViewCache
     [java] com.morphoss.acal.weekview.WeekViewDays$Rectangle
     [java] com.morphoss.acal.weekview.WeekViewDays
     [java] com.morphoss.acal.weekview.WeekViewHeader
     [java] com.morphoss.acal.weekview.WeekViewImageCache
     [java] com.morphoss.acal.weekview.WeekViewSideBar
     [java] com.morphoss.acal.weekview.WeekViewTimeTable
     [java] com.morphoss.acal.widget.AcalViewFlipper
     [java] com.morphoss.acal.widget.AlarmDialog$1
     [java] com.morphoss.acal.widget.AlarmDialog$AlarmSetListener
     [java] com.morphoss.acal.widget.AlarmDialog
     [java] com.morphoss.acal.widget.DateTimeDialog
     [java] com.morphoss.acal.widget.DateTimeSetListener
     [java] com.morphoss.acal.widget.NumberPicker$1
     [java] com.morphoss.acal.widget.NumberPicker$2
     [java] com.morphoss.acal.widget.NumberPicker$Formatter
     [java] com.morphoss.acal.widget.NumberPicker$NumberPickerInputFilter
     [java] com.morphoss.acal.widget.NumberPicker$NumberRangeKeyListener
     [java] com.morphoss.acal.widget.NumberPicker$OnChangedListener
     [java] com.morphoss.acal.widget.NumberPicker
     [java] com.morphoss.acal.widget.NumberPickerButton
     [java] com.morphoss.acal.widget.NumberPickerDialog
     [java] com.morphoss.acal.widget.NumberSelectedListener
     [java] com.morphoss.acal.widget.TimeZoneListAdapter$Zone
     [java] com.morphoss.acal.widget.TimeZoneListAdapter
     [java] com.morphoss.acal.xml.DavNode
     [java] com.morphoss.acal.xml.DavParserFactory$1
     [java] com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD
     [java] com.morphoss.acal.xml.DavParserFactory
     [java] com.morphoss.acal.xml.DomDavNode
     [java] com.morphoss.acal.xml.DomDavXmlTreeBuilder
     [java] com.morphoss.acal.xml.SaxDavNode$1
     [java] com.morphoss.acal.xml.SaxDavNode$SaxDavHandler
     [java] com.morphoss.acal.xml.SaxDavNode
     [java] com.morphoss.acal.xml.SaxDavXmlTreeBuilder
     [java] Instrumenting <com.morphoss.acal.AcalApplication: void <init>()>
     [java] Instrumenting <com.morphoss.acal.AcalApplication: android.content.Context getContext()>
     [java] Instrumenting <com.morphoss.acal.AcalApplication: java.lang.String getResourceString(int)>
     [java] Instrumenting <com.morphoss.acal.AcalApplication: java.lang.String getPreferenceString(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.AcalApplication: void setPreferenceString(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.AcalApplication: boolean getPreferenceBoolean(java.lang.String,boolean)>
     [java] Instrumenting <com.morphoss.acal.AcalApplication: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.AcalApplication: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.AcalDebug: void <init>()>
     [java] Instrumenting <com.morphoss.acal.AcalDebug: void heapDebug(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.AcalDebug: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.AcalDebug: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.AcalTheme: void <init>()>
     [java] Instrumenting <com.morphoss.acal.AcalTheme: void initializeTheme(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.AcalTheme: android.view.View getContainerView(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.AcalTheme: int getElementColour(int)>
     [java] Instrumenting <com.morphoss.acal.AcalTheme: void setContainerFromTheme(android.view.View,int)>
     [java] Instrumenting <com.morphoss.acal.AcalTheme: void setContainerColour(android.view.View,int)>
     [java] Instrumenting <com.morphoss.acal.AcalTheme: int pickForegroundForBackground(int)>
     [java] Instrumenting <com.morphoss.acal.AcalTheme: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.AcalTheme: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.BuildConfig: void <init>()>
     [java] Instrumenting <com.morphoss.acal.CheckServerFailedError: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.CheckServerFailedError: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.CheckServerFailedError: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.Constants: void <init>()>
     [java] Instrumenting <com.morphoss.acal.Constants: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.Constants: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: void <init>()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: void onStart()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: void generateCoverageReport()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: java.lang.String getCoverageFilePath()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: boolean setCoverageFilePath(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.String,java.lang.Exception)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: void onActivityFinished()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: void dumpIntermediateCoverage(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.InstrumentedActivity$CoverageCollector: void <init>(com.morphoss.acal.EmmaInstrument.InstrumentedActivity)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.InstrumentedActivity$CoverageCollector: void onReceive(android.content.Context,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.InstrumentedActivity$CoverageCollector: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.InstrumentedActivity: void <init>()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.InstrumentedActivity: void setFinishListener(com.morphoss.acal.EmmaInstrument.FinishListener)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.InstrumentedActivity: void finish()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.InstrumentedActivity: com.morphoss.acal.EmmaInstrument.FinishListener access$000(com.morphoss.acal.EmmaInstrument.InstrumentedActivity)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.InstrumentedActivity: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.SMSInstrumentedReceiver: void <init>()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.SMSInstrumentedReceiver: void onReceive(android.content.Context,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.SMSInstrumentedReceiver: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: void <init>()>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: int hash(int,boolean)>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: int hash(int,char)>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: int hash(int,int)>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: int hash(int,long)>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: int hash(int,float)>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: int hash(int,double)>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: int hash(int,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: int firstTerm(int)>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: boolean isArray(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.HashCodeUtil: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.L10nUtil: void <init>()>
     [java] Instrumenting <com.morphoss.acal.L10nUtil: java.lang.String capitaliseWords(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.L10nUtil: java.lang.String numSuffix(int)>
     [java] Instrumenting <com.morphoss.acal.L10nUtil: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.L10nUtil: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.PrefNames: void <init>()>
     [java] Instrumenting <com.morphoss.acal.PrefNames: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.PrefNames: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.R$anim: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$array: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$attr: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$color: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$dimen: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$drawable: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$id: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$layout: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$menu: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$raw: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$string: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$style: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R$xml: void <init>()>
     [java] Instrumenting <com.morphoss.acal.R: void <init>()>
     [java] Instrumenting <com.morphoss.acal.ServiceManager$1: void <init>(com.morphoss.acal.ServiceManager)>
     [java] Instrumenting <com.morphoss.acal.ServiceManager$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
     [java] Instrumenting <com.morphoss.acal.ServiceManager$1: void onServiceDisconnected(android.content.ComponentName)>
     [java] Instrumenting <com.morphoss.acal.ServiceManager$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.ServiceManager$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: void <init>(android.content.Context,com.morphoss.acal.ServiceManagerCallBack)>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: boolean isConnected()>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: void connectService()>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: com.morphoss.acal.service.ServiceRequest getServiceRequest()>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: void close()>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: com.morphoss.acal.service.ServiceRequest access$002(com.morphoss.acal.ServiceManager,com.morphoss.acal.service.ServiceRequest)>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: boolean access$102(com.morphoss.acal.ServiceManager,boolean)>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: com.morphoss.acal.ServiceManagerCallBack access$200(com.morphoss.acal.ServiceManager)>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: com.morphoss.acal.service.ServiceRequest access$000(com.morphoss.acal.ServiceManager)>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.ServiceManager: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: void <init>()>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: void updateWidgets(android.content.Context,java.lang.Class)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: java.lang.String[] mergeArrays(java.lang.String[],java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: int safeToInt(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: java.lang.String randomColorString()>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: java.lang.String capitaliseWords(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: java.lang.String toHexString(byte[])>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: void copyContentValue(android.content.ContentValues,android.content.ContentValues,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: java.lang.String rTrim(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: java.lang.String urlescape(java.lang.String,boolean)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: void writeNullableLong(android.os.Parcel,java.lang.Long)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: java.lang.Long readNullableLong(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: boolean toBoolean(java.lang.Integer,boolean)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: java.lang.String pathOnServer(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: java.util.ArrayList getViewsInside(android.view.View,java.lang.Class)>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.StaticHelpers: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.TimePickerPreference: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.TimePickerPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.morphoss.acal.TimePickerPreference: void initialize(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.TimePickerPreference: android.view.View onCreateDialogView()>
     [java] Instrumenting <com.morphoss.acal.TimePickerPreference: void onTimeChanged(android.widget.TimePicker,int,int)>
     [java] Instrumenting <com.morphoss.acal.TimePickerPreference: void setDefaultValue(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.TimePickerPreference: int getHour()>
     [java] Instrumenting <com.morphoss.acal.TimePickerPreference: int getMinute()>
     [java] Instrumenting <com.morphoss.acal.TimePickerPreference: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.TimePickerPreference: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.aCal: void <init>()>
     [java] Instrumenting <com.morphoss.acal.aCal: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.aCal: void onResume()>
     [java] Instrumenting <com.morphoss.acal.aCal: void startPreferredView(android.content.SharedPreferences,android.app.Activity,boolean)>
     [java] Instrumenting <com.morphoss.acal.aCal: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.aCal: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.aCalNotes: void <init>()>
     [java] Instrumenting <com.morphoss.acal.aCalNotes: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.aCalNotes: void onResume()>
     [java] Instrumenting <com.morphoss.acal.aCalNotes: void startPreferredView(android.content.SharedPreferences,android.app.Activity)>
     [java] Instrumenting <com.morphoss.acal.aCalNotes: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.aCalNotes: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.aCalTasks: void <init>()>
     [java] Instrumenting <com.morphoss.acal.aCalTasks: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.aCalTasks: void onResume()>
     [java] Instrumenting <com.morphoss.acal.aCalTasks: void startPreferredView(android.content.SharedPreferences,android.app.Activity)>
     [java] Instrumenting <com.morphoss.acal.aCalTasks: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.aCalTasks: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange$1: com.morphoss.acal.acaltime.AcalDateRange createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange$1: com.morphoss.acal.acaltime.AcalDateRange[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange$1: java.lang.Object[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange$1: java.lang.Object createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: void <init>(com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: void <init>(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: int describeContents()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: com.morphoss.acal.acaltime.AcalDateRange getIntersection(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: boolean overlaps(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: boolean overlaps(com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: com.morphoss.acal.acaltime.AcalDateRange clone()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: void writeToParcel(android.os.Parcel,int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: boolean contains(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: boolean contains(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: com.morphoss.acal.acaltime.AcalDateRange extendTo(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: java.lang.Object clone()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateRange: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$1: com.morphoss.acal.acaltime.AcalDateTime createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$1: com.morphoss.acal.acaltime.AcalDateTime[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$1: java.lang.Object[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$1: java.lang.Object createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$AcalDateTimeSorter: void <init>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$AcalDateTimeSorter: int compare(com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$AcalDateTimeSorter: int compare(java.lang.Object,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$AcalDateTimeSorter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime$AcalDateTimeSorter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void <init>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime fromMillis(long)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime localTimeFromMillis(long,boolean)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void <init>(int,int,int,int,int,int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime fromAcalProperty(com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: int monthDays(int,int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: int leapDay(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: int epochLeapDays(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime fromString(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void overwriteTimeZone(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: int hashCode()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime fromIcalendar(java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: short getYear()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean setYear(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: short getMonth()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean setMonth(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: short getMonthDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: short getMonthWeek()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean setMonthDay(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setYearMonthDay(int,int,int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: short getYearDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean setYearDay(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void privateSetYearDay(short,short)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: long getEpochDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void setEpochDay(long)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: short getWeekDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean setWeekDay(short)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: short getYearWeek()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean setYearWeek(short)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: short getHour()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setHour(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: short getMinute()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setMinute(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: short getSecond()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setSecond(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: int getDaySecond()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setDaySecond(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.util.TimeZone getTimeZone()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.String getTimeZoneId()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setTimeZone(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime shiftTimeZone(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime applyLocalTimeZone()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean isDate()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setAsDate(boolean)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: long getMillis()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setMillis(long)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: long getEpoch()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setEpoch(long)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: int get(short)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean set(short,int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: int getActualMaximum(short)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void calculateEpoch()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void calculateDateTime()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void checkEpoch()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void checkSanity()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void localiseToZone()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void fixupTimeFields()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.String fmtIcal()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.String toPropertyString(com.morphoss.acal.davacal.PropertyName)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.String httpDateString()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: int compareTo(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean equals(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean before(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean after(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.util.Date toJavaDate()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime clone()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime addSeconds(long)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime addDays(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime addDays(com.morphoss.acal.acaltime.AcalDateTime,int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime addMonths(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean isFloating()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDuration getDurationTo(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime addDuration(com.morphoss.acal.acaltime.AcalDuration)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime addDuration(com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDuration)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.String getMonthName(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.String getMonthName()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.String fmtMonthYear(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.String getSuffix(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.String fmtDayMonthYear(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean isWithinMonth(com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setWeekStart(short)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void <init>(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: int describeContents()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void writeToParcel(android.os.Parcel,int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.davacal.AcalProperty asProperty(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.davacal.AcalProperty asProperty(com.morphoss.acal.davacal.PropertyName)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime getUTCInstance()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime getInstance()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: com.morphoss.acal.acaltime.AcalDateTime setMonthStart()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: java.lang.Object clone()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: int compareTo(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTime: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTimeFormatter: void <init>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTimeFormatter: java.lang.String fmtFull(com.morphoss.acal.acaltime.AcalDateTime,boolean)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTimeFormatter: java.lang.String fmtShort(com.morphoss.acal.acaltime.AcalDateTime,boolean,boolean,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTimeFormatter: java.lang.String getDisplayTimeTextFull(com.morphoss.acal.acaltime.AcalDateRange,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime,boolean)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTimeFormatter: java.lang.String getDisplayTimeText(android.content.Context,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime,boolean,boolean)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTimeFormatter: java.lang.CharSequence getTodoTimeText(android.content.Context,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime,boolean)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTimeFormatter: java.lang.CharSequence getJournalTimeText(android.content.Context,com.morphoss.acal.acaltime.AcalDateTime,boolean)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTimeFormatter: java.lang.CharSequence format(java.text.SimpleDateFormat,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTimeFormatter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDateTimeFormatter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration$1: com.morphoss.acal.acaltime.AcalDuration createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration$1: com.morphoss.acal.acaltime.AcalDuration[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration$1: java.lang.Object[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration$1: java.lang.Object createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: void <init>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: void <init>(com.morphoss.acal.acaltime.AcalDuration)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: void <init>(long)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: void <init>(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: long getTimeMillis()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: int getDays()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: long getDurationMillis()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: void setDuration(int,int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: java.lang.String toPrettyString(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: boolean equals(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: int hashCode()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: com.morphoss.acal.acaltime.AcalDuration fromProperty(com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: com.morphoss.acal.davacal.AcalProperty asProperty(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: void writeToParcel(android.os.Parcel,int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: int describeContents()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: com.morphoss.acal.acaltime.AcalDateTime getEndDate(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: com.morphoss.acal.davacal.AcalProperty asProperty(com.morphoss.acal.davacal.PropertyName)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalDuration: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatDaily: void <init>(java.lang.String,com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatDaily: java.lang.String getFrequencyName()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatDaily: java.lang.String getPrettyFrequencyName(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatDaily: void nextFrequency()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatDaily: java.util.List buildSet()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatDaily: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatDaily: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatMonthly: void <init>(java.lang.String,com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatMonthly: java.lang.String getFrequencyName()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatMonthly: java.lang.String getPrettyFrequencyName(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatMonthly: void nextFrequency()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatMonthly: java.util.List buildSet()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatMonthly: void specialMonthlyByDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatMonthly: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatMonthly: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$LocalEventInstance: void <init>(com.morphoss.acal.acaltime.AcalRepeatRule,com.morphoss.acal.davacal.Masterable,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDuration)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$LocalEventInstance: com.morphoss.acal.dataservice.EventInstance getEventInstance()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$LocalEventInstance: com.morphoss.acal.database.cachemanager.CacheObject getCacheObject()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$LocalEventInstance: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$LocalEventInstance: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType: com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType[] values()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType: com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType valueOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType: com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType fromString(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: void <init>(com.morphoss.acal.acaltime.AcalDateTime,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: void setUntil(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: com.morphoss.acal.acaltime.AcalRepeatRule fromVCalendar(com.morphoss.acal.davacal.VCalendar,long,long)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: void reset()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: com.morphoss.acal.acaltime.AcalDateTime next()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: boolean hasNext()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: boolean getMoreInstances()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: java.util.List getInstancesInRange(com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: com.morphoss.acal.acaltime.AcalDateRange getInstancesRange()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: void appendAlarmInstancesBetween(java.util.ArrayList,com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: void appendCacheEventInstancesBetween(java.util.List,com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: void appendEventsInstancesBetween(java.util.List,com.morphoss.acal.acaltime.AcalDateRange,boolean)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: com.morphoss.acal.acaltime.AcalRepeatRule$LocalEventInstance getRecurrence(com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.davacal.Masterable)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: long access$000(com.morphoss.acal.acaltime.AcalRepeatRule)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: long access$100(com.morphoss.acal.acaltime.AcalRepeatRule)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRule: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleDay: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleDay: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleDay: java.lang.String toPrettyString()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleDay: boolean isWeekDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleDay: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleDay: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType: com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType[] values()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType: com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType valueOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType: com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType fromString(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void <init>(java.lang.String,com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: com.morphoss.acal.acaltime.AcalRepeatRuleParser parseRepeatRule(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: com.morphoss.acal.acaltime.AcalDateTime getUntil()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void setUntil(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: java.lang.String toPrettyString(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: java.lang.String commaListInts(int[])>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: java.lang.String prettyListInts(java.lang.String,int[],java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: java.lang.String commaListIntsPlusOne(int[])>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void resetBaseDate()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void nextBaseDate(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void startNewSet()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void expandByMonth()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void expandByWeekNo()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void expandByYearDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void expandByMonthDay(int[])>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void expandByMonthDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void expandByDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void expandByDayMonthly()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void expandByHour()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void expandByMinute()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void expandBySecond()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void limitBySetPos()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void limitByMonth()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void limitByMonthDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void limitByDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: int[] parseIntArray(java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: int[] parseIntArrayMinusOne(java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void debugCurrentSet(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatRuleParser: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatWeekly: void <init>(java.lang.String,com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatWeekly: java.lang.String getFrequencyName()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatWeekly: void nextFrequency()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatWeekly: java.util.List buildSet()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatWeekly: java.lang.String getPrettyFrequencyName(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatWeekly: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatWeekly: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatYearly: void <init>(java.lang.String,com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatYearly: java.lang.String getFrequencyName()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatYearly: java.lang.String getPrettyFrequencyName(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatYearly: void nextFrequency()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatYearly: java.util.List buildSet()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatYearly: void specialYearlyByDay()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatYearly: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.AcalRepeatYearly: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.acaltime.UnrecognisedTimeZone: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.acaltime.UnrecognisedTimeZone: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.acaltime.UnrecognisedTimeZone: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.AcalActivity: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.AcalActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.AcalActivity: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.AcalActivity: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.AcalActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: void addDefaultCollectionPreference(android.preference.ListPreference,short)>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: void addDefaultAlarmTonePreference(android.preference.PreferenceManager)>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: void initSummary(android.preference.Preference)>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: void updatePrefSummary(android.preference.Preference)>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.AcalPreferences: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$1: void <init>(com.morphoss.acal.activity.AlarmActivity)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$1: void run()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$MyPhoneStateListener: void <init>(com.morphoss.acal.activity.AlarmActivity)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$MyPhoneStateListener: void onCallStateChanged(int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$MyPhoneStateListener: void ringing()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$MyPhoneStateListener: void inCall()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$MyPhoneStateListener: void idle()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$MyPhoneStateListener: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity$MyPhoneStateListener: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void showNextAlarm()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void updateAlarmView()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void playAlarm()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void createNotification(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void shortPause()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: boolean access$002(com.morphoss.acal.activity.AlarmActivity,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: boolean access$100(com.morphoss.acal.activity.AlarmActivity)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: boolean access$200(com.morphoss.acal.activity.AlarmActivity)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: boolean access$202(com.morphoss.acal.activity.AlarmActivity,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: android.media.MediaPlayer access$300(com.morphoss.acal.activity.AlarmActivity)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: boolean access$102(com.morphoss.acal.activity.AlarmActivity,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.AlarmActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList$1: void <init>(com.morphoss.acal.activity.CollectionConfigList)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList$1: void serviceConnected(com.morphoss.acal.service.ServiceRequest)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void getCollectionListItems()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void createPreferenceHierarchy()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: boolean syncCollection(int,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void onActivityResult(int,int,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: boolean disableCollection(int)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void createAuthenticatedAccount(int)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: boolean onContextItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: boolean onPreferenceClick(android.preference.Preference)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void onDestroy()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: int access$000(com.morphoss.acal.activity.CollectionConfigList)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigList: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigListItemPreference: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigListItemPreference: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigListItemPreference: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigListItemPreference: void setCollectionColour(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigListItemPreference: void setTitle(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigListItemPreference: void setSummary(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigListItemPreference: android.view.View getView(android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigListItemPreference: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfigListItemPreference: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void cancelButton()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void applyButton()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void checkCollection()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void saveData()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void checkTextSummary(android.preference.EditTextPreference)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void updateSummaries()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void preferenceHelper(android.preference.Preference,java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void createPreferenceHierarchy()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: boolean validateDisplayName(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: boolean validateAlarms(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: boolean validateActive(android.preference.Preference,java.lang.Object,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: boolean validateColor(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: boolean validateSyncAge(android.preference.Preference,java.lang.Object,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.CollectionConfiguration: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$1: void <init>(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$1: boolean onTouch(android.view.View,android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$2: void <init>(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$2: boolean onTouch(android.view.View,android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$3: void <init>(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$3: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$3: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$3: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$4: void <init>(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$4: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$4: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog$4: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: void <init>(android.content.Context,int,com.morphoss.acal.activity.ColourPickerDialog$OnColourPickerListener)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: void positionSlider()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: void positionPointer()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: int hitungWarna()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: void show()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: float access$000(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: float access$102(com.morphoss.acal.activity.ColourPickerDialog,float)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: float access$100(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: int access$200(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: com.morphoss.acal.activity.ColourPickerView access$300(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: android.view.View access$400(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: float access$502(com.morphoss.acal.activity.ColourPickerDialog,float)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: float access$602(com.morphoss.acal.activity.ColourPickerDialog,float)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: com.morphoss.acal.activity.ColourPickerDialog$OnColourPickerListener access$700(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference$1: void <init>(com.morphoss.acal.activity.ColourPickerPreference)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference$1: void onCancel(com.morphoss.acal.activity.ColourPickerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference$1: void onOk(com.morphoss.acal.activity.ColourPickerDialog,int)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: void onDialogClosed(boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: int getColour()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: void setColor(int)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: void showDialog()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: android.view.View getView(android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: android.view.View onCreateDialogView()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: int access$000(com.morphoss.acal.activity.ColourPickerPreference)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: boolean access$100(com.morphoss.acal.activity.ColourPickerPreference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: int access$002(com.morphoss.acal.activity.ColourPickerPreference,int)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: boolean access$200(com.morphoss.acal.activity.ColourPickerPreference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerPreference: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerView: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerView: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerView: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerView: void onDraw(android.graphics.Canvas)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerView: void setHue(float)>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerView: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.ColourPickerView: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings$SettingsListClickListener: void <init>(com.morphoss.acal.activity.DebugSettings)>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings$SettingsListClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings$SettingsListClickListener: void <init>(com.morphoss.acal.activity.DebugSettings,com.morphoss.acal.activity.DebugSettings$1)>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings$SettingsListClickListener: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings$SettingsListClickListener: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings: java.lang.String[] access$100()>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings: com.morphoss.acal.ServiceManager access$200(com.morphoss.acal.activity.DebugSettings)>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.DebugSettings: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$1: void <init>(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$10: void <init>(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$10: void onAlarmSet(com.morphoss.acal.davacal.AcalAlarm)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$10: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$10: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$11: void <init>(com.morphoss.acal.activity.EventEdit,com.morphoss.acal.davacal.AcalAlarm)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$11: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$11: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$11: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$2: void <init>(com.morphoss.acal.activity.EventEdit,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$2: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$3: void <init>(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$3: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$3: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$3: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$4: void <init>(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$4: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$4: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$4: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$5: void <init>(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$5: void onDateTimeSet(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$5: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$5: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$6: void <init>(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$6: void onDateTimeSet(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$6: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$6: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$7: void <init>(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$7: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$7: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$7: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$8: void <init>(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$8: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$8: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$8: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$9: void <init>(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$9: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$9: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit$9: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void getEventAction()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void setSelectedCollection(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void loadLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void updateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void setListen(android.widget.Button,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void setupButton(int,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void onCheckedChanged(android.widget.CompoundButton,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void applyChanges()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: boolean saveChanges()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void checkpointCurrentValues()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: android.app.Dialog onCreateDialog(int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void customAlarmDialog()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: android.view.View getAlarmItem(com.morphoss.acal.davacal.AcalAlarm,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void resourceChanged(com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void onFocusChange(android.view.View,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: boolean access$002(com.morphoss.acal.activity.EventEdit,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: android.app.Dialog access$100(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: android.app.Dialog access$102(com.morphoss.acal.activity.EventEdit,android.app.Dialog)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: int access$200(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: int access$202(com.morphoss.acal.activity.EventEdit,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: com.morphoss.acal.dataservice.EventInstance access$300(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: com.morphoss.acal.dataservice.EventInstance access$302(com.morphoss.acal.activity.EventEdit,com.morphoss.acal.dataservice.EventInstance)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void access$400(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: boolean access$000(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: boolean access$500(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: boolean access$502(com.morphoss.acal.activity.EventEdit,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: android.app.Dialog access$600(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: android.os.Handler access$700(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: boolean access$802(com.morphoss.acal.activity.EventEdit,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: boolean access$800(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: int access$902(com.morphoss.acal.activity.EventEdit,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: boolean access$1000(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: java.lang.String[] access$1100(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void access$1200(com.morphoss.acal.activity.EventEdit,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: java.util.ArrayList access$1300(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: java.lang.String[] access$1400(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void access$1500(com.morphoss.acal.activity.EventEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventEdit: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter$1: void <init>(com.morphoss.acal.activity.EventListAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter$2: void <init>(com.morphoss.acal.activity.EventListAdapter,int,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter$2: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: void <init>(com.morphoss.acal.activity.MonthView,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: com.morphoss.acal.database.cachemanager.CacheRequest getCacheRequest()>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: int getCount()>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: java.lang.Object getItem(int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: long getItemId(int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: void setClickEnabled(boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: boolean contextClick(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: void cacheChanged(com.morphoss.acal.database.cachemanager.CacheChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: void cacheResponse(com.morphoss.acal.database.cachemanager.CacheResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: java.util.ArrayList access$002(com.morphoss.acal.activity.EventListAdapter,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: java.util.ArrayList access$000(com.morphoss.acal.activity.EventListAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: com.morphoss.acal.activity.MonthView access$100(com.morphoss.acal.activity.EventListAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventListAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView$1: void <init>(com.morphoss.acal.activity.EventView)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView$2: void <init>(com.morphoss.acal.activity.EventView,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView$2: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void setupButton(int,int)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void loadLayouts()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void populateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void onActivityResult(int,int,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void resourceChanged(com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void access$000(com.morphoss.acal.activity.EventView)>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.EventView: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$2: void <init>(com.morphoss.acal.activity.JournalEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$2: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$2: void onNothingSelected(android.widget.AdapterView)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$3: void <init>(com.morphoss.acal.activity.JournalEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$3: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$3: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$3: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$4: void <init>(com.morphoss.acal.activity.JournalEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$4: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$4: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$4: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$5: void <init>(com.morphoss.acal.activity.JournalEdit,int)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$5: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$5: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$5: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$6: void <init>(com.morphoss.acal.activity.JournalEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$6: void onDateTimeSet(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$6: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$6: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$CollectionForArrayAdapter: void <init>(com.morphoss.acal.activity.JournalEdit,android.content.Context,long)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$CollectionForArrayAdapter: long getCollectionId()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$CollectionForArrayAdapter: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$CollectionForArrayAdapter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit$CollectionForArrayAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void onDestroy()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void requestJournalResource()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void setJournal(com.morphoss.acal.davacal.VJournal)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void populateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void updateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: boolean isModifyAction()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void setSelectedCollection(long)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void setButtonDialog(android.widget.Button,int)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void applyChanges()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: boolean saveChanges()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void onCheckedChanged(android.widget.CompoundButton,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: android.app.Dialog onCreateDialog(int)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void resourceChanged(com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void checkpointCurrentValues()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void onFocusChange(android.view.View,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: com.morphoss.acal.activity.JournalEdit access$000()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void access$100(com.morphoss.acal.activity.JournalEdit,android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: com.morphoss.acal.activity.JournalEdit$CollectionForArrayAdapter[] access$200(com.morphoss.acal.activity.JournalEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void access$300(com.morphoss.acal.activity.JournalEdit,long)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: com.morphoss.acal.davacal.VJournal access$400(com.morphoss.acal.activity.JournalEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void access$500(com.morphoss.acal.activity.JournalEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalEdit: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter$1: void <init>(com.morphoss.acal.activity.JournalListAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter$2: void <init>(com.morphoss.acal.activity.JournalListAdapter,int)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter$2: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: void <init>(com.morphoss.acal.activity.JournalListView)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: int getCount()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: com.morphoss.acal.database.cachemanager.CacheObject getItem(int)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: long getItemId(int)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: boolean contextClick(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: void cacheChanged(com.morphoss.acal.database.cachemanager.CacheChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: void cacheResponse(com.morphoss.acal.database.cachemanager.CacheResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: java.lang.Object getItem(int)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: boolean access$000()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: java.util.ArrayList access$102(com.morphoss.acal.activity.JournalListAdapter,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: com.morphoss.acal.activity.JournalListView access$200(com.morphoss.acal.activity.JournalListAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView$1: void <init>(com.morphoss.acal.activity.JournalListView)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView$1: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void updateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void rememberCurrentPosition()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void restoreCurrentPosition()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void setupButton(int,int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void createListView(boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void startSettings()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void startMonthView()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void deleteJournal(long,int)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: boolean onCreateOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: boolean onOptionsItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: boolean onContextItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalListView: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView$1: void <init>(com.morphoss.acal.activity.JournalView)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void populateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void setupButton(int,int)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: boolean onDown(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void onLongPress(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void onShowPress(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: boolean onSingleTapUp(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: boolean onTouch(android.view.View,android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void onActivityResult(int,int,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void resourceChanged(com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void access$000(com.morphoss.acal.activity.JournalView)>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.JournalView: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter$1: void <init>(com.morphoss.acal.activity.MonthAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter$MonthButtonListener: void <init>(com.morphoss.acal.activity.MonthAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter$MonthButtonListener: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter$MonthButtonListener: void <init>(com.morphoss.acal.activity.MonthAdapter,com.morphoss.acal.activity.MonthAdapter$1)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter$MonthButtonListener: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter$MonthButtonListener: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void <init>(com.morphoss.acal.activity.MonthView,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime,android.view.animation.Animation[])>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void getFirstDay(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: int getCount()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: java.lang.Object getItem(int)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: long getItemId(int)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void updateSelectedDay(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void cacheChanged(com.morphoss.acal.database.cachemanager.CacheChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void cacheResponse(com.morphoss.acal.database.cachemanager.CacheResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void onAnimationEnd(android.view.animation.Animation)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void onAnimationRepeat(android.view.animation.Animation)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void onAnimationStart(android.view.animation.Animation)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void animationInit()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void close()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: java.util.concurrent.ConcurrentHashMap access$000(com.morphoss.acal.activity.MonthAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: long access$100(com.morphoss.acal.activity.MonthAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: com.morphoss.acal.acaltime.AcalDateTime access$300(com.morphoss.acal.activity.MonthAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: com.morphoss.acal.activity.MonthView access$400(com.morphoss.acal.activity.MonthAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView$1: void <init>(com.morphoss.acal.activity.MonthView)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void rememberCurrentPosition()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void restoreCurrentPosition()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void setupButton(int,int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void createGridView(boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void createListView(boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void flipMonth(int)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void flipDay()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void startSettings()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void startTodoList()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean swipe(java.lang.Object,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: java.lang.Object getTouchedObject(double,double)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void changeDisplayedMonth(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void changeSelectedDate(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void deleteEvent(long,java.lang.String,int,int)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: android.app.Dialog onCreateDialog(int)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean onCreateOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean onTouchEvent(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean onTouch(android.view.View,android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean onOptionsItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean onTrackballEvent(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean onContextItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void onActivityResult(int,int,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean onDown(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void onLongPress(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void onShowPress(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean onSingleTapUp(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: android.os.Handler access$000(com.morphoss.acal.activity.MonthView)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: android.app.Dialog access$100(com.morphoss.acal.activity.MonthView)>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.MonthView: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.RREventEditedRequest$RREventEditedResponse: void <init>(com.morphoss.acal.activity.RREventEditedRequest,java.lang.Long)>
     [java] Instrumenting <com.morphoss.acal.activity.RREventEditedRequest$RREventEditedResponse: java.lang.Long result()>
     [java] Instrumenting <com.morphoss.acal.activity.RREventEditedRequest$RREventEditedResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.activity.RREventEditedRequest$RREventEditedResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.RREventEditedRequest$RREventEditedResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.RREventEditedRequest: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceResponseListener,com.morphoss.acal.dataservice.EventInstance,int,int)>
     [java] Instrumenting <com.morphoss.acal.activity.RREventEditedRequest: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.activity.RREventEditedRequest: void fail()>
     [java] Instrumenting <com.morphoss.acal.activity.RREventEditedRequest: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.RREventEditedRequest: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.RRResourceEditedRequest$RRResourceEditedResponse: void <init>(com.morphoss.acal.activity.RRResourceEditedRequest,java.lang.Long)>
     [java] Instrumenting <com.morphoss.acal.activity.RRResourceEditedRequest$RRResourceEditedResponse: java.lang.Long result()>
     [java] Instrumenting <com.morphoss.acal.activity.RRResourceEditedRequest$RRResourceEditedResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.activity.RRResourceEditedRequest$RRResourceEditedResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.RRResourceEditedRequest$RRResourceEditedResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.RRResourceEditedRequest: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceResponseListener,long,long,com.morphoss.acal.davacal.VComponent,int)>
     [java] Instrumenting <com.morphoss.acal.activity.RRResourceEditedRequest: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.activity.RRResourceEditedRequest: void fail()>
     [java] Instrumenting <com.morphoss.acal.activity.RRResourceEditedRequest: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.RRResourceEditedRequest: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings$SettingsListClickListener: void <init>(com.morphoss.acal.activity.Settings)>
     [java] Instrumenting <com.morphoss.acal.activity.Settings$SettingsListClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.morphoss.acal.activity.Settings$SettingsListClickListener: void <init>(com.morphoss.acal.activity.Settings,com.morphoss.acal.activity.Settings$1)>
     [java] Instrumenting <com.morphoss.acal.activity.Settings$SettingsListClickListener: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings$SettingsListClickListener: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.Settings: void serverConfig()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings: void collectionConfig()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings: void preferences()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings: void showUpdateInformation()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings: void debugOptions()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings: java.lang.String[] access$100(com.morphoss.acal.activity.Settings)>
     [java] Instrumenting <com.morphoss.acal.activity.Settings: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.Settings: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.ShowUpgradeChanges: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.ShowUpgradeChanges: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.ShowUpgradeChanges: java.util.ArrayList readLines()>
     [java] Instrumenting <com.morphoss.acal.activity.ShowUpgradeChanges: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.ShowUpgradeChanges: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.ShowUpgradeChanges: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$10: void <init>(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$10: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$10: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$10: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$11: void <init>(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$11: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$11: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$11: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$12: void <init>(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$12: void onAlarmSet(com.morphoss.acal.davacal.AcalAlarm)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$12: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$12: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$13: void <init>(com.morphoss.acal.activity.TodoEdit,com.morphoss.acal.davacal.AcalAlarm)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$13: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$13: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$13: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$2: void <init>(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$2: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$2: void onNothingSelected(android.widget.AdapterView)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$3: void <init>(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$3: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$3: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$3: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$4: void <init>(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$4: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$4: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$4: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$5: void <init>(com.morphoss.acal.activity.TodoEdit,int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$5: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$5: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$5: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$6: void <init>(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$6: void onDateTimeSet(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$6: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$6: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$7: void <init>(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$7: void onDateTimeSet(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$7: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$7: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$8: void <init>(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$8: void onDateTimeSet(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$8: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$8: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$9: void <init>(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$9: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$9: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$9: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$CollectionForArrayAdapter: void <init>(com.morphoss.acal.activity.TodoEdit,android.content.Context,long)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$CollectionForArrayAdapter: long getCollectionId()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$CollectionForArrayAdapter: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$CollectionForArrayAdapter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit$CollectionForArrayAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void messageHandler(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void onDestroy()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void requestTodoResource()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void setTodo(com.morphoss.acal.davacal.VTodo)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void populateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void updateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void setSelectedCollection(long)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void setButtonDialog(android.widget.Button,int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void applyChanges()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: boolean saveChanges()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void onCheckedChanged(android.widget.CompoundButton,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: android.app.Dialog onCreateDialog(int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void customAlarmDialog()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: android.view.View getAlarmItem(com.morphoss.acal.davacal.AcalAlarm,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: boolean isModifyAction()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void onProgressChanged(android.widget.SeekBar,int,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void onStartTrackingTouch(android.widget.SeekBar)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void onStopTrackingTouch(android.widget.SeekBar)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void resourceChanged(com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: com.morphoss.acal.activity.TodoEdit access$000()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void access$100(com.morphoss.acal.activity.TodoEdit,android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: com.morphoss.acal.activity.TodoEdit$CollectionForArrayAdapter[] access$200(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void access$300(com.morphoss.acal.activity.TodoEdit,long)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: com.morphoss.acal.davacal.VTodo access$400(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void access$500(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: java.util.List access$600(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: int access$702(com.morphoss.acal.activity.TodoEdit,int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: boolean access$800(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: java.lang.String[] access$900(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: boolean access$1000(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: java.lang.String access$1100(com.morphoss.acal.activity.TodoEdit)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoEdit: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter$1: void <init>(com.morphoss.acal.activity.TodoListAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter$2: void <init>(com.morphoss.acal.activity.TodoListAdapter,int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter$2: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: void <init>(com.morphoss.acal.activity.TodoListView,boolean,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: int getCount()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: com.morphoss.acal.database.cachemanager.CacheObject getItem(int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: long getItemId(int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: boolean contextClick(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: void cacheChanged(com.morphoss.acal.database.cachemanager.CacheChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: void cacheResponse(com.morphoss.acal.database.cachemanager.CacheResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: java.lang.Object getItem(int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: boolean access$000()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: java.util.ArrayList access$102(com.morphoss.acal.activity.TodoListAdapter,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: com.morphoss.acal.activity.TodoListView access$200(com.morphoss.acal.activity.TodoListAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView$1: void <init>(com.morphoss.acal.activity.TodoListView)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView$1: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView$2: void <init>(com.morphoss.acal.activity.TodoListView)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView$2: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void updateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void rememberCurrentPosition()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void restoreCurrentPosition()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void setupButton(int,int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void setSelections()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void createListView(boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void startSettings()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void startMonthView()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void deleteTodo(long,int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void completeTodo(long,int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: boolean onCreateOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: boolean onOptionsItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: boolean onContextItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoListView: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView$1: void <init>(com.morphoss.acal.activity.TodoView)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView$2: void <init>(com.morphoss.acal.activity.TodoView)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView$2: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void setupMapButton()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void populateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void setupButton(int,int)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: boolean onDown(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void onLongPress(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void onShowPress(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: boolean onSingleTapUp(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: boolean onTouch(android.view.View,android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void onActivityResult(int,int,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void resourceChanged(com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void access$000(com.morphoss.acal.activity.TodoView)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: com.morphoss.acal.dataservice.TodoInstance access$100(com.morphoss.acal.activity.TodoView)>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.TodoView: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void setupButton(int,int)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void dateChanged()>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: boolean onTouchEvent(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: boolean onTouch(android.view.View,android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: boolean onDown(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void onLongPress(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void onShowPress(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: boolean onSingleTapUp(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void onNumberSelected(int)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: android.app.Dialog onCreateDialog(int)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.YearView: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerList: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerList: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerList: void updateListView()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerList: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerList: void onActivityResult(int,int,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerList: void signUp(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerList: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerList: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter$1: void <init>(com.morphoss.acal.activity.serverconfig.AddServerListAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter$1: boolean accept(java.io.File,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter$2: void <init>(com.morphoss.acal.activity.serverconfig.AddServerListAdapter,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter$2: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter: void <init>(com.morphoss.acal.activity.serverconfig.AddServerList)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter: void populateData()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter: int getCount()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter: java.lang.Object getItem(int)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter: long getItemId(int)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter: com.morphoss.acal.activity.serverconfig.AddServerList access$000(com.morphoss.acal.activity.serverconfig.AddServerListAdapter)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AddServerListAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AuthenticationFailure: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AuthenticationFailure: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.AuthenticationFailure: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$1: void <init>(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$2: void <init>(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$2: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$3: void <init>(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$3: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$3: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$3: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests$TestsCancelledException: void <init>(com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests$TestsCancelledException: void <init>(com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests,com.morphoss.acal.activity.serverconfig.CheckServerDialog$1)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests$TestsCancelledException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests$TestsCancelledException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: void <init>(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: java.lang.Void doInBackground(java.lang.Boolean[])>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: void onProgressUpdate(java.lang.Integer[])>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: void onPostExecute(java.lang.Void)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: void checkServer()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: void updateProgress(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: void onProgressUpdate(java.lang.Object[])>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: void onPostExecute(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: void <init>(com.morphoss.acal.activity.serverconfig.CheckServerDialog,com.morphoss.acal.activity.serverconfig.CheckServerDialog$1)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: void <init>(com.morphoss.acal.activity.serverconfig.ServerConfigurator,android.content.ContentValues,android.content.Context,com.morphoss.acal.ServiceManager)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: void createProgressDialog(java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: void start()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: void showFailDialog(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: void showSuccessDialog(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: boolean checkInternetConnected()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: android.app.ProgressDialog access$000(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: android.app.ProgressDialog access$002(com.morphoss.acal.activity.serverconfig.CheckServerDialog,android.app.ProgressDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: void access$100(com.morphoss.acal.activity.serverconfig.CheckServerDialog,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: void access$200(com.morphoss.acal.activity.serverconfig.CheckServerDialog,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: boolean access$300(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: com.morphoss.acal.service.connector.AcalRequestor access$402(com.morphoss.acal.activity.serverconfig.CheckServerDialog,com.morphoss.acal.service.connector.AcalRequestor)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: android.content.ContentValues access$500(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: java.util.List access$602(com.morphoss.acal.activity.serverconfig.CheckServerDialog,java.util.List)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: com.morphoss.acal.service.connector.AcalRequestor access$400(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: android.content.Context access$700(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: boolean access$800(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: java.util.List access$600(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: android.os.Handler access$900(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests access$1100(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: com.morphoss.acal.activity.serverconfig.ServerConfigurator access$1300(com.morphoss.acal.activity.serverconfig.CheckServerDialog)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.CheckServerDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: boolean checkIfServersAreConfigured()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void populateLayout()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void createDefaultValues()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void checkServer()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void saveData()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void finishAndClose()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void createRecord()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: boolean validateAndAssign()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: boolean isAdvancedInterface()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: android.net.ConnectivityManager getConnectivityService()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void finish()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.NewServerConfiguration: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData$ServerDataSaxParser: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData$ServerDataSaxParser: java.util.List getList()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData$ServerDataSaxParser: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData$ServerDataSaxParser: void endElement(java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData$ServerDataSaxParser: void characters(char[],int,int)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData$ServerDataSaxParser: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData$ServerDataSaxParser: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData: void <init>(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData: void removeNonDBFields(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData: android.content.ContentValues getContentValues()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData: void writeToFile(java.io.File)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData: java.util.List getServerConfigDataFromFile(java.io.InputStream)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData: java.util.List getServerConfigDataFromFile(java.io.File)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigData: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListClickListener: void <init>(com.morphoss.acal.activity.serverconfig.ServerConfigList)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListClickListener: void <init>(com.morphoss.acal.activity.serverconfig.ServerConfigList,com.morphoss.acal.activity.serverconfig.ServerConfigList$1)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListClickListener: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListClickListener: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListCreateContextListener: void <init>(com.morphoss.acal.activity.serverconfig.ServerConfigList)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListCreateContextListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListCreateContextListener: void <init>(com.morphoss.acal.activity.serverconfig.ServerConfigList,com.morphoss.acal.activity.serverconfig.ServerConfigList$1)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListCreateContextListener: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListCreateContextListener: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: void updateListView()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: void deleteServer(int)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: void exportServer(int)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: boolean onContextItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: void onDestroy()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: java.lang.String[] access$200(com.morphoss.acal.activity.serverconfig.ServerConfigList)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: java.util.Map access$300(com.morphoss.acal.activity.serverconfig.ServerConfigList)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfigList: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void <init>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void onPause()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void onResume()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void createDefaultValuesForMissing()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void createDefaultValues()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void cancelButton()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void applyButton()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void checkServer()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void saveData()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void finishAndClose()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void createRecord()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void updateRecord()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void checkTextSummary(android.preference.EditTextPreference)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void updateSummaries()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void preferenceHelper(android.preference.Preference,java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void createPreferenceHierarchy()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean onCreateOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean onOptionsItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean validateFriendlyName(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean validateUseSSL(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean validateHostName(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean validateUrl(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean validatePort(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean validatePrincipalPath(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean validateAuth(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean validateUsername(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean validatePassword(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean validateActive(android.preference.Preference,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean isAdvancedInterface()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: android.net.ConnectivityManager getConnectivityService()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.ServerConfiguration: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: void <init>(com.morphoss.acal.service.connector.AcalRequestor)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: void <init>(com.morphoss.acal.service.connector.AcalRequestor,int,boolean)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean isOpen()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: void setAchievement(int)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean reProbe()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean checkCalendarAccess(org.apache.http.Header[])>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean doPropfindPrincipal(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean doPrincipalMatchSelf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: void setFieldsFromRequestor()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean hasDAV()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean hasCalDAV()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean authOK()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean hasPrincipalUrl()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: java.util.Iterator defaultIterator(com.morphoss.acal.service.connector.AcalRequestor)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: java.util.Iterator reIterate()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean addSrvLookups(com.morphoss.acal.service.connector.AcalRequestor)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: java.lang.String getProtocolUrlPrefix()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: int getAchievement()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: java.lang.String getCalendarPath()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: void applyToServerSettings(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.activity.serverconfig.TestPort: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void <init>(com.morphoss.acal.dataservice.Resource)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void buildTypeMap()>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: java.lang.String getUid()>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: java.lang.String getFullName()>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: int getSequence()>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void writeToContact(android.content.Context,android.accounts.Account,java.lang.Integer)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void writeContactDetails(boolean,int)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void applyOp(java.lang.String,android.content.ContentProviderOperation$Builder)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: android.content.ContentProviderOperation$Builder beginOp(boolean,int,java.lang.String,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void doStructuredName(boolean,int,com.morphoss.acal.davacal.AcalProperty,com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void doPhone(boolean,int,com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void doStructuredAddress(boolean,int,com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void doEmail(boolean,int,com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void doPhoto(boolean,int,com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: android.content.ContentValues getAndroidContact(android.content.Context,java.lang.Integer)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void writeToVCard(android.content.Context,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.contacts.VCardContact: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: void onOpen(android.database.sqlite.SQLiteDatabase)>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: android.database.sqlite.SQLiteDatabase openWritableDatabase(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: void close(android.database.sqlite.SQLiteDatabase)>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: void createMostTables(android.database.sqlite.SQLiteDatabase,boolean)>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: void recoverDatabase(android.database.sqlite.SQLiteDatabase,boolean)>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.AcalDBHelper: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: void <init>(com.morphoss.acal.database.CacheModifier,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: void <init>(long,long,long,long,long,long,com.morphoss.acal.database.CacheModifier,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: boolean isWithinWindow(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: void addToRequestedRange(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: com.morphoss.acal.acaltime.AcalDateRange getRequestedWindow()>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: void setWindowSize(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: void expandWindow(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: void reduceWindow(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: com.morphoss.acal.acaltime.AcalDateRange getCurrentWindow()>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.CacheWindow: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.DMDeleteQuery: void <init>(java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.database.DMDeleteQuery: void process(com.morphoss.acal.database.DatabaseTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.DMDeleteQuery: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.DMDeleteQuery: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.DMInsertQuery: void <init>(java.lang.String,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.DMInsertQuery: void process(com.morphoss.acal.database.DatabaseTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.DMInsertQuery: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.DMInsertQuery: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder: com.morphoss.acal.database.DMQueryBuilder setAction(com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION)>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder: com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION getAction()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder: com.morphoss.acal.database.DMQueryBuilder setNullColumnHack(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder: com.morphoss.acal.database.DMQueryBuilder setValues(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder: com.morphoss.acal.database.DMQueryBuilder setWhereClause(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder: com.morphoss.acal.database.DMQueryBuilder setwhereArgs(java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder: com.morphoss.acal.database.DMAction build()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryList: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryList: void addAction(com.morphoss.acal.database.DMAction)>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryList: java.util.List getActions()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryList: boolean isEmpty()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryList: int size()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryList: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.DMQueryList: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.DMUpdateQuery: void <init>(android.content.ContentValues,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.database.DMUpdateQuery: void process(com.morphoss.acal.database.DatabaseTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.DMUpdateQuery: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.DMUpdateQuery: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent$1: com.morphoss.acal.database.DataChangeEvent createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent$1: com.morphoss.acal.database.DataChangeEvent[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent$1: java.lang.Object[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent$1: java.lang.Object createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent: void <init>(com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent: android.content.ContentValues getData()>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent: void <init>(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent: int describeContents()>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent: void writeToParcel(android.os.Parcel,int)>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.DataChangeEvent: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION: com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION[] values()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION: com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION valueOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void saveStackTraceInfo()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void printStackTraceInfo(int)>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void addChange(com.morphoss.acal.database.DataChangeEvent)>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void openDB(int)>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void closeDB()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void openReadQuerySet()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void closeReadQuerySet()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void yield()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void beginTx()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void setTxSuccessful()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void endTx()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: boolean doWeNeedADatabase(int)>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: boolean doWeNeedATransaction()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: java.util.ArrayList query(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: int delete(java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: int update(android.content.ContentValues,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: long insert(java.lang.String,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: boolean processActions(com.morphoss.acal.database.DMQueryList)>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.DatabaseTableManager: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.ALARM_STATE: com.morphoss.acal.database.alarmmanager.ALARM_STATE[] values()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.ALARM_STATE: com.morphoss.acal.database.alarmmanager.ALARM_STATE valueOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.ALARM_STATE: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.ALARM_STATE: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.ALARM_STATE: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmChangedEvent: void <init>(java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmChangedEvent: java.util.ArrayList getChanges()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmChangedEvent: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmChangedEvent: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmProcessingException: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmProcessingException: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmProcessingException: void <init>(java.lang.String,java.lang.Throwable)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmProcessingException: void <init>(java.lang.Throwable)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmProcessingException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmProcessingException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: void <init>(com.morphoss.acal.database.alarmmanager.AlarmQueueManager)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: void process(com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequest)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: void dataChanged(java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: java.lang.String getTableName()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: void rebuild()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: com.morphoss.acal.database.alarmmanager.AlarmRow getNextAlarm()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: com.morphoss.acal.database.alarmmanager.AlarmRow getNextDueAlarm()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: void updateAlarmState(com.morphoss.acal.database.alarmmanager.AlarmRow,com.morphoss.acal.database.alarmmanager.ALARM_STATE)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: void scheduleAlarmIntent()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: void processChanges(java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: void populateTableFromResource(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: void <init>(com.morphoss.acal.database.alarmmanager.AlarmQueueManager,com.morphoss.acal.database.alarmmanager.AlarmQueueManager$1)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: com.morphoss.acal.database.alarmmanager.AlarmQueueManager getInstance(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: com.morphoss.acal.database.alarmmanager.AlarmQueueManager getInstance(android.content.Context,com.morphoss.acal.database.alarmmanager.AlarmChangedListener)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager getATMInstance()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void addListener(com.morphoss.acal.database.alarmmanager.AlarmChangedListener)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void removeListener(com.morphoss.acal.database.alarmmanager.AlarmChangedListener)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void acquireMetaLock()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void releaseMetaLock()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void loadState()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void saveState()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void close()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void rebuild()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void run()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void resourceChanged(com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void sendRequest(com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequest)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse sendBlockingRequest(com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequestWithResponse)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void sendBlockingRequest(com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequest)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: android.content.Context access$100(com.morphoss.acal.database.alarmmanager.AlarmQueueManager)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: java.util.concurrent.CopyOnWriteArraySet access$200(com.morphoss.acal.database.alarmmanager.AlarmQueueManager)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: com.morphoss.acal.database.resourcesmanager.ResourceManager access$300(com.morphoss.acal.database.alarmmanager.AlarmQueueManager)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmQueueManager: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: void <init>(long,long,long,java.lang.String,com.morphoss.acal.database.alarmmanager.ALARM_STATE,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: void <init>(long,long,java.lang.String,com.morphoss.acal.database.alarmmanager.ALARM_STATE,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: void <init>(long,long,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: android.content.ContentValues toContentValues()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: com.morphoss.acal.database.alarmmanager.AlarmRow fromContentValues(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: int compareTo(com.morphoss.acal.database.alarmmanager.AlarmRow)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: long getTimeToFire()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: void setState(com.morphoss.acal.database.alarmmanager.ALARM_STATE)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: long getId()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: long getResourceId()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: java.lang.String getReccurenceId()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: java.lang.String getBlob()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: long getTTF()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: int compareTo(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.AlarmRow: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm$ARGetNextAlarmResult: void <init>(com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm,com.morphoss.acal.database.alarmmanager.AlarmRow)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm$ARGetNextAlarmResult: com.morphoss.acal.database.alarmmanager.AlarmRow result()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm$ARGetNextAlarmResult: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm$ARGetNextAlarmResult: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm$ARGetNextAlarmResult: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm: void process(com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm: java.lang.String getLogDescription()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARRebuildRequest: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARRebuildRequest: void process(com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARRebuildRequest: java.lang.String getLogDescription()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARRebuildRequest: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARRebuildRequest: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARResourceChanged: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARResourceChanged: void process(com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARResourceChanged: java.lang.String getLogDescription()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARResourceChanged: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARResourceChanged: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARUpdateAlarmState: void <init>(com.morphoss.acal.database.alarmmanager.AlarmRow,com.morphoss.acal.database.alarmmanager.ALARM_STATE)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARUpdateAlarmState: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARUpdateAlarmState: void process(com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARUpdateAlarmState: java.lang.String getLogDescription()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARUpdateAlarmState: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requests.ARUpdateAlarmState: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse$1: void <init>(com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse,com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse$1: void run()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse: void <init>(com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse: void postResponse(com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse: com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponseListener access$000(com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse: void <init>(java.lang.Exception)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse: boolean wasSuccessful()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse: java.lang.Exception getError()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequestWithResponse: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequestWithResponse: void postResponse(com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse)>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequestWithResponse: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequestWithResponse: com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse getResponse()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequestWithResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequestWithResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.BlockingCacheRequestWithResponse: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.BlockingCacheRequestWithResponse: void postResponse(com.morphoss.acal.database.cachemanager.CacheResponse)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.BlockingCacheRequestWithResponse: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.BlockingCacheRequestWithResponse: com.morphoss.acal.database.cachemanager.CacheResponse getResponse()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.BlockingCacheRequestWithResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.BlockingCacheRequestWithResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheChangedEvent: void <init>(java.util.ArrayList,boolean)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheChangedEvent: boolean isWindowOnly()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheChangedEvent: java.util.ArrayList getChanges()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheChangedEvent: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheChangedEvent: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void <init>(com.morphoss.acal.database.cachemanager.CacheManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: java.lang.String getTableName()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void process(com.morphoss.acal.database.cachemanager.CacheRequest)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void setWindowOnlyTrue()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void clearCache()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void rebuildCache()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: java.util.ArrayList queryInRange(com.morphoss.acal.acaltime.AcalDateRange,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: boolean checkWindow(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void dataChanged(java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void resourceDeleted(long)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void updateWindowToInclude(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void removeRangeFromWindow(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void <init>(com.morphoss.acal.database.cachemanager.CacheManager,com.morphoss.acal.database.cachemanager.CacheManager$1)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void access$100(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: com.morphoss.acal.database.cachemanager.CacheManager getInstance(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: com.morphoss.acal.database.cachemanager.CacheManager getInstance(android.content.Context,com.morphoss.acal.database.cachemanager.CacheChangedListener)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager getCTMInstance()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void checkDefaultWindow()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void addListener(com.morphoss.acal.database.cachemanager.CacheChangedListener)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void removeListener(com.morphoss.acal.database.cachemanager.CacheChangedListener)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void setResourceInTx(android.content.Context,boolean)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void acquireMetaLock()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void releaseMetaLock()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void setDBisDirty(android.content.Context,boolean)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void close()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void saveState()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void loadState()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void deleteRange(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void run()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void sendRequest(com.morphoss.acal.database.cachemanager.CacheRequest)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: com.morphoss.acal.database.cachemanager.CacheResponse sendRequest(com.morphoss.acal.database.cachemanager.BlockingCacheRequestWithResponse)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void retrieveRange()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void resourceResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void resourceChanged(com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: android.content.Context access$200(com.morphoss.acal.database.cachemanager.CacheManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: com.morphoss.acal.database.CacheWindow access$302(com.morphoss.acal.database.cachemanager.CacheManager,com.morphoss.acal.database.CacheWindow)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void access$400(com.morphoss.acal.database.cachemanager.CacheManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: com.morphoss.acal.database.CacheWindow access$300(com.morphoss.acal.database.cachemanager.CacheManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void access$500(com.morphoss.acal.database.cachemanager.CacheManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: java.util.concurrent.CopyOnWriteArraySet access$600(com.morphoss.acal.database.cachemanager.CacheManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheManager: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject$1: com.morphoss.acal.database.cachemanager.CacheObject createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject$1: com.morphoss.acal.database.cachemanager.CacheObject[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject$1: java.lang.Object[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject$1: java.lang.Object createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: void <init>(com.morphoss.acal.database.cachemanager.CacheObject)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: void <init>(long,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,long,long,long,boolean,boolean,boolean,int)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: void <init>(com.morphoss.acal.davacal.Masterable,long,long)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: void <init>(com.morphoss.acal.davacal.Masterable,long,long,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: void <init>(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: int describeContents()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: void writeToParcel(android.os.Parcel,int)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: java.lang.String getSummary()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: boolean hasAlarms()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: long getCollectionId()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: long getResourceId()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: boolean isRecurring()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: boolean isOverdue()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: boolean isCompleted()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: java.lang.String getLocation()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: long getStart()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: long getEnd()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: boolean isAllDay()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: android.content.ContentValues getCacheCVs()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: com.morphoss.acal.database.cachemanager.CacheObject fromContentValues(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: int compareTo(com.morphoss.acal.database.cachemanager.CacheObject)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: boolean isEvent()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: boolean isTodo()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: java.lang.String getRecurrenceId()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: com.morphoss.acal.acaltime.AcalDateTime getStartDateTime()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: com.morphoss.acal.acaltime.AcalDateTime getEndDateTime()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: com.morphoss.acal.acaltime.AcalDateTime getCompletedDateTime()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: com.morphoss.acal.acaltime.AcalDateRange getRange()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: boolean equals(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: void logInvalidObject(android.content.Context,java.lang.String,java.lang.Exception)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: int compareTo(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: void <init>(android.os.Parcel,com.morphoss.acal.database.cachemanager.CacheObject$1)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheObject: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheProcessingException: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheProcessingException: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheProcessingException: void <init>(java.lang.String,java.lang.Throwable)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheProcessingException: void <init>(java.lang.Throwable)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheProcessingException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheProcessingException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheRequestWithResponse$1: void <init>(com.morphoss.acal.database.cachemanager.CacheRequestWithResponse,com.morphoss.acal.database.cachemanager.CacheResponse)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheRequestWithResponse$1: void run()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheRequestWithResponse$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheRequestWithResponse$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheRequestWithResponse: void <init>(com.morphoss.acal.database.cachemanager.CacheResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheRequestWithResponse: void postResponse(com.morphoss.acal.database.cachemanager.CacheResponse)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheRequestWithResponse: com.morphoss.acal.database.cachemanager.CacheResponseListener access$000(com.morphoss.acal.database.cachemanager.CacheRequestWithResponse)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheRequestWithResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.CacheRequestWithResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRAddRangeResult: void <init>(com.morphoss.acal.database.DMQueryList,com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRAddRangeResult: void process(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRAddRangeResult: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRAddRangeResult: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRClearCacheRequest: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRClearCacheRequest: void process(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRClearCacheRequest: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRClearCacheRequest: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects$CRGetNextNObjectsResponse: void <init>(com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects$CRGetNextNObjectsResponse: java.util.ArrayList result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects$CRGetNextNObjectsResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects$CRGetNextNObjectsResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects$CRGetNextNObjectsResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects: void <init>(int)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects: com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects GetNextNEvents(int)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects: void process(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$CRJournalsByTypeResponse: void <init>(com.morphoss.acal.database.cachemanager.requests.CRJournalsByType,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$CRJournalsByTypeResponse: java.util.ArrayList result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$CRJournalsByTypeResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$CRJournalsByTypeResponse: void <init>(com.morphoss.acal.database.cachemanager.requests.CRJournalsByType,java.util.ArrayList,com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$1)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$CRJournalsByTypeResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$CRJournalsByTypeResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType: void <init>(com.morphoss.acal.database.cachemanager.CacheResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType: void process(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRJournalsByType: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay$CREventsInMonthByDayResponse: void <init>(com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay,java.util.HashMap)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay$CREventsInMonthByDayResponse: java.util.HashMap result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay$CREventsInMonthByDayResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay$CREventsInMonthByDayResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay$CREventsInMonthByDayResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay: void <init>(int,int,com.morphoss.acal.database.cachemanager.CacheResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay: com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay EventsInMonthByDay(int,int,com.morphoss.acal.database.cachemanager.CacheResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay: void process(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay: void printMetrics()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$CRObjectsInRangeResponse: void <init>(com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$CRObjectsInRangeResponse: java.util.ArrayList result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$CRObjectsInRangeResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$CRObjectsInRangeResponse: void <init>(com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange,java.util.ArrayList,com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$1)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$CRObjectsInRangeResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$CRObjectsInRangeResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange: void <init>(com.morphoss.acal.acaltime.AcalDateRange,com.morphoss.acal.database.cachemanager.CacheResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange: com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange EventsInRange(com.morphoss.acal.acaltime.AcalDateRange,com.morphoss.acal.database.cachemanager.CacheResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange: void process(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$CRObjectsInWindowResponse: void <init>(com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow,java.util.ArrayList,com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$CRObjectsInWindowResponse: com.morphoss.acal.acaltime.AcalDateRange rangeRetreived()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$CRObjectsInWindowResponse: java.util.ArrayList result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$CRObjectsInWindowResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$CRObjectsInWindowResponse: void <init>(com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow,java.util.ArrayList,com.morphoss.acal.acaltime.AcalDateRange,com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$1)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$CRObjectsInWindowResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$CRObjectsInWindowResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow: void <init>(com.morphoss.acal.weekview.WeekViewCache)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow: void process(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRReduceRangeSize: void <init>(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRReduceRangeSize: void process(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRReduceRangeSize: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRReduceRangeSize: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRResourceChanged: void <init>(com.morphoss.acal.database.DMQueryList)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRResourceChanged: void process(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRResourceChanged: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRResourceChanged: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType$CRTodosByTypeResponse: void <init>(com.morphoss.acal.database.cachemanager.requests.CRTodosByType,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType$CRTodosByTypeResponse: java.util.ArrayList result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType$CRTodosByTypeResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType$CRTodosByTypeResponse: void <init>(com.morphoss.acal.database.cachemanager.requests.CRTodosByType,java.util.ArrayList,com.morphoss.acal.database.cachemanager.requests.CRTodosByType$1)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType$CRTodosByTypeResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType$CRTodosByTypeResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType: void <init>(boolean,boolean,com.morphoss.acal.database.cachemanager.CacheResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType: void process(com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.cachemanager.requests.CRTodosByType: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent: void <init>(java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent: java.util.ArrayList getChanges()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent: com.morphoss.acal.dataservice.Resource getResource(com.morphoss.acal.database.DataChangeEvent)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$1: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceManager,com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequest)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$1: void run()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: void processRead(com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequest)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: java.lang.String getTableName()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: void process(com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequest)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: android.content.ContentValues getResource(long)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: android.content.Context getContext()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: android.content.ContentValues preProcessValues(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: long insert(java.lang.String,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: int update(android.content.ContentValues,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: android.content.ContentValues getResourceInCollection(long,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: java.util.Map contentQueryMap(java.lang.String,java.lang.String[])>
     [java] type Ljava/lang/Deprecated;
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: void deleteByCollectionId(long)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: boolean doSyncListAndToken(com.morphoss.acal.database.DMQueryList,long,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: boolean syncToServer(com.morphoss.acal.database.DMAction,long,long)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: void dataChanged(java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: android.content.ContentValues getServerRow(int)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: void deleteInvalidCollectionRecord(long)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: android.content.ContentValues getCollectionRow(long)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: void deletePendingChange(long)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: void updateCollection(long,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: com.morphoss.acal.database.DMDeleteQuery getNewDeleteQuery(java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: com.morphoss.acal.database.DMInsertQuery getNewInsertQuery(java.lang.String,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: com.morphoss.acal.database.DMQueryBuilder getNewQueryBuilder()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: com.morphoss.acal.database.DMQueryList getNewQueryList()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: com.morphoss.acal.database.DMUpdateQuery getNewUpdateQuery(android.content.ContentValues,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: long addPending(long,long,java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: java.util.ArrayList getPendingResources()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceManager,com.morphoss.acal.database.resourcesmanager.ResourceManager$1)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: com.morphoss.acal.database.resourcesmanager.ResourceManager getInstance(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: com.morphoss.acal.database.resourcesmanager.ResourceManager getInstance(android.content.Context,com.morphoss.acal.database.resourcesmanager.ResourceChangedListener)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager getRPInstance()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: void addListener(com.morphoss.acal.database.resourcesmanager.ResourceChangedListener)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: void removeListener(com.morphoss.acal.database.resourcesmanager.ResourceChangedListener)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: void run()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: void close()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: void sendRequest(com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequest)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: void offerAndBlockUntilProcessed(com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequest)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: void sendBlockingRequest(com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequest)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: com.morphoss.acal.database.resourcesmanager.ResourceResponse sendBlockingRequest(com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequestWithResponse)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: void sendRequest(com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequest)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: com.morphoss.acal.database.resourcesmanager.ResourceResponse sendBlockingRequest(com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyBlockingRequestWithResponse)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager access$100(com.morphoss.acal.database.resourcesmanager.ResourceManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: android.content.Context access$200(com.morphoss.acal.database.resourcesmanager.ResourceManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: int access$310(com.morphoss.acal.database.resourcesmanager.ResourceManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: java.util.concurrent.CopyOnWriteArraySet access$400(com.morphoss.acal.database.resourcesmanager.ResourceManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceManager: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceProcessingException: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceProcessingException: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceProcessingException: void <init>(java.lang.String,java.lang.Throwable)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceProcessingException: void <init>(java.lang.Throwable)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceProcessingException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceProcessingException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceResponse: void <init>(java.lang.Exception)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceResponse: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceResponse: boolean wasSuccessful()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceResponse: java.lang.Exception getError()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.ResourceResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm$RRAlarmRowToAcalAlarmResponse: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm,com.morphoss.acal.davacal.AcalAlarm)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm$RRAlarmRowToAcalAlarmResponse: com.morphoss.acal.davacal.AcalAlarm result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm$RRAlarmRowToAcalAlarmResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm$RRAlarmRowToAcalAlarmResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm$RRAlarmRowToAcalAlarmResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm: void <init>(com.morphoss.acal.database.alarmmanager.AlarmRow)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRBlockAndProcessQueryList: void <init>(com.morphoss.acal.database.DMQueryList)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRBlockAndProcessQueryList: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRBlockAndProcessQueryList: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRBlockAndProcessQueryList: void setProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRBlockAndProcessQueryList: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRBlockAndProcessQueryList: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRDeleteByCollectionId: void <init>(java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRDeleteByCollectionId: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRDeleteByCollectionId: void setProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRDeleteByCollectionId: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRDeleteByCollectionId: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRDeleteByCollectionId: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$RREventsInRangeResponse: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$RREventsInRangeResponse: java.util.ArrayList result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$RREventsInRangeResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$RREventsInRangeResponse: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange,java.util.ArrayList,com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$1)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$RREventsInRangeResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$RREventsInRangeResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange: void <init>(com.morphoss.acal.database.CacheWindow,com.morphoss.acal.database.resourcesmanager.ResourceResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$ReadOnlyResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection$RRGetResourceInCollectionResult: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection$RRGetResourceInCollectionResult: android.content.ContentValues result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection$RRGetResourceInCollectionResult: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection$RRGetResourceInCollectionResult: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection$RRGetResourceInCollectionResult: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection: void <init>(long,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$ReadOnlyResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection$RRGetResourcesInCollectionResult: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection$RRGetResourcesInCollectionResult: java.util.ArrayList result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection$RRGetResourcesInCollectionResult: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection$RRGetResourcesInCollectionResult: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection$RRGetResourcesInCollectionResult: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection: void <init>(long)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$ReadOnlyResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms$RRGetUpcomingAlarmsResult: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms$RRGetUpcomingAlarmsResult: java.util.ArrayList result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms$RRGetUpcomingAlarmsResult: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms$RRGetUpcomingAlarmsResult: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms$RRGetUpcomingAlarmsResult: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms: void <init>(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$ReadOnlyResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: void <init>(long)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: void <init>(long,int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: void <init>(int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: void setProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: void setService(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: boolean getCollectionId()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: boolean getCollectionIdByPath(android.content.Context,android.content.ContentValues,long,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: void processSyncToDatabase(com.morphoss.acal.xml.DavNode)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: void syncRecentEvents()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: boolean parseResponseNode(com.morphoss.acal.xml.DavNode,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: boolean equals(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: void removeDuplicates(java.util.Map,java.util.Map)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance$RRRequestInstanceResponse: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance,com.morphoss.acal.dataservice.CalendarInstance)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance$RRRequestInstanceResponse: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance,java.lang.Exception)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance$RRRequestInstanceResponse: com.morphoss.acal.dataservice.CalendarInstance result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance$RRRequestInstanceResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance$RRRequestInstanceResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance$RRRequestInstanceResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceResponseListener,long,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceResponseListener,com.morphoss.acal.database.cachemanager.CacheObject)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$ReadOnlyResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking$RRRequestInstanceBlockingResult: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking$RRRequestInstanceBlockingResult: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking,java.lang.Exception)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking$RRRequestInstanceBlockingResult: android.content.ContentValues result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking$RRRequestInstanceBlockingResult: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking$RRRequestInstanceBlockingResult: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking$RRRequestInstanceBlockingResult: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking: void <init>(long)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$ReadOnlyResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap$RRSyncQueryMapResponse: void <init>(com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap,java.util.Map)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap$RRSyncQueryMapResponse: java.util.Map result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap$RRSyncQueryMapResponse: java.lang.Object result()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap$RRSyncQueryMapResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap$RRSyncQueryMapResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap: void <init>(long,boolean)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRUpdateCollection: void <init>(long,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRUpdateCollection: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRUpdateCollection: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRUpdateCollection: void setProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRUpdateCollection: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requests.RRUpdateCollection: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequestWithResponse: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequestWithResponse: void postResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequestWithResponse: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequestWithResponse: void setProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequestWithResponse: com.morphoss.acal.database.resourcesmanager.ResourceResponse getResponse()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequestWithResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequestWithResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyBlockingRequestWithResponse: void <init>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyBlockingRequestWithResponse: void <init>(int)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyBlockingRequestWithResponse: void postResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyBlockingRequestWithResponse: com.morphoss.acal.database.resourcesmanager.ResourceResponse getResponse()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyBlockingRequestWithResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyBlockingRequestWithResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse$1: void <init>(com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse,com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse$1: void run()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceResponseListener,int)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: void setProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: void postResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: int compareTo(com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequest)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: int priority()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: int compareTo(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: com.morphoss.acal.database.resourcesmanager.ResourceResponseListener access$000(com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse$1: void <init>(com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse,com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse$1: void run()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse: void <init>(com.morphoss.acal.database.resourcesmanager.ResourceResponseListener)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse: void setProcessed()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse: void postResponse(com.morphoss.acal.database.resourcesmanager.ResourceResponse)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse: com.morphoss.acal.database.resourcesmanager.ResourceResponseListener access$000(com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse)>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void <init>(long,long,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime,java.util.ArrayList,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void <init>(com.morphoss.acal.davacal.VCalendar,long,long,com.morphoss.acal.davacal.RecurrenceId)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void <init>(com.morphoss.acal.davacal.Masterable,long,long,com.morphoss.acal.davacal.RecurrenceId,boolean)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: com.morphoss.acal.acaltime.AcalDateTime getEnd()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: com.morphoss.acal.acaltime.AcalDuration getDuration()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: boolean isFirstInstance()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: com.morphoss.acal.acaltime.AcalDateTime getStart()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: java.util.ArrayList getAlarms()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: java.lang.String getRRule()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: java.lang.String getSummary()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: java.lang.String getLocation()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: boolean isSingleInstance()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: long getCollectionId()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: long getResourceId()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: java.lang.String getRecurrenceId()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void setAlarms(java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void setCollectionId(long)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void setDates(com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void setStartDate(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void setEndDate(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void setSummary(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void setDescription(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void setLocation(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void setRepeatRule(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: com.morphoss.acal.dataservice.CalendarInstance getInstance(com.morphoss.acal.davacal.Masterable,long,long,com.morphoss.acal.davacal.RecurrenceId)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: com.morphoss.acal.dataservice.CalendarInstance fromResourceAndRRId(com.morphoss.acal.dataservice.Resource,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: com.morphoss.acal.dataservice.CalendarInstance fromPendingRowAndRRID(android.content.ContentValues,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.CalendarInstance: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: com.morphoss.acal.dataservice.Collection getInstance(long,android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: void flush()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: void fetchAllCollections(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: java.util.Map getAllCollections(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: void <init>(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: com.morphoss.acal.dataservice.Collection fromDatabase(long,android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: void updateCollectionRow(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: int getColour()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: int setColour(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: android.content.ContentValues getCollectionRow()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: long getCollectionId()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: java.lang.String getDisplayName()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: boolean alarmsEnabled()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Collection: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.ComponentResource: void <init>(long,long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.Long,java.lang.Long,java.lang.String,boolean,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.dataservice.ComponentResource: void <init>(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.dataservice.ComponentResource: void parseBlob()>
     [java] Instrumenting <com.morphoss.acal.dataservice.ComponentResource: java.lang.String getCurrentBlob()>
     [java] Instrumenting <com.morphoss.acal.dataservice.ComponentResource: void setEditable()>
     [java] Instrumenting <com.morphoss.acal.dataservice.ComponentResource: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.ComponentResource: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$BadlyConstructedEventException: void <init>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$BadlyConstructedEventException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$BadlyConstructedEventException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: void <init>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: com.morphoss.acal.acaltime.AcalDateTime getStart()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: com.morphoss.acal.acaltime.AcalDuration getDuration()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER setStart(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER setDuration(com.morphoss.acal.acaltime.AcalDuration)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER setSummary(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER setCollection(long)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER addAlarm(com.morphoss.acal.davacal.AcalAlarm)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: com.morphoss.acal.dataservice.EventInstance build()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: long access$000(com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: com.morphoss.acal.acaltime.AcalDateTime access$100(com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: com.morphoss.acal.acaltime.AcalDuration access$200(com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: java.util.ArrayList access$300(com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: java.lang.String access$400(com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance: void <init>(com.morphoss.acal.davacal.VEvent,long,long,com.morphoss.acal.davacal.RecurrenceId)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance: void <init>(com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance: void <init>(com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER,com.morphoss.acal.dataservice.EventInstance$1)>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.EventInstance: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.JournalInstance: void <init>(com.morphoss.acal.davacal.VJournal,long,long,com.morphoss.acal.davacal.RecurrenceId)>
     [java] Instrumenting <com.morphoss.acal.dataservice.JournalInstance: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.JournalInstance: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.MethodsRequired: void <init>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.MethodsRequired: void todoChanged(com.morphoss.acal.davacal.VCalendar,int)>
     [java] Instrumenting <com.morphoss.acal.dataservice.MethodsRequired: void journalChanged(com.morphoss.acal.davacal.VCalendar,int)>
     [java] Instrumenting <com.morphoss.acal.dataservice.MethodsRequired: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.MethodsRequired: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: void <init>(long,long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.Long,java.lang.Long,java.lang.String,boolean,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: void <init>(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: long getCollectionId()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: long getResourceId()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: int describeContents()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: void writeToParcel(android.os.Parcel,int)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: java.lang.String getBlob()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: java.lang.String getEtag()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: android.content.ContentValues toContentValues()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: com.morphoss.acal.dataservice.Resource fromContentValues(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: com.morphoss.acal.dataservice.Resource fromDatabase(android.content.Context,long)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: boolean isPending()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: java.lang.Long getEarliestStart()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: java.lang.Long getLatestEnd()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: com.morphoss.acal.acaltime.AcalDateTime getLastModified()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: void setPending(boolean)>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.Resource: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.dataservice.TodoInstance: void <init>(com.morphoss.acal.davacal.VTodo,long,long,com.morphoss.acal.davacal.RecurrenceId)>
     [java] Instrumenting <com.morphoss.acal.dataservice.TodoInstance: com.morphoss.acal.acaltime.AcalDateTime getDue()>
     [java] Instrumenting <com.morphoss.acal.dataservice.TodoInstance: com.morphoss.acal.acaltime.AcalDateTime getCompleted()>
     [java] Instrumenting <com.morphoss.acal.dataservice.TodoInstance: int getPercentComplete()>
     [java] Instrumenting <com.morphoss.acal.dataservice.TodoInstance: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.dataservice.TodoInstance: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$1: com.morphoss.acal.davacal.AcalAlarm createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$1: com.morphoss.acal.davacal.AcalAlarm[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$1: java.lang.Object[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$1: java.lang.Object createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$ActionType: com.morphoss.acal.davacal.AcalAlarm$ActionType[] values()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$ActionType: com.morphoss.acal.davacal.AcalAlarm$ActionType valueOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$ActionType: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$ActionType: com.morphoss.acal.davacal.AcalAlarm$ActionType fromString(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$ActionType: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$ActionType: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$RelateWith: com.morphoss.acal.davacal.AcalAlarm$RelateWith[] values()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$RelateWith: com.morphoss.acal.davacal.AcalAlarm$RelateWith valueOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$RelateWith: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$RelateWith: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm$RelateWith: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: boolean equals(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: void <init>(com.morphoss.acal.davacal.AcalAlarm$RelateWith,java.lang.String,com.morphoss.acal.acaltime.AcalDuration,com.morphoss.acal.davacal.AcalAlarm$ActionType,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: void <init>(com.morphoss.acal.davacal.VAlarm,com.morphoss.acal.davacal.Masterable,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: com.morphoss.acal.davacal.VAlarm getVAlarm(com.morphoss.acal.davacal.Masterable)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: int compareTo(com.morphoss.acal.davacal.AcalAlarm)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: int describeContents()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: void writeToParcel(android.os.Parcel,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: void <init>(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: long nextAlarmTime()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: java.lang.String prettyTimeToFire()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: java.lang.String toPrettyString()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: void snooze(com.morphoss.acal.acaltime.AcalDuration)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: void setEvent(com.morphoss.acal.dataservice.EventInstance)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: com.morphoss.acal.dataservice.EventInstance getEvent()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: boolean isSnooze()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: com.morphoss.acal.acaltime.AcalDateTime getNextTimeToFire()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: void setToLocalTime()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: int compareTo(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalAlarm: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: com.morphoss.acal.davacal.AcalProperty fromString(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: int findNextUnescaped(char,int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: void <init>(java.lang.String,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: void <init>(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: void <init>(com.morphoss.acal.davacal.PropertyName,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: void setParam(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: void removeParam(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: void rebuildParamsBlob()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: void populateParams()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: void destroyParams()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: java.lang.String getName()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: java.lang.String getValue()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: java.lang.String getParam(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: java.util.Map getParams()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: java.util.Set getParamNames()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: java.lang.String toRfcString()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: java.lang.String rfc5545Wrap(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.AcalProperty: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.InvalidCalendarActionException: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.InvalidCalendarActionException: void <init>()>
     [java] Instrumenting <com.morphoss.acal.davacal.InvalidCalendarActionException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.InvalidCalendarActionException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.InvalidCalendarComponentException: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.InvalidCalendarComponentException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.InvalidCalendarComponentException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void <init>(com.morphoss.acal.davacal.VComponent$ComponentParts,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void <init>(java.lang.String,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void <init>(java.lang.String,com.morphoss.acal.dataservice.CalendarInstance)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: com.morphoss.acal.davacal.Masterable fromCalendarInstance(com.morphoss.acal.dataservice.CalendarInstance)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: com.morphoss.acal.davacal.VCalendar getTopParent()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: com.morphoss.acal.acaltime.AcalDuration getDuration()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: com.morphoss.acal.acaltime.AcalDateTime getEnd()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: com.morphoss.acal.acaltime.AcalDateTime getStart()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: com.morphoss.acal.davacal.RecurrenceId getRecurrenceId()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: java.util.ArrayList getAlarms()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void updateAlarmComponents(java.util.List)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void addAlarmTimes(java.util.List)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: java.lang.String getLocation()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: java.lang.String getSummary()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: java.lang.String getRRule()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void setSummary(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void setLocation(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void setDescription(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void setRepetition(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void setStart(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void setEnd(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void setDuration(com.morphoss.acal.acaltime.AcalDuration)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: java.lang.String getUID()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: java.lang.String getStatus()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: java.lang.String getEffectiveType()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void setToRecurrence(com.morphoss.acal.davacal.RecurrenceId)>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: boolean isMasterInstance()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: com.morphoss.acal.davacal.VComponent getTopParent()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.Masterable: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.PropertyName: com.morphoss.acal.davacal.PropertyName[] values()>
     [java] Instrumenting <com.morphoss.acal.davacal.PropertyName: com.morphoss.acal.davacal.PropertyName valueOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.PropertyName: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.PropertyName: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.davacal.PropertyName: com.morphoss.acal.davacal.PropertyName arbitrary(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.PropertyName: com.morphoss.acal.davacal.PropertyName[] localisableDateProperties()>
     [java] Instrumenting <com.morphoss.acal.davacal.PropertyName: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.PropertyName: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId$VComponentComparatorByRecurrenceId: void <init>()>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId$VComponentComparatorByRecurrenceId: int compare(com.morphoss.acal.davacal.VComponent,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId$VComponentComparatorByRecurrenceId: int compare(java.lang.Object,java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId$VComponentComparatorByRecurrenceId: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId$VComponentComparatorByRecurrenceId: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: void <init>(java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: void <init>(com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: boolean getThisAndFuture()>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: void setThisAndFuture(boolean)>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: com.morphoss.acal.davacal.RecurrenceId fromString(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: int compareTo(com.morphoss.acal.davacal.RecurrenceId)>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: java.util.Comparator getVComponentComparatorByRecurrenceId()>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: boolean equals(com.morphoss.acal.davacal.RecurrenceId)>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: boolean overrides(com.morphoss.acal.davacal.RecurrenceId)>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: boolean isThisAndFuture()>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: int compareTo(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.RecurrenceId: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.UnrecognizedTimeZoneException: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.UnrecognizedTimeZoneException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.UnrecognizedTimeZoneException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VAlarm: void <init>(com.morphoss.acal.davacal.VComponent$ComponentParts,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VAlarm: void <init>(com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VAlarm: java.lang.String toPrettyString()>
     [java] Instrumenting <com.morphoss.acal.davacal.VAlarm: java.lang.String getEffectiveType()>
     [java] Instrumenting <com.morphoss.acal.davacal.VAlarm: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VAlarm: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar$1: com.morphoss.acal.davacal.VCalendar createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar$1: com.morphoss.acal.davacal.VCalendar[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar$1: java.lang.Object[] newArray(int)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar$1: java.lang.Object createFromParcel(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: void <init>(com.morphoss.acal.davacal.VComponent$ComponentParts,long,long,java.lang.Long,java.lang.Long,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: void <init>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: com.morphoss.acal.davacal.VCalendar clone()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: java.lang.String applyEventAction(com.morphoss.acal.dataservice.CalendarInstance,int,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: java.lang.String doEdit(com.morphoss.acal.dataservice.CalendarInstance,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: java.lang.String doDelete(com.morphoss.acal.dataservice.CalendarInstance,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: void updateTimeZones()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: void checkRepeatRule()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: boolean appendAlarmInstancesBetween(java.util.ArrayList,com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: boolean appendCacheEventInstancesBetween(java.util.List,com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: com.morphoss.acal.davacal.Masterable getMasterChild()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: com.morphoss.acal.acaltime.AcalDateTime getRangeEnd()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: java.lang.String getEffectiveType()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: boolean masterHasOverrides()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: com.morphoss.acal.davacal.Masterable getChildFromRecurrenceId(com.morphoss.acal.davacal.RecurrenceId)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: java.lang.String checkKnownAliases(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: java.lang.String staticGetOlsonName(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: java.lang.String getOlsonName(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: boolean hasAlarm()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: void <init>(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: com.morphoss.acal.acaltime.AcalDateRange getInstancesRange()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: java.lang.Object clone()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendar: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendarCreationException: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendarCreationException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCalendarCreationException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCard: void <init>(com.morphoss.acal.davacal.VComponent$ComponentParts,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VCard: java.lang.String getEffectiveType()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCard: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VCard: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent$ComponentParts: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent$ComponentParts: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent$ComponentParts: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent$PartInfo: void <init>(java.lang.String,int,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent$PartInfo: java.lang.String getComponent(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent$PartInfo: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent$PartInfo: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void <init>(com.morphoss.acal.davacal.VComponent$ComponentParts,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void <init>(java.lang.String,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: com.morphoss.acal.davacal.VComponent createComponentFromBlob(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: com.morphoss.acal.davacal.VComponent createComponentFromResource(com.morphoss.acal.dataservice.Resource)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: int size()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: java.util.List getChildren()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: com.morphoss.acal.davacal.VComponent getTopParent()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void setPersistentOn()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void setPersistentOff()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void setEditable()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: java.lang.String getName()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: java.lang.String getOriginalBlob()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: com.morphoss.acal.davacal.AcalProperty getProperty(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: com.morphoss.acal.davacal.AcalProperty getProperty(com.morphoss.acal.davacal.PropertyName)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: java.util.Map getProperties()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: com.morphoss.acal.davacal.AcalProperty[] getAllProperties()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: boolean containsProperty(com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: boolean containsPropertyKey(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: boolean isPersistenceOn()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: java.lang.String buildContent()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: java.lang.String safePropertyValue(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: java.lang.String safePropertyValue(com.morphoss.acal.davacal.PropertyName)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void populateChildren()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void destroyChildren()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void populateProperties()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void destroyProperties()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: java.lang.String getCurrentBlob()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: boolean addChild(com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: boolean removeChild(com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: com.morphoss.acal.davacal.AcalProperty addProperty(com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: com.morphoss.acal.davacal.AcalProperty removeProperty(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: com.morphoss.acal.davacal.AcalProperty setUniqueProperty(com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void removeProperties(com.morphoss.acal.davacal.PropertyName[])>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void <init>(android.os.Parcel)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void writeToParcel(android.os.Parcel,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: int describeContents()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: java.util.regex.Pattern access$000()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: java.util.regex.Pattern access$100()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponent: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponentCreationException: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponentCreationException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VComponentCreationException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VEvent: void <init>(com.morphoss.acal.davacal.VComponent$ComponentParts,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VEvent: void <init>(com.morphoss.acal.davacal.VCalendar)>
     [java] Instrumenting <com.morphoss.acal.davacal.VEvent: void <init>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VEvent: void <init>(com.morphoss.acal.dataservice.EventInstance)>
     [java] Instrumenting <com.morphoss.acal.davacal.VEvent: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VEvent: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VGenericComponent: void <init>(com.morphoss.acal.davacal.VComponent$ComponentParts,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VGenericComponent: java.lang.String getEffectiveType()>
     [java] Instrumenting <com.morphoss.acal.davacal.VGenericComponent: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VGenericComponent: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VJournal: void <init>(com.morphoss.acal.davacal.VComponent$ComponentParts,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VJournal: void <init>(com.morphoss.acal.davacal.VCalendar)>
     [java] Instrumenting <com.morphoss.acal.davacal.VJournal: void <init>(com.morphoss.acal.dataservice.JournalInstance)>
     [java] Instrumenting <com.morphoss.acal.davacal.VJournal: void <init>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VJournal: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VJournal: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: void <init>(com.morphoss.acal.davacal.VComponent$ComponentParts,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: java.lang.String getTZID()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: java.util.TimeZone getTZ()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: boolean guessOlsonTimeZone()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: boolean tryTz(com.morphoss.acal.davacal.AcalProperty)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: java.lang.String getOlsonFromMsID()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: java.lang.String[] getMatchingZones()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: java.lang.String getZoneDefinition(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: java.lang.String getEffectiveType()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTimezone: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo$Status: com.morphoss.acal.davacal.VTodo$Status[] values()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo$Status: com.morphoss.acal.davacal.VTodo$Status valueOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo$Status: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo$Status: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo$Status: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo$Status: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: void <init>(com.morphoss.acal.davacal.VComponent$ComponentParts,com.morphoss.acal.davacal.VComponent)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: void <init>(com.morphoss.acal.davacal.VCalendar)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: void <init>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: com.morphoss.acal.acaltime.AcalDateTime getDue()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: void setDue(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: com.morphoss.acal.acaltime.AcalDateTime getCompleted()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: void setCompleted(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: int getPercentComplete()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: void setPercentComplete(int)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: void setStatus(com.morphoss.acal.davacal.VTodo$Status)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: void <init>(com.morphoss.acal.dataservice.TodoInstance)>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.VTodo: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.YouMustSurroundThisMethodInTryCatchOrIllEatYouException: void <init>()>
     [java] Instrumenting <com.morphoss.acal.davacal.YouMustSurroundThisMethodInTryCatchOrIllEatYouException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.YouMustSurroundThisMethodInTryCatchOrIllEatYouException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.davacal.ZoneData: void <init>()>
     [java] Instrumenting <com.morphoss.acal.davacal.ZoneData: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.davacal.ZoneData: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.desktop.ShowUpcomingRowLayout$BackgroundShape: void <init>(com.morphoss.acal.desktop.ShowUpcomingRowLayout,int[],int)>
     [java] Instrumenting <com.morphoss.acal.desktop.ShowUpcomingRowLayout$BackgroundShape: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.desktop.ShowUpcomingRowLayout$BackgroundShape: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.desktop.ShowUpcomingRowLayout: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.desktop.ShowUpcomingRowLayout: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.desktop.ShowUpcomingRowLayout: android.graphics.Bitmap setData(int,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.desktop.ShowUpcomingRowLayout: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.desktop.ShowUpcomingRowLayout: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: void <init>()>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: java.lang.String getType(android.net.Uri)>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: boolean onCreate()>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: android.content.ContentValues getRow(long,android.content.ContentResolver)>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: android.content.ContentValues[] getCollections(android.content.ContentResolver,short)>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: boolean collectionEnabled(boolean,int,android.content.ContentResolver)>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.providers.DavCollections: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.providers.PathSets: void <init>()>
     [java] Instrumenting <com.morphoss.acal.providers.PathSets: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.providers.PathSets: java.lang.String getType(android.net.Uri)>
     [java] Instrumenting <com.morphoss.acal.providers.PathSets: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.providers.PathSets: boolean onCreate()>
     [java] Instrumenting <com.morphoss.acal.providers.PathSets: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.providers.PathSets: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.providers.PathSets: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.providers.PathSets: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: void <init>()>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: java.lang.String getType(android.net.Uri)>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: boolean onCreate()>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: void deleteServer(android.content.Context,int)>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: android.content.ContentValues cloneValidColumns(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: android.content.ContentValues getRow(int,android.content.ContentResolver)>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.providers.Servers: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: void <init>()>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: boolean onCreate()>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: java.lang.String getType(android.net.Uri)>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: java.lang.String[] buildAliasList(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: java.util.Map buildNamesMap(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: java.util.HashSet getAliasesFor(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: java.util.HashSet getNamesFor(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: void updateAliasSet(java.lang.String,java.lang.String[],android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: void updateNameSet(java.lang.String,java.util.Map,android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.providers.Timezones: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.receivers.StartUpIntentReceiver: void <init>()>
     [java] Instrumenting <com.morphoss.acal.receivers.StartUpIntentReceiver: void onReceive(android.content.Context,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.receivers.StartUpIntentReceiver: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.receivers.StartUpIntentReceiver: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.receivers.TimezoneChangedReceiver: void <init>()>
     [java] Instrumenting <com.morphoss.acal.receivers.TimezoneChangedReceiver: void onReceive(android.content.Context,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.receivers.TimezoneChangedReceiver: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.receivers.TimezoneChangedReceiver: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.receivers.iMIPReceiver: void <init>()>
     [java] Instrumenting <com.morphoss.acal.receivers.iMIPReceiver: void onReceive(android.content.Context,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.receivers.iMIPReceiver: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.receivers.iMIPReceiver: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation: android.os.Bundle confirmCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation: android.os.Bundle editProperties(android.accounts.AccountAuthenticatorResponse,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation: android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation: java.lang.String getAuthTokenLabel(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation: android.os.Bundle hasFeatures(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation: android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator: android.os.IBinder onBind(android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator: com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation getAuthenticator()>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.AcalAuthenticator: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.AddressbookToContacts: void <init>(int)>
     [java] Instrumenting <com.morphoss.acal.service.AddressbookToContacts: void run(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.AddressbookToContacts: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.service.AddressbookToContacts: android.accounts.Account getAndroidAccount()>
     [java] Instrumenting <com.morphoss.acal.service.AddressbookToContacts: void updateContactsFromAddressbook()>
     [java] Instrumenting <com.morphoss.acal.service.AddressbookToContacts: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.AddressbookToContacts: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService$SyncAdapterImpl: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService$SyncAdapterImpl: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService$SyncAdapterImpl: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService: android.os.IBinder onBind(android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService: com.morphoss.acal.service.ContactsSyncAdapterService$SyncAdapterImpl getSyncAdapter()>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.ContactsSyncAdapterService: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.DebugDatabase: void <init>(int)>
     [java] Instrumenting <com.morphoss.acal.service.DebugDatabase: void run(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.DebugDatabase: void revertDatabase()>
     [java] Instrumenting <com.morphoss.acal.service.DebugDatabase: void saveDatabase()>
     [java] Instrumenting <com.morphoss.acal.service.DebugDatabase: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.service.DebugDatabase: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.DebugDatabase: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetDiscovery: void <init>(int)>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetDiscovery: void run(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetDiscovery: void discoverHomeSetPaths()>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetDiscovery: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetDiscovery: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetDiscovery: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetsUpdate: void <init>(int)>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetsUpdate: void run(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetsUpdate: java.lang.String[] fetchHomeSets()>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetsUpdate: void updateCollectionsWithin(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetsUpdate: boolean updateCollectionFromPropstat(java.lang.String,com.morphoss.acal.xml.DavNode)>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetsUpdate: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetsUpdate: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.HomeSetsUpdate: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.InitialCollectionSync: void <init>(long)>
     [java] Instrumenting <com.morphoss.acal.service.InitialCollectionSync: void <init>(long,int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.InitialCollectionSync: void <init>(int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.InitialCollectionSync: void run(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.InitialCollectionSync: boolean equals(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.service.InitialCollectionSync: int hashCode()>
     [java] Instrumenting <com.morphoss.acal.service.InitialCollectionSync: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.service.InitialCollectionSync: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.InitialCollectionSync: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceJob: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceJob: int compareTo(com.morphoss.acal.service.ServiceJob)>
     [java] Instrumenting <com.morphoss.acal.service.ServiceJob: java.lang.String toString()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceJob: int compareTo(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.service.ServiceJob: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceJob: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: void <init>(android.os.IBinder)>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: android.os.IBinder asBinder()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: java.lang.String getInterfaceDescriptor()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: void revertDatabase()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: void saveDatabase()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: void fullResync()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: void discoverHomeSets()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: void updateCollectionsFromHomeSets()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: void homeSetDiscovery(int)>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: void syncCollectionNow(long)>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: void fullCollectionResync(long)>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub$Proxy: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub: com.morphoss.acal.service.ServiceRequest asInterface(android.os.IBinder)>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub: android.os.IBinder asBinder()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.ServiceRequest$Stub: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: void run(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: void process(com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager)>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: boolean connectivityAvailable()>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: void syncOneChange(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: java.lang.String mergeAsyncChanges(java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: java.lang.String getContentType(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: void invalidPendingChange(long,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: boolean updateSyncStatus()>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: boolean isProcessed()>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: void setProcessed()>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.SyncChangesToServer: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: void <init>(long)>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: void <init>(long,boolean)>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: void run(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: boolean collectionTagChanged()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: com.morphoss.acal.xml.DavNode doCalendarRequest(java.lang.String,int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: boolean doRegularSyncReport()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: boolean doRegularSyncPropfind()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: void syncMarkedResources(java.util.Map)>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: void syncWithGet(java.util.Map,java.lang.Object[])>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: boolean parseResponseNode(com.morphoss.acal.xml.DavNode,android.content.ContentValues,boolean)>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: void syncWithMultiget(java.util.Map,java.lang.Object[])>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: void calculateNextSchedulingTime()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: void scheduleNextInstance()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: boolean timeToRun()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: boolean getCollectionInfo()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: void updateCollectionToken(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: boolean equals(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: int hashCode()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.SyncCollectionContents: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs$WriteActions: com.morphoss.acal.service.SynchronisationJobs$WriteActions[] values()>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs$WriteActions: com.morphoss.acal.service.SynchronisationJobs$WriteActions valueOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs$WriteActions: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs$WriteActions: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs$WriteActions: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: void <init>(int)>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: void run(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: void refreshHomeSets()>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: void refreshCollectionsFromHomeSets()>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: void startCollectionSync(com.morphoss.acal.service.WorkerClass,android.content.Context,long)>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: boolean equals(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: int hashCode()>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: org.apache.http.Header[] getReportHeaders(int)>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.SynchronisationJobs: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.UpdateTimezones: void <init>(long)>
     [java] Instrumenting <com.morphoss.acal.service.UpdateTimezones: void run(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.UpdateTimezones: java.lang.String tzUrl(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.UpdateTimezones: void refreshTimezoneData()>
     [java] Instrumenting <com.morphoss.acal.service.UpdateTimezones: java.lang.String getTimeZone(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.UpdateTimezones: void scheduleNextUpdate()>
     [java] Instrumenting <com.morphoss.acal.service.UpdateTimezones: java.lang.String getDescription()>
     [java] Instrumenting <com.morphoss.acal.service.UpdateTimezones: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.UpdateTimezones: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass$WakeUpTimer: void <init>(com.morphoss.acal.service.WorkerClass)>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass$WakeUpTimer: void run()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass$WakeUpTimer: void <init>(com.morphoss.acal.service.WorkerClass,com.morphoss.acal.service.WorkerClass$1)>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass$WakeUpTimer: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass$WakeUpTimer: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void <init>(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: com.morphoss.acal.service.WorkerClass getInstance(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: com.morphoss.acal.service.WorkerClass getExistingInstance()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void addJob(com.morphoss.acal.service.ServiceJob)>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void addJobAndWake(com.morphoss.acal.service.ServiceJob)>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void addJobsAndWake(java.util.Collection)>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void addJobsAndWake(com.morphoss.acal.service.ServiceJob[])>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: com.morphoss.acal.service.ServiceJob getJob()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void resetWorker()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void killWorker()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void destroyTimers()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void run()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void setWakeupCall()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: android.os.ConditionVariable access$100(com.morphoss.acal.service.WorkerClass)>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.WorkerClass: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void <init>(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void discoverHomeSets()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void updateCollectionsFromHomeSets()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void fullResync()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void revertDatabase()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void saveDatabase()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void homeSetDiscovery(int)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void syncCollectionNow(long)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void fullCollectionResync(long)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void <init>(com.morphoss.acal.service.aCalService,com.morphoss.acal.service.aCalService$1)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService$ServiceRequestHandler: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: void onCreate()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: void startService()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: void onStart(android.content.Intent,int)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: int onStartCommand(android.content.Intent,int,int)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: void handleCommand(android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: void onDestroy()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: void scheduleServiceRestart()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: android.os.IBinder onBind(android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: void addWorkerJob(com.morphoss.acal.service.ServiceJob)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: java.lang.String getPreferenceString(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: void onHandleIntent(android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: com.morphoss.acal.service.WorkerClass access$100(com.morphoss.acal.service.aCalService)>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.aCalService: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool$1: int getMaxForRoute(org.apache.http.conn.routing.HttpRoute)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool: org.apache.http.params.HttpParams defaultHttpParams(int,int)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager getHttpConnectionPool()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool: void setTimeOuts(int,int)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool: java.lang.String getUserAgent()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalConnectionPool: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void enableDebugging()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: com.morphoss.acal.service.connector.AcalRequestor fromSimpleValues(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: com.morphoss.acal.service.connector.AcalRequestor fromServerValues(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void applyFromServer(android.content.ContentValues,boolean)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void initialise()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void applyToServerSettings(android.content.ContentValues)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: org.apache.http.Header[] getResponseHeaders()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: int getStatusCode()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void interpretUriString(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void interpretRequestedAuth(org.apache.http.Header)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.lang.String md5(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: org.apache.http.Header basicAuthHeader()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: org.apache.http.Header digestAuthHeader()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: org.apache.http.Header buildAuthHeader()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.lang.String getPath()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: int getAuthType()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void setPortProtocol(java.lang.Integer,java.lang.Integer)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void setPortProtocol(java.lang.Integer,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void setTimeOuts(int,int)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void setPath(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void setAuthType(java.lang.Integer)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void setAuthRequired()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.lang.String protocolHostPort()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.lang.String fullUrl()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.lang.String getAuthTypeName(int)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.lang.String getLocationHeader()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: org.apache.http.Header getAuthHeader()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.lang.String entityToString(org.apache.http.HttpEntity)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void logEntityLines(int,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void logRequest(int)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.io.InputStream logResponse(int)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.io.InputStream sendRequest(org.apache.http.Header[],java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.io.InputStream doRequest(java.lang.String,java.lang.String,org.apache.http.Header[],java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: com.morphoss.acal.xml.DavNode doXmlRequest(java.lang.String,java.lang.String,org.apache.http.Header[],java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.lang.String getHostName()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void setHostName(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: int getPort()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.lang.String getProtocol()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: java.lang.String getUserName()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: boolean protocolEquals(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.AcalRequestor: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: java.lang.String encodeString(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: java.lang.String encodeLines(byte[])>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: java.lang.String encodeLines(byte[],int,int,int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: char[] encode(byte[])>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: char[] encode(byte[],int)>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: char[] encode(byte[],int,int)>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: java.lang.String decodeString(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: byte[] decodeLines(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: byte[] decode(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: byte[] decode(char[])>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: byte[] decode(char[],int,int)>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.Base64Coder: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.connector.ConnectionFailedException: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.ConnectionFailedException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.ConnectionFailedException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.connector.ConnectorRequestError: void <init>(int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.ConnectorRequestError: int getStatus()>
     [java] Instrumenting <com.morphoss.acal.service.connector.ConnectorRequestError: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.ConnectorRequestError: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.connector.DavRequest: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.DavRequest: void <init>(java.lang.String,java.net.URI)>
     [java] Instrumenting <com.morphoss.acal.service.connector.DavRequest: void <init>(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.DavRequest: java.lang.String getMethod()>
     [java] Instrumenting <com.morphoss.acal.service.connector.DavRequest: void addHeaders(org.apache.http.Header[])>
     [java] Instrumenting <com.morphoss.acal.service.connector.DavRequest: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.DavRequest: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: void <init>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: javax.net.ssl.SSLContext createEasySSLContext()>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: javax.net.ssl.SSLContext getSSLContext()>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: java.net.Socket createSocket()>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: boolean isSecure(java.net.Socket)>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: boolean equals(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: int hashCode()>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasySSLSocketFactory: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasyX509TrustManager: void <init>(java.security.KeyStore)>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasyX509TrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasyX509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasyX509TrustManager: boolean checkLocallyApprovedCertificates(java.security.cert.X509Certificate[])>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasyX509TrustManager: void logCertificateException(java.lang.String,java.lang.Exception,java.security.cert.X509Certificate[])>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasyX509TrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasyX509TrustManager: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.EasyX509TrustManager: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.service.connector.SendRequestFailedException: void <init>(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.service.connector.SendRequestFailedException: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.service.connector.SendRequestFailedException: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: void initialise(com.morphoss.acal.acaltime.AcalDateTime,int)>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: void setSelectedDate(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: void onDraw(android.graphics.Canvas)>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: com.morphoss.acal.acaltime.AcalDateTime getClickedMonth(int,int)>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: void populateMonths()>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: void moveY(float)>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: com.morphoss.acal.acaltime.AcalDateTime getDisplayedDate()>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.views.CustomYearDrawable: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.views.MonthDayBox: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.views.MonthDayBox: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.views.MonthDayBox: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthDayBox: void draw(android.graphics.Canvas)>
     [java] Instrumenting <com.morphoss.acal.views.MonthDayBox: void setEvents(java.util.List)>
     [java] Instrumenting <com.morphoss.acal.views.MonthDayBox: void setToday()>
     [java] Instrumenting <com.morphoss.acal.views.MonthDayBox: void setSelected()>
     [java] Instrumenting <com.morphoss.acal.views.MonthDayBox: void setDate(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.views.MonthDayBox: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.views.MonthDayBox: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImage: void <init>(android.content.Context,int,int,int,int,com.morphoss.acal.views.MonthImageGenerator)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImage: void draw(android.graphics.Canvas,int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImage: int getHeight()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImage: int getMonth()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImage: int getYear()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImage: com.morphoss.acal.acaltime.AcalDateTime getDate()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImage: boolean isUnder(int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImage: com.morphoss.acal.views.MonthImage getMonthImage()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImage: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImage: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: void <init>(int,int,int,android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: android.graphics.Bitmap getYearHeader(int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: android.graphics.Bitmap getMonthHeader(int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: android.graphics.Bitmap getDayHeaders()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: android.graphics.Bitmap getDaySection(int,int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: void generateYearHeader(int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: void generateMonthHeader(int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: void generateDayHeaders()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: void generateDaySectionBitmap(int,int,int,int,int,int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: android.graphics.Bitmap getDayBitmap(boolean,int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: void generateShadowedDay(int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: void generateDay(int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: android.graphics.Bitmap genDay(android.widget.TextView,java.lang.String,int,int)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: void getFirstDay(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.views.MonthImageGenerator: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.views.YearHeader: void <init>(android.content.Context,int,int,com.morphoss.acal.views.MonthImageGenerator)>
     [java] Instrumenting <com.morphoss.acal.views.YearHeader: void draw(android.graphics.Canvas,int)>
     [java] Instrumenting <com.morphoss.acal.views.YearHeader: int getHeight()>
     [java] Instrumenting <com.morphoss.acal.views.YearHeader: int getMonth()>
     [java] Instrumenting <com.morphoss.acal.views.YearHeader: boolean isUnder(int)>
     [java] Instrumenting <com.morphoss.acal.views.YearHeader: com.morphoss.acal.views.MonthImage getMonthImage()>
     [java] Instrumenting <com.morphoss.acal.views.YearHeader: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.views.YearHeader: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: void <init>()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: com.morphoss.acal.acaltime.AcalDateTime getClickedMonth(int,int,int,int,int)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: void draw(android.graphics.Canvas,int,int)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: com.morphoss.acal.views.YearViewNode removeLastChild()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: void removeFirstChild()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: com.morphoss.acal.views.YearViewNode getLastChild()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: int removeFirstRow(int)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: void removeLastRow(int)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: void createInitialRow(int,int,int,android.content.Context,int,com.morphoss.acal.views.MonthImageGenerator,int)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: int insertNewRow(int,android.content.Context,int,com.morphoss.acal.views.MonthImageGenerator,int)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: void addRowToEnd(int,android.content.Context,int,com.morphoss.acal.views.MonthImageGenerator,int)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: com.morphoss.acal.views.YearViewNode getFirst()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: int getYearHeaderHeight()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: com.morphoss.acal.acaltime.AcalDateTime getDisplayedDate(int,int)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewLinkedList: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewNode: void <init>()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewNode: void setNext(com.morphoss.acal.views.YearViewNode)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewNode: com.morphoss.acal.acaltime.AcalDateTime getDisplayedDate(int,int,int)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewNode: com.morphoss.acal.views.YearViewNode getNext()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewNode: void draw(android.graphics.Canvas,int,int,int)>
     [java] Instrumenting <com.morphoss.acal.views.YearViewNode: int size()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewNode: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.views.YearViewNode: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.weekview.WVCacheObject: void <init>(com.morphoss.acal.database.cachemanager.CacheObject)>
     [java] Instrumenting <com.morphoss.acal.weekview.WVCacheObject: int calulateMaxWidth(int,int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WVCacheObject: int getMaxWidth()>
     [java] Instrumenting <com.morphoss.acal.weekview.WVCacheObject: int getActualWidth()>
     [java] Instrumenting <com.morphoss.acal.weekview.WVCacheObject: int getLastWidth()>
     [java] Instrumenting <com.morphoss.acal.weekview.WVCacheObject: void setLastWidth(int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WVCacheObject: boolean overlaps(com.morphoss.acal.weekview.WVCacheObject)>
     [java] Instrumenting <com.morphoss.acal.weekview.WVCacheObject: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WVCacheObject: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void <init>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void loadPrefs()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void refresh()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: int getScrollY()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: int getScrollX()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: float getSideVerticalOffset()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void move(float,float)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: com.morphoss.acal.weekview.WeekViewImageCache getImageCache()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: com.morphoss.acal.acaltime.AcalDateTime getCurrentDate()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void incrementCurrentDate()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void decrementCurrentDate()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void onPause()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void onResume()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean daysInitialized()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void startSettings()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void startTodoList()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean onCreateOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void setupButton(int,int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean onTouch(android.view.View,android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean onTrackballEvent(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean onDown(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean onContextItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void onLongPress(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void cancelLongPress()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void onShowPress(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean onSingleTapUp(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void onNumberSelected(int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: android.app.Dialog onCreateDialog(int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void onActivityResult(int,int,android.content.Intent)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: java.lang.String getStringPref(int,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: int getIntegerPref(int,int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: int getTimePref(int,int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache$1: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void <init>(android.content.Context,com.morphoss.acal.weekview.WeekViewDays)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void close()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void loadDataForRange(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void cacheChanged(com.morphoss.acal.database.cachemanager.CacheChangedEvent)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void cacheResponse(com.morphoss.acal.database.cachemanager.CacheResponse)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void copyNewDataToEventsInRqange(java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void copyNewDataToDayMap(android.util.SparseArray)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void updateWindowToIncludeConcreteRange(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void resetCache()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: com.morphoss.acal.database.CacheWindow getWindow()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: com.morphoss.acal.weekview.WeekViewTimeTable getMultiDayTimeTable(com.morphoss.acal.acaltime.AcalDateRange,long)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void calcMultiDayTimeTable(com.morphoss.acal.acaltime.AcalDateRange,long)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: com.morphoss.acal.weekview.WeekViewTimeTable getInDayTimeTable(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void calcInDayTimeTable(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void deleteRange(com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: com.morphoss.acal.weekview.WeekViewCache access$000()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void access$100(com.morphoss.acal.weekview.WeekViewCache,android.util.SparseArray)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void access$200(com.morphoss.acal.weekview.WeekViewCache,java.util.ArrayList)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void access$300(com.morphoss.acal.weekview.WeekViewCache,com.morphoss.acal.acaltime.AcalDateRange)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: com.morphoss.acal.weekview.WeekViewDays access$400(com.morphoss.acal.weekview.WeekViewCache)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewCache: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays$Rectangle: void <init>(com.morphoss.acal.weekview.WeekViewDays,int,int,int,int,com.morphoss.acal.weekview.WVCacheObject)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays$Rectangle: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays$Rectangle: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void construct(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: int getHeaderHeight()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: int checkScrollY(int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void dimensionsChanged()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: boolean isDimensionsCaclulated()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void calculateDimensions()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void calculateHeaderVars()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void draw(android.graphics.Canvas)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void drawBackground(android.graphics.Canvas,android.graphics.Paint)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void drawHeader(android.graphics.Canvas,android.graphics.Paint)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void drawGrid(android.graphics.Canvas,android.graphics.Paint)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void drawEvents(android.graphics.Canvas,android.graphics.Paint)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void drawBorder(android.graphics.Canvas,android.graphics.Paint)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void drawShading(android.graphics.Canvas,android.graphics.Paint)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void drawVertical(com.morphoss.acal.weekview.WVCacheObject,android.graphics.Canvas,int,int,long)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void drawHorizontal(com.morphoss.acal.weekview.WVCacheObject,android.graphics.Canvas,int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: java.util.ArrayList whatWasUnderneath(float,float)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void close()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void open()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: boolean onTouch(android.view.View,android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void cancelLongPress()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void requestRedraw()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewDays: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewHeader: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewHeader: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewHeader: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewHeader: void draw(android.graphics.Canvas)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewHeader: void drawBox(int,int,int,int,android.graphics.Canvas,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewHeader: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewHeader: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewImageCache: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewImageCache: void cacheDayBoxes(int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewImageCache: android.graphics.Bitmap getDayBox(int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewImageCache: android.graphics.Bitmap getSideBar(int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewImageCache: android.graphics.Bitmap getEventBitmap(long,java.lang.String,int,int,int,int,int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewImageCache: long getEventHash(long,int,int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewImageCache: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewImageCache: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewSideBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewSideBar: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewSideBar: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewSideBar: void draw(android.graphics.Canvas)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewSideBar: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewSideBar: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewTimeTable: void <init>(java.util.ArrayList,boolean)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewTimeTable: com.morphoss.acal.weekview.WVCacheObject[][] getTimetable()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewTimeTable: boolean equals(java.lang.Object)>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewTimeTable: void constructHorizontal()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewTimeTable: void constructVertical()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewTimeTable: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.weekview.WeekViewTimeTable: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.AcalViewFlipper: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.widget.AcalViewFlipper: void onDetachedFromWindow()>
     [java] Instrumenting <com.morphoss.acal.widget.AcalViewFlipper: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.AcalViewFlipper: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog$1: void <init>(com.morphoss.acal.widget.AlarmDialog)>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog$1: void onDateTimeSet(com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void <init>(android.content.Context,com.morphoss.acal.widget.AlarmDialog$AlarmSetListener,com.morphoss.acal.davacal.AcalAlarm,com.morphoss.acal.acaltime.AcalDateTime,com.morphoss.acal.acaltime.AcalDateTime,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void updateLayout()>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void toggleBeforeButton()>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void toggleRelatedButton()>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void absoluteDateTimeDialog()>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void onProgressChanged(android.widget.SeekBar,int,boolean)>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void onStartTrackingTouch(android.widget.SeekBar)>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void onStopTrackingTouch(android.widget.SeekBar)>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: com.morphoss.acal.acaltime.AcalDateTime access$002(com.morphoss.acal.widget.AlarmDialog,com.morphoss.acal.acaltime.AcalDateTime)>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void access$100(com.morphoss.acal.widget.AlarmDialog)>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.AlarmDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void <init>(android.content.Context,com.morphoss.acal.acaltime.AcalDateTime,boolean,boolean,boolean,com.morphoss.acal.widget.DateTimeSetListener)>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void populateLayout()>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void updateLayout()>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void toggleIsDate(boolean)>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void onCheckedChanged(android.widget.CompoundButton,boolean)>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void onNothingSelected(android.widget.AdapterView)>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void fixFocusAndApply()>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void onTimeChanged(android.widget.TimePicker,int,int)>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void onDateChanged(android.widget.DatePicker,int,int,int)>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.DateTimeDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$1: void <init>()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$1: java.lang.String toString(int)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$2: void <init>(com.morphoss.acal.widget.NumberPicker)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$2: void run()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$2: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$2: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberPickerInputFilter: void <init>(com.morphoss.acal.widget.NumberPicker)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberPickerInputFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberPickerInputFilter: void <init>(com.morphoss.acal.widget.NumberPicker,com.morphoss.acal.widget.NumberPicker$1)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberPickerInputFilter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberPickerInputFilter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberRangeKeyListener: void <init>(com.morphoss.acal.widget.NumberPicker)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberRangeKeyListener: int getInputType()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberRangeKeyListener: char[] getAcceptedChars()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberRangeKeyListener: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberRangeKeyListener: void <init>(com.morphoss.acal.widget.NumberPicker,com.morphoss.acal.widget.NumberPicker$1)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberRangeKeyListener: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker$NumberRangeKeyListener: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void setEnabled(boolean)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void setOnChangeListener(com.morphoss.acal.widget.NumberPicker$OnChangedListener)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void setFormatter(com.morphoss.acal.widget.NumberPicker$Formatter)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void setRange(int,int)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void setRange(int,int,java.lang.String[])>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void setCurrent(int)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void setSpeed(long)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: java.lang.String formatNumber(int)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void changeCurrent(int)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void notifyChange()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void updateView()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void validateCurrentView(java.lang.CharSequence)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void onFocusChange(android.view.View,boolean)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void validateInput(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: boolean onLongClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void cancelIncrement()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void cancelDecrement()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: int getSelectedPos(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: int getCurrent()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: boolean access$000(com.morphoss.acal.widget.NumberPicker)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: long access$100(com.morphoss.acal.widget.NumberPicker)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: android.os.Handler access$200(com.morphoss.acal.widget.NumberPicker)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: boolean access$300(com.morphoss.acal.widget.NumberPicker)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: java.lang.String[] access$600(com.morphoss.acal.widget.NumberPicker)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: android.text.InputFilter access$700(com.morphoss.acal.widget.NumberPicker)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: char[] access$800()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: int access$900(com.morphoss.acal.widget.NumberPicker,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPicker: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: void <init>(android.content.Context)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: void setNumberPicker(com.morphoss.acal.widget.NumberPicker)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: boolean onTouchEvent(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: boolean onTrackballEvent(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: boolean onKeyUp(int,android.view.KeyEvent)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: void cancelLongpressIfRequired(android.view.MotionEvent)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: void cancelLongpress()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerButton: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerDialog: void <init>(android.content.Context,com.morphoss.acal.widget.NumberSelectedListener,int,int,int)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerDialog: void onClick(android.view.View)>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerDialog: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.NumberPickerDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter$Zone: void <init>(com.morphoss.acal.widget.TimeZoneListAdapter,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter$Zone: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter$Zone: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: void <init>(android.content.Context,java.util.TimeZone,java.util.List)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: int getPositionOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: java.lang.String getTzId(int)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: int getCount()>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: java.lang.Object getItem(int)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: long getItemId(int)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: int getItemViewType(int)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: int getViewTypeCount()>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: boolean hasStableIds()>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: boolean isEmpty()>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.widget.TimeZoneListAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.xml.DavNode: void <init>()>
     [java] Instrumenting <com.morphoss.acal.xml.DavNode: java.util.List getNodesFromPath(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.DavNode: java.util.List findNodesFromPath(java.lang.String[],int)>
     [java] Instrumenting <com.morphoss.acal.xml.DavNode: java.lang.String getFirstNodeText(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.DavNode: java.lang.String segmentFromFirstHref(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.DavNode: void removeSubTree(com.morphoss.acal.xml.DavNode)>
     [java] Instrumenting <com.morphoss.acal.xml.DavNode: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.xml.DavNode: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD: com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD[] values()>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD: com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD valueOf(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory: void <init>()>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory: com.morphoss.acal.xml.DavNode buildTreeFromXml(com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD,java.io.InputStream)>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory: com.morphoss.acal.xml.DavNode buildTreeFromXml(com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.xml.DavParserFactory: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: void <init>()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: void <init>(org.w3c.dom.Node,java.lang.String,java.util.Map,com.morphoss.acal.xml.DomDavNode)>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: java.lang.String getText()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: java.lang.String getNameSpace()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: boolean hasAttribute(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: java.lang.String getAttribute(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: void addChild(com.morphoss.acal.xml.DomDavNode)>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: com.morphoss.acal.xml.DavNode getParent()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: java.util.List getChildren()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: java.lang.String getTagName()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: boolean removeChild(com.morphoss.acal.xml.DavNode)>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavNode: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavXmlTreeBuilder: void <init>(org.w3c.dom.Document)>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavXmlTreeBuilder: com.morphoss.acal.xml.DomDavNode getRoot()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavXmlTreeBuilder: com.morphoss.acal.xml.DomDavNode getSubTree(org.w3c.dom.Node,java.lang.String,java.util.Map,com.morphoss.acal.xml.DomDavNode)>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavXmlTreeBuilder: com.morphoss.acal.xml.DomDavNode buildTreeFromXml(java.io.InputStream)>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavXmlTreeBuilder: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.xml.DomDavXmlTreeBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$1: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$1: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$SaxDavHandler: void <init>(com.morphoss.acal.xml.SaxDavNode)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$SaxDavHandler: void startDocument()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$SaxDavHandler: void endDocument()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$SaxDavHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$SaxDavHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$SaxDavHandler: void characters(char[],int,int)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$SaxDavHandler: void <init>(com.morphoss.acal.xml.SaxDavNode,com.morphoss.acal.xml.SaxDavNode$1)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$SaxDavHandler: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode$SaxDavHandler: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: void <init>()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: void <init>(java.lang.String,org.xml.sax.Attributes,com.morphoss.acal.xml.SaxDavNode)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: com.morphoss.acal.xml.SaxDavNode$SaxDavHandler getHandler()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: java.util.List getChildren()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: java.lang.String getNameSpace()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: com.morphoss.acal.xml.DavNode getParent()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: java.lang.String getTagName()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: java.lang.String getText()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: boolean removeChild(com.morphoss.acal.xml.DavNode)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: java.lang.String getAttribute(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: boolean hasAttribute(java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: void <init>(java.lang.String,org.xml.sax.Attributes,com.morphoss.acal.xml.SaxDavNode,com.morphoss.acal.xml.SaxDavNode$1)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: java.lang.String access$200(com.morphoss.acal.xml.SaxDavNode)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: java.lang.String access$302(com.morphoss.acal.xml.SaxDavNode,java.lang.String)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: java.util.ArrayList access$400(com.morphoss.acal.xml.SaxDavNode)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavNode: boolean[][] $VRi()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavXmlTreeBuilder: void <init>()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavXmlTreeBuilder: com.morphoss.acal.xml.SaxDavNode getXmlTree(java.io.InputStream)>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavXmlTreeBuilder: void <clinit>()>
     [java] Instrumenting <com.morphoss.acal.xml.SaxDavXmlTreeBuilder: boolean[][] $VRi()>
     [java] Transforming acteve.symbolic.SymbolicOperations... 
     [java] Transforming com.morphoss.acal.AcalApplication... 
     [java] Transforming com.morphoss.acal.AcalDebug... 
     [java] Transforming com.morphoss.acal.AcalTheme... 
     [java] Transforming com.morphoss.acal.BuildConfig... 
     [java] Transforming com.morphoss.acal.CheckServerFailedError... 
     [java] Transforming com.morphoss.acal.Constants... 
     [java] Transforming com.morphoss.acal.EmmaInstrument.EmmaInstrumentation... 
     [java] Transforming com.morphoss.acal.EmmaInstrument.FinishListener... 
     [java] Transforming com.morphoss.acal.EmmaInstrument.InstrumentedActivity$CoverageCollector... 
     [java] Transforming com.morphoss.acal.EmmaInstrument.InstrumentedActivity... 
     [java] Transforming com.morphoss.acal.EmmaInstrument.SMSInstrumentedReceiver... 
     [java] Transforming com.morphoss.acal.HashCodeUtil... 
     [java] Transforming com.morphoss.acal.L10nUtil... 
     [java] Transforming com.morphoss.acal.PrefNames... 
     [java] Transforming com.morphoss.acal.R$anim... 
     [java] Transforming com.morphoss.acal.R$array... 
     [java] Transforming com.morphoss.acal.R$attr... 
     [java] Transforming com.morphoss.acal.R$color... 
     [java] Transforming com.morphoss.acal.R$dimen... 
     [java] Transforming com.morphoss.acal.R$drawable... 
     [java] Transforming com.morphoss.acal.R$id... 
     [java] Transforming com.morphoss.acal.R$layout... 
     [java] Transforming com.morphoss.acal.R$menu... 
     [java] Transforming com.morphoss.acal.R$raw... 
     [java] Transforming com.morphoss.acal.R$string... 
     [java] Transforming com.morphoss.acal.R$style... 
     [java] Transforming com.morphoss.acal.R$xml... 
     [java] Transforming com.morphoss.acal.R... 
     [java] Transforming com.morphoss.acal.ServiceManager$1... 
     [java] Transforming com.morphoss.acal.ServiceManager... 
     [java] Transforming com.morphoss.acal.ServiceManagerCallBack... 
     [java] Transforming com.morphoss.acal.StaticHelpers... 
     [java] Transforming com.morphoss.acal.TimePickerPreference... 
     [java] Transforming com.morphoss.acal.aCal... 
     [java] Transforming com.morphoss.acal.aCalNotes... 
     [java] Transforming com.morphoss.acal.aCalTasks... 
     [java] Transforming com.morphoss.acal.acaltime.AcalDateRange$1... 
     [java] Transforming com.morphoss.acal.acaltime.AcalDateRange... 
     [java] Transforming com.morphoss.acal.acaltime.AcalDateTime$1... 
     [java] Transforming com.morphoss.acal.acaltime.AcalDateTime$AcalDateTimeSorter... 
     [java] Transforming com.morphoss.acal.acaltime.AcalDateTime... 
     [java] Transforming com.morphoss.acal.acaltime.AcalDateTimeFormatter... 
     [java] Transforming com.morphoss.acal.acaltime.AcalDuration$1... 
     [java] Transforming com.morphoss.acal.acaltime.AcalDuration... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatDaily... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatMonthly... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatRule$LocalEventInstance... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatRule$RRuleFreqType... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatRule... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatRuleDay... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatRuleParser$1... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatRuleParser$PartType... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatRuleParser... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatWeekly... 
     [java] Transforming com.morphoss.acal.acaltime.AcalRepeatYearly... 
     [java] Transforming com.morphoss.acal.acaltime.UnrecognisedTimeZone... 
     [java] Transforming com.morphoss.acal.activity.AcalActivity... 
     [java] Transforming com.morphoss.acal.activity.AcalPreferences... 
     [java] Transforming com.morphoss.acal.activity.AlarmActivity$1... 
     [java] Transforming com.morphoss.acal.activity.AlarmActivity$MyPhoneStateListener... 
     [java] Transforming com.morphoss.acal.activity.AlarmActivity... 
     [java] Transforming com.morphoss.acal.activity.CollectionConfigList$1... 
     [java] Transforming com.morphoss.acal.activity.CollectionConfigList... 
     [java] Transforming com.morphoss.acal.activity.CollectionConfigListItemPreference... 
     [java] Transforming com.morphoss.acal.activity.CollectionConfiguration... 
     [java] Transforming com.morphoss.acal.activity.ColourPickerDialog$1... 
     [java] Transforming com.morphoss.acal.activity.ColourPickerDialog$2... 
     [java] Transforming com.morphoss.acal.activity.ColourPickerDialog$3... 
     [java] Transforming com.morphoss.acal.activity.ColourPickerDialog$4... 
     [java] Transforming com.morphoss.acal.activity.ColourPickerDialog$OnColourPickerListener... 
     [java] Transforming com.morphoss.acal.activity.ColourPickerDialog... 
     [java] Transforming com.morphoss.acal.activity.ColourPickerPreference$1... 
     [java] Transforming com.morphoss.acal.activity.ColourPickerPreference... 
     [java] Transforming com.morphoss.acal.activity.ColourPickerView... 
     [java] Transforming com.morphoss.acal.activity.DebugSettings$1... 
     [java] Transforming com.morphoss.acal.activity.DebugSettings$SettingsListClickListener... 
     [java] Transforming com.morphoss.acal.activity.DebugSettings... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$1... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$10... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$11... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$2... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$3... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$4... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$5... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$6... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$7... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$8... 
     [java] Transforming com.morphoss.acal.activity.EventEdit$9... 
     [java] Transforming com.morphoss.acal.activity.EventEdit... 
     [java] Transforming com.morphoss.acal.activity.EventListAdapter$1... 
     [java] Transforming com.morphoss.acal.activity.EventListAdapter$2... 
     [java] Transforming com.morphoss.acal.activity.EventListAdapter... 
     [java] Transforming com.morphoss.acal.activity.EventView$1... 
     [java] Transforming com.morphoss.acal.activity.EventView$2... 
     [java] Transforming com.morphoss.acal.activity.EventView... 
     [java] Transforming com.morphoss.acal.activity.JournalEdit$1... 
     [java] Transforming com.morphoss.acal.activity.JournalEdit$2... 
     [java] Transforming com.morphoss.acal.activity.JournalEdit$3... 
     [java] Transforming com.morphoss.acal.activity.JournalEdit$4... 
     [java] Transforming com.morphoss.acal.activity.JournalEdit$5... 
     [java] Transforming com.morphoss.acal.activity.JournalEdit$6... 
     [java] Transforming com.morphoss.acal.activity.JournalEdit$CollectionForArrayAdapter... 
     [java] Transforming com.morphoss.acal.activity.JournalEdit... 
     [java] Transforming com.morphoss.acal.activity.JournalListAdapter$1... 
     [java] Transforming com.morphoss.acal.activity.JournalListAdapter$2... 
     [java] Transforming com.morphoss.acal.activity.JournalListAdapter... 
     [java] Transforming com.morphoss.acal.activity.JournalListView$1... 
     [java] Transforming com.morphoss.acal.activity.JournalListView... 
     [java] Transforming com.morphoss.acal.activity.JournalView$1... 
     [java] Transforming com.morphoss.acal.activity.JournalView... 
     [java] Transforming com.morphoss.acal.activity.MonthAdapter$1... 
     [java] Transforming com.morphoss.acal.activity.MonthAdapter$MonthButtonListener... 
     [java] Transforming com.morphoss.acal.activity.MonthAdapter... 
     [java] Transforming com.morphoss.acal.activity.MonthView$1... 
     [java] Transforming com.morphoss.acal.activity.MonthView... 
     [java] Transforming com.morphoss.acal.activity.RREventEditedRequest$RREventEditedResponse... 
     [java] Transforming com.morphoss.acal.activity.RREventEditedRequest... 
     [java] Transforming com.morphoss.acal.activity.RRResourceEditedRequest$RRResourceEditedResponse... 
     [java] Transforming com.morphoss.acal.activity.RRResourceEditedRequest... 
     [java] Transforming com.morphoss.acal.activity.Settings$1... 
     [java] Transforming com.morphoss.acal.activity.Settings$SettingsListClickListener... 
     [java] Transforming com.morphoss.acal.activity.Settings... 
     [java] Transforming com.morphoss.acal.activity.ShowUpgradeChanges... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$1... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$10... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$11... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$12... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$13... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$2... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$3... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$4... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$5... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$6... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$7... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$8... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$9... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit$CollectionForArrayAdapter... 
     [java] Transforming com.morphoss.acal.activity.TodoEdit... 
     [java] Transforming com.morphoss.acal.activity.TodoListAdapter$1... 
     [java] Transforming com.morphoss.acal.activity.TodoListAdapter$2... 
     [java] Transforming com.morphoss.acal.activity.TodoListAdapter... 
     [java] Transforming com.morphoss.acal.activity.TodoListView$1... 
     [java] Transforming com.morphoss.acal.activity.TodoListView$2... 
     [java] Transforming com.morphoss.acal.activity.TodoListView... 
     [java] Transforming com.morphoss.acal.activity.TodoView$1... 
     [java] Transforming com.morphoss.acal.activity.TodoView$2... 
     [java] Transforming com.morphoss.acal.activity.TodoView... 
     [java] Transforming com.morphoss.acal.activity.YearView... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.AddServerList... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.AddServerListAdapter$1... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.AddServerListAdapter$2... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.AddServerListAdapter... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.AuthenticationFailure... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.CheckServerDialog$1... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.CheckServerDialog$2... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.CheckServerDialog$3... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests$TestsCancelledException... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.CheckServerDialog$RunAllTests... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.CheckServerDialog... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.NewServerConfiguration... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.ServerConfigData$ServerDataSaxParser... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.ServerConfigData... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.ServerConfigList$1... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListClickListener... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.ServerConfigList$ServerListCreateContextListener... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.ServerConfigList... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.ServerConfiguration... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.ServerConfigurator... 
     [java] Transforming com.morphoss.acal.activity.serverconfig.TestPort... 
     [java] Transforming com.morphoss.acal.contacts.VCardContact... 
     [java] Transforming com.morphoss.acal.database.AcalDBHelper... 
     [java] Transforming com.morphoss.acal.database.CacheModifier... 
     [java] Transforming com.morphoss.acal.database.CacheWindow... 
     [java] Transforming com.morphoss.acal.database.DMAction... 
     [java] Transforming com.morphoss.acal.database.DMDeleteQuery... 
     [java] Transforming com.morphoss.acal.database.DMInsertQuery... 
     [java] Transforming com.morphoss.acal.database.DMQueryBuilder$1... 
     [java] Transforming com.morphoss.acal.database.DMQueryBuilder... 
     [java] Transforming com.morphoss.acal.database.DMQueryList... 
     [java] Transforming com.morphoss.acal.database.DMUpdateQuery... 
     [java] Transforming com.morphoss.acal.database.DataChangeEvent$1... 
     [java] Transforming com.morphoss.acal.database.DataChangeEvent... 
     [java] Transforming com.morphoss.acal.database.DatabaseTableManager$QUERY_ACTION... 
     [java] Transforming com.morphoss.acal.database.DatabaseTableManager... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.ALARM_STATE... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.AlarmChangedEvent... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.AlarmChangedListener... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.AlarmProcessingException... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.AlarmQueueManager$1... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.AlarmQueueManager$AlarmTableManager... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.AlarmQueueManager... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.AlarmRow... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm$ARGetNextAlarmResult... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requests.ARGetNextDueAlarm... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requests.ARRebuildRequest... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requests.ARResourceChanged... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requests.ARUpdateAlarmState... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequest... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse$1... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requesttypes.AlarmRequestWithResponse... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponse... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requesttypes.AlarmResponseListener... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequest... 
     [java] Transforming com.morphoss.acal.database.alarmmanager.requesttypes.BlockingAlarmRequestWithResponse... 
     [java] Transforming com.morphoss.acal.database.cachemanager.BlockingCacheRequest... 
     [java] Transforming com.morphoss.acal.database.cachemanager.BlockingCacheRequestWithResponse... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheChangedEvent... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheChangedListener... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheManager$1... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheManager$CacheTableManager... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheManager... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheObject$1... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheObject... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheProcessingException... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheRequest... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheRequestWithResponse$1... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheRequestWithResponse... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheResponse... 
     [java] Transforming com.morphoss.acal.database.cachemanager.CacheResponseListener... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRAddRangeResult... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRClearCacheRequest... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects$CRGetNextNObjectsResponse... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRGetNextNObjects... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$1... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRJournalsByType$CRJournalsByTypeResponse... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRJournalsByType... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay$CREventsInMonthByDayResponse... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRObjectsInMonthByDay... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$1... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange$CRObjectsInRangeResponse... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRObjectsInRange... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$1... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow$CRObjectsInWindowResponse... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRObjectsInWindow... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRReduceRangeSize... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRResourceChanged... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRTodosByType$1... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRTodosByType$CRTodosByTypeResponse... 
     [java] Transforming com.morphoss.acal.database.cachemanager.requests.CRTodosByType... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.ResourceChangedEvent... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.ResourceChangedListener... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.ResourceManager$1... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.ResourceManager$ReadOnlyResourceTableManager... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.ResourceManager$ResourceTableManager... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.ResourceManager$WriteableResourceTableManager... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.ResourceManager... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.ResourceProcessingException... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.ResourceResponse... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.ResourceResponseListener... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm$RRAlarmRowToAcalAlarmResponse... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRAlarmRowToAcalAlarm... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRBlockAndProcessQueryList... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRDeleteByCollectionId... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$1... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange$RREventsInRangeResponse... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRGetCacheEventsInRange... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection$RRGetResourceInCollectionResult... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRGetResourceInCollection... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection$RRGetResourcesInCollectionResult... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRGetResourcesInCollection... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms$RRGetUpcomingAlarmsResult... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRGetUpcomingAlarms... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRInitialCollectionSync... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance$RRRequestInstanceResponse... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstance... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking$RRRequestInstanceBlockingResult... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRRequestInstanceBlocking... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap$RRSyncQueryMapResponse... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRSyncQueryMap... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requests.RRUpdateCollection... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequest... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requesttypes.BlockingResourceRequestWithResponse... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyBlockingRequestWithResponse... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequest... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse$1... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requesttypes.ReadOnlyResourceRequestWithResponse... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequest... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse$1... 
     [java] Transforming com.morphoss.acal.database.resourcesmanager.requesttypes.ResourceRequestWithResponse... 
     [java] Transforming com.morphoss.acal.dataservice.CalendarInstance... 
     [java] Transforming com.morphoss.acal.dataservice.Collection... 
     [java] Transforming com.morphoss.acal.dataservice.ComponentResource... 
     [java] Transforming com.morphoss.acal.dataservice.EventInstance$1... 
     [java] Transforming com.morphoss.acal.dataservice.EventInstance$BadlyConstructedEventException... 
     [java] Transforming com.morphoss.acal.dataservice.EventInstance$EVENT_BUILDER... 
     [java] Transforming com.morphoss.acal.dataservice.EventInstance... 
     [java] Transforming com.morphoss.acal.dataservice.JournalInstance... 
     [java] Transforming com.morphoss.acal.dataservice.MethodsRequired... 
     [java] Transforming com.morphoss.acal.dataservice.Resource... 
     [java] Transforming com.morphoss.acal.dataservice.TodoInstance... 
     [java] Transforming com.morphoss.acal.davacal.AcalAlarm$1... 
     [java] Transforming com.morphoss.acal.davacal.AcalAlarm$ActionType... 
     [java] Transforming com.morphoss.acal.davacal.AcalAlarm$RelateWith... 
     [java] Transforming com.morphoss.acal.davacal.AcalAlarm... 
     [java] Transforming com.morphoss.acal.davacal.AcalProperty... 
     [java] Transforming com.morphoss.acal.davacal.InvalidCalendarActionException... 
     [java] Transforming com.morphoss.acal.davacal.InvalidCalendarComponentException... 
     [java] Transforming com.morphoss.acal.davacal.Masterable... 
     [java] Transforming com.morphoss.acal.davacal.PropertyName... 
     [java] Transforming com.morphoss.acal.davacal.RecurrenceId$VComponentComparatorByRecurrenceId... 
     [java] Transforming com.morphoss.acal.davacal.RecurrenceId... 
     [java] Transforming com.morphoss.acal.davacal.UnrecognizedTimeZoneException... 
     [java] Transforming com.morphoss.acal.davacal.VAlarm... 
     [java] Transforming com.morphoss.acal.davacal.VCalendar$1... 
     [java] Transforming com.morphoss.acal.davacal.VCalendar... 
     [java] Transforming com.morphoss.acal.davacal.VCalendarCreationException... 
     [java] Transforming com.morphoss.acal.davacal.VCard... 
     [java] Transforming com.morphoss.acal.davacal.VComponent$ComponentParts... 
     [java] Transforming com.morphoss.acal.davacal.VComponent$PartInfo... 
     [java] Transforming com.morphoss.acal.davacal.VComponent... 
     [java] Transforming com.morphoss.acal.davacal.VComponentCreationException... 
     [java] Transforming com.morphoss.acal.davacal.VEvent... 
     [java] Transforming com.morphoss.acal.davacal.VGenericComponent... 
     [java] Transforming com.morphoss.acal.davacal.VJournal... 
     [java] Transforming com.morphoss.acal.davacal.VTimezone... 
     [java] Transforming com.morphoss.acal.davacal.VTodo$1... 
     [java] Transforming com.morphoss.acal.davacal.VTodo$Status... 
     [java] Transforming com.morphoss.acal.davacal.VTodo... 
     [java] Transforming com.morphoss.acal.davacal.YouMustSurroundThisMethodInTryCatchOrIllEatYouException... 
     [java] Transforming com.morphoss.acal.davacal.ZoneData... 
     [java] Transforming com.morphoss.acal.desktop.ShowUpcomingRowLayout$BackgroundShape... 
     [java] Transforming com.morphoss.acal.desktop.ShowUpcomingRowLayout... 
     [java] Transforming com.morphoss.acal.providers.DavCollections... 
     [java] Transforming com.morphoss.acal.providers.PathSets... 
     [java] Transforming com.morphoss.acal.providers.Servers... 
     [java] Transforming com.morphoss.acal.providers.Timezones... 
     [java] Transforming com.morphoss.acal.receivers.StartUpIntentReceiver... 
     [java] Transforming com.morphoss.acal.receivers.TimezoneChangedReceiver... 
     [java] Transforming com.morphoss.acal.receivers.iMIPReceiver... 
     [java] Transforming com.morphoss.acal.service.AcalAuthenticator$StaticAuthenticatorImplementation... 
     [java] Transforming com.morphoss.acal.service.AcalAuthenticator... 
     [java] Transforming com.morphoss.acal.service.AddressbookToContacts... 
     [java] Transforming com.morphoss.acal.service.ContactsSyncAdapterService$SyncAdapterImpl... 
     [java] Transforming com.morphoss.acal.service.ContactsSyncAdapterService... 
     [java] Transforming com.morphoss.acal.service.DebugDatabase... 
     [java] Transforming com.morphoss.acal.service.HomeSetDiscovery... 
     [java] Transforming com.morphoss.acal.service.HomeSetsUpdate... 
     [java] Transforming com.morphoss.acal.service.InitialCollectionSync... 
     [java] Transforming com.morphoss.acal.service.ServiceJob... 
     [java] Transforming com.morphoss.acal.service.ServiceRequest$Stub$Proxy... 
     [java] Transforming com.morphoss.acal.service.ServiceRequest$Stub... 
     [java] Transforming com.morphoss.acal.service.ServiceRequest... 
     [java] Transforming com.morphoss.acal.service.SyncChangesToServer... 
     [java] Transforming com.morphoss.acal.service.SyncCollectionContents... 
     [java] Transforming com.morphoss.acal.service.SynchronisationJobs$WriteActions... 
     [java] Transforming com.morphoss.acal.service.SynchronisationJobs... 
     [java] Transforming com.morphoss.acal.service.UpdateTimezones... 
     [java] Transforming com.morphoss.acal.service.WorkerClass$1... 
     [java] Transforming com.morphoss.acal.service.WorkerClass$WakeUpTimer... 
     [java] Transforming com.morphoss.acal.service.WorkerClass... 
     [java] Transforming com.morphoss.acal.service.aCalService$1... 
     [java] Transforming com.morphoss.acal.service.aCalService$ServiceRequestHandler... 
     [java] Transforming com.morphoss.acal.service.aCalService... 
     [java] Transforming com.morphoss.acal.service.connector.AcalConnectionPool$1... 
     [java] Transforming com.morphoss.acal.service.connector.AcalConnectionPool... 
     [java] Transforming com.morphoss.acal.service.connector.AcalRequestor... 
     [java] Transforming com.morphoss.acal.service.connector.Base64Coder... 
     [java] Transforming com.morphoss.acal.service.connector.ConnectionFailedException... 
     [java] Transforming com.morphoss.acal.service.connector.ConnectorRequestError... 
     [java] Transforming com.morphoss.acal.service.connector.DavRequest... 
     [java] Transforming com.morphoss.acal.service.connector.EasySSLSocketFactory... 
     [java] Transforming com.morphoss.acal.service.connector.EasyX509TrustManager... 
     [java] Transforming com.morphoss.acal.service.connector.SendRequestFailedException... 
     [java] Transforming com.morphoss.acal.views.CustomYearDrawable... 
     [java] Transforming com.morphoss.acal.views.MonthDayBox... 
     [java] Transforming com.morphoss.acal.views.MonthImage... 
     [java] Transforming com.morphoss.acal.views.MonthImageGenerator... 
     [java] Transforming com.morphoss.acal.views.YearHeader... 
     [java] Transforming com.morphoss.acal.views.YearViewLinkedList... 
     [java] Transforming com.morphoss.acal.views.YearViewNode... 
     [java] Transforming com.morphoss.acal.weekview.WVCacheObject... 
     [java] Transforming com.morphoss.acal.weekview.WeekViewActivity... 
     [java] Transforming com.morphoss.acal.weekview.WeekViewCache$1... 
     [java] Transforming com.morphoss.acal.weekview.WeekViewCache... 
     [java] Transforming com.morphoss.acal.weekview.WeekViewDays$Rectangle... 
     [java] Transforming com.morphoss.acal.weekview.WeekViewDays... 
     [java] Transforming com.morphoss.acal.weekview.WeekViewHeader... 
     [java] Transforming com.morphoss.acal.weekview.WeekViewImageCache... 
     [java] Transforming com.morphoss.acal.weekview.WeekViewSideBar... 
     [java] Transforming com.morphoss.acal.weekview.WeekViewTimeTable... 
     [java] Transforming com.morphoss.acal.widget.AcalViewFlipper... 
     [java] Transforming com.morphoss.acal.widget.AlarmDialog$1... 
     [java] Transforming com.morphoss.acal.widget.AlarmDialog$AlarmSetListener... 
     [java] Transforming com.morphoss.acal.widget.AlarmDialog... 
     [java] Transforming com.morphoss.acal.widget.DateTimeDialog... 
     [java] Transforming com.morphoss.acal.widget.DateTimeSetListener... 
     [java] Transforming com.morphoss.acal.widget.NumberPicker$1... 
     [java] Transforming com.morphoss.acal.widget.NumberPicker$2... 
     [java] Transforming com.morphoss.acal.widget.NumberPicker$Formatter... 
     [java] Transforming com.morphoss.acal.widget.NumberPicker$NumberPickerInputFilter... 
     [java] Transforming com.morphoss.acal.widget.NumberPicker$NumberRangeKeyListener... 
     [java] Transforming com.morphoss.acal.widget.NumberPicker$OnChangedListener... 
     [java] Transforming com.morphoss.acal.widget.NumberPicker... 
     [java] Transforming com.morphoss.acal.widget.NumberPickerButton... 
     [java] Transforming com.morphoss.acal.widget.NumberPickerDialog... 
     [java] Transforming com.morphoss.acal.widget.NumberSelectedListener... 
     [java] Transforming com.morphoss.acal.widget.TimeZoneListAdapter$Zone... 
     [java] Transforming com.morphoss.acal.widget.TimeZoneListAdapter... 
     [java] Transforming com.morphoss.acal.xml.DavNode... 
     [java] Transforming com.morphoss.acal.xml.DavParserFactory$1... 
     [java] Transforming com.morphoss.acal.xml.DavParserFactory$PARSEMETHOD... 
     [java] Transforming com.morphoss.acal.xml.DavParserFactory... 
     [java] Transforming com.morphoss.acal.xml.DomDavNode... 
     [java] Transforming com.morphoss.acal.xml.DomDavXmlTreeBuilder... 
     [java] Transforming com.morphoss.acal.xml.SaxDavNode$1... 
     [java] Transforming com.morphoss.acal.xml.SaxDavNode$SaxDavHandler... 
     [java] Transforming com.morphoss.acal.xml.SaxDavNode... 
     [java] Transforming com.morphoss.acal.xml.SaxDavXmlTreeBuilder... 
     [java] Writing to acteve/symbolic/SymbolicOperations.class
     [java] Writing to com/morphoss/acal/AcalApplication.class
     [java] Writing to com/morphoss/acal/AcalDebug.class
     [java] Writing to com/morphoss/acal/AcalTheme.class
     [java] Writing to com/morphoss/acal/BuildConfig.class
     [java] Writing to com/morphoss/acal/CheckServerFailedError.class
     [java] Writing to com/morphoss/acal/Constants.class
     [java] Writing to com/morphoss/acal/EmmaInstrument/EmmaInstrumentation.class
     [java] Writing to com/morphoss/acal/EmmaInstrument/FinishListener.class
     [java] Writing to com/morphoss/acal/EmmaInstrument/InstrumentedActivity$CoverageCollector.class
     [java] Writing to com/morphoss/acal/EmmaInstrument/InstrumentedActivity.class
     [java] Writing to com/morphoss/acal/EmmaInstrument/SMSInstrumentedReceiver.class
     [java] Writing to com/morphoss/acal/HashCodeUtil.class
     [java] Writing to com/morphoss/acal/L10nUtil.class
     [java] Writing to com/morphoss/acal/PrefNames.class
     [java] Writing to com/morphoss/acal/R$anim.class
     [java] Writing to com/morphoss/acal/R$array.class
     [java] Writing to com/morphoss/acal/R$attr.class
     [java] Writing to com/morphoss/acal/R$color.class
     [java] Writing to com/morphoss/acal/R$dimen.class
     [java] Writing to com/morphoss/acal/R$drawable.class
     [java] Writing to com/morphoss/acal/R$id.class
     [java] Writing to com/morphoss/acal/R$layout.class
     [java] Writing to com/morphoss/acal/R$menu.class
     [java] Writing to com/morphoss/acal/R$raw.class
     [java] Writing to com/morphoss/acal/R$string.class
     [java] Writing to com/morphoss/acal/R$style.class
     [java] Writing to com/morphoss/acal/R$xml.class
     [java] Writing to com/morphoss/acal/R.class
     [java] Writing to com/morphoss/acal/ServiceManager$1.class
     [java] Writing to com/morphoss/acal/ServiceManager.class
     [java] Writing to com/morphoss/acal/ServiceManagerCallBack.class
     [java] Writing to com/morphoss/acal/StaticHelpers.class
     [java] Writing to com/morphoss/acal/TimePickerPreference.class
     [java] Writing to com/morphoss/acal/aCal.class
     [java] Writing to com/morphoss/acal/aCalNotes.class
     [java] Writing to com/morphoss/acal/aCalTasks.class
     [java] Writing to com/morphoss/acal/acaltime/AcalDateRange$1.class
     [java] Writing to com/morphoss/acal/acaltime/AcalDateRange.class
     [java] Writing to com/morphoss/acal/acaltime/AcalDateTime$1.class
     [java] Writing to com/morphoss/acal/acaltime/AcalDateTime$AcalDateTimeSorter.class
     [java] Writing to com/morphoss/acal/acaltime/AcalDateTime.class
     [java] Writing to com/morphoss/acal/acaltime/AcalDateTimeFormatter.class
     [java] Writing to com/morphoss/acal/acaltime/AcalDuration$1.class
     [java] Writing to com/morphoss/acal/acaltime/AcalDuration.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatDaily.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatMonthly.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatRule$LocalEventInstance.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatRule$RRuleFreqType.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatRule.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatRuleDay.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatRuleParser$1.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatRuleParser$PartType.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatRuleParser.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatWeekly.class
     [java] Writing to com/morphoss/acal/acaltime/AcalRepeatYearly.class
     [java] Writing to com/morphoss/acal/acaltime/UnrecognisedTimeZone.class
     [java] Writing to com/morphoss/acal/activity/AcalActivity.class
     [java] Writing to com/morphoss/acal/activity/AcalPreferences.class
     [java] Writing to com/morphoss/acal/activity/AlarmActivity$1.class
     [java] Writing to com/morphoss/acal/activity/AlarmActivity$MyPhoneStateListener.class
     [java] Writing to com/morphoss/acal/activity/AlarmActivity.class
     [java] Writing to com/morphoss/acal/activity/CollectionConfigList$1.class
     [java] Writing to com/morphoss/acal/activity/CollectionConfigList.class
     [java] Writing to com/morphoss/acal/activity/CollectionConfigListItemPreference.class
     [java] Writing to com/morphoss/acal/activity/CollectionConfiguration.class
     [java] Writing to com/morphoss/acal/activity/ColourPickerDialog$1.class
     [java] Writing to com/morphoss/acal/activity/ColourPickerDialog$2.class
     [java] Writing to com/morphoss/acal/activity/ColourPickerDialog$3.class
     [java] Writing to com/morphoss/acal/activity/ColourPickerDialog$4.class
     [java] Writing to com/morphoss/acal/activity/ColourPickerDialog$OnColourPickerListener.class
     [java] Writing to com/morphoss/acal/activity/ColourPickerDialog.class
     [java] Writing to com/morphoss/acal/activity/ColourPickerPreference$1.class
     [java] Writing to com/morphoss/acal/activity/ColourPickerPreference.class
     [java] Writing to com/morphoss/acal/activity/ColourPickerView.class
     [java] Writing to com/morphoss/acal/activity/DebugSettings$1.class
     [java] Writing to com/morphoss/acal/activity/DebugSettings$SettingsListClickListener.class
     [java] Writing to com/morphoss/acal/activity/DebugSettings.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$1.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$10.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$11.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$2.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$3.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$4.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$5.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$6.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$7.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$8.class
     [java] Writing to com/morphoss/acal/activity/EventEdit$9.class
     [java] Writing to com/morphoss/acal/activity/EventEdit.class
     [java] Writing to com/morphoss/acal/activity/EventListAdapter$1.class
     [java] Writing to com/morphoss/acal/activity/EventListAdapter$2.class
     [java] Writing to com/morphoss/acal/activity/EventListAdapter.class
     [java] Writing to com/morphoss/acal/activity/EventView$1.class
     [java] Writing to com/morphoss/acal/activity/EventView$2.class
     [java] Writing to com/morphoss/acal/activity/EventView.class
     [java] Writing to com/morphoss/acal/activity/JournalEdit$1.class
     [java] Writing to com/morphoss/acal/activity/JournalEdit$2.class
     [java] Writing to com/morphoss/acal/activity/JournalEdit$3.class
     [java] Writing to com/morphoss/acal/activity/JournalEdit$4.class
     [java] Writing to com/morphoss/acal/activity/JournalEdit$5.class
     [java] Writing to com/morphoss/acal/activity/JournalEdit$6.class
     [java] Writing to com/morphoss/acal/activity/JournalEdit$CollectionForArrayAdapter.class
     [java] Writing to com/morphoss/acal/activity/JournalEdit.class
     [java] Writing to com/morphoss/acal/activity/JournalListAdapter$1.class
     [java] Writing to com/morphoss/acal/activity/JournalListAdapter$2.class
     [java] Writing to com/morphoss/acal/activity/JournalListAdapter.class
     [java] Writing to com/morphoss/acal/activity/JournalListView$1.class
     [java] Writing to com/morphoss/acal/activity/JournalListView.class
     [java] Writing to com/morphoss/acal/activity/JournalView$1.class
     [java] Writing to com/morphoss/acal/activity/JournalView.class
     [java] Writing to com/morphoss/acal/activity/MonthAdapter$1.class
     [java] Writing to com/morphoss/acal/activity/MonthAdapter$MonthButtonListener.class
     [java] Writing to com/morphoss/acal/activity/MonthAdapter.class
     [java] Writing to com/morphoss/acal/activity/MonthView$1.class
     [java] Writing to com/morphoss/acal/activity/MonthView.class
     [java] Writing to com/morphoss/acal/activity/RREventEditedRequest$RREventEditedResponse.class
     [java] Writing to com/morphoss/acal/activity/RREventEditedRequest.class
     [java] Writing to com/morphoss/acal/activity/RRResourceEditedRequest$RRResourceEditedResponse.class
     [java] Writing to com/morphoss/acal/activity/RRResourceEditedRequest.class
     [java] Writing to com/morphoss/acal/activity/Settings$1.class
     [java] Writing to com/morphoss/acal/activity/Settings$SettingsListClickListener.class
     [java] Writing to com/morphoss/acal/activity/Settings.class
     [java] Writing to com/morphoss/acal/activity/ShowUpgradeChanges.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$1.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$10.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$11.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$12.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$13.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$2.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$3.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$4.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$5.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$6.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$7.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$8.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$9.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit$CollectionForArrayAdapter.class
     [java] Writing to com/morphoss/acal/activity/TodoEdit.class
     [java] Writing to com/morphoss/acal/activity/TodoListAdapter$1.class
     [java] Writing to com/morphoss/acal/activity/TodoListAdapter$2.class
     [java] Writing to com/morphoss/acal/activity/TodoListAdapter.class
     [java] Writing to com/morphoss/acal/activity/TodoListView$1.class
     [java] Writing to com/morphoss/acal/activity/TodoListView$2.class
     [java] Writing to com/morphoss/acal/activity/TodoListView.class
     [java] Writing to com/morphoss/acal/activity/TodoView$1.class
     [java] Writing to com/morphoss/acal/activity/TodoView$2.class
     [java] Writing to com/morphoss/acal/activity/TodoView.class
     [java] Writing to com/morphoss/acal/activity/YearView.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/AddServerList.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/AddServerListAdapter$1.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/AddServerListAdapter$2.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/AddServerListAdapter.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/AuthenticationFailure.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/CheckServerDialog$1.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/CheckServerDialog$2.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/CheckServerDialog$3.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/CheckServerDialog$RunAllTests$TestsCancelledException.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/CheckServerDialog$RunAllTests.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/CheckServerDialog.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/NewServerConfiguration.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/ServerConfigData$ServerDataSaxParser.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/ServerConfigData.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/ServerConfigList$1.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/ServerConfigList$ServerListClickListener.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/ServerConfigList$ServerListCreateContextListener.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/ServerConfigList.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/ServerConfiguration.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/ServerConfigurator.class
     [java] Writing to com/morphoss/acal/activity/serverconfig/TestPort.class
     [java] Writing to com/morphoss/acal/contacts/VCardContact.class
     [java] Writing to com/morphoss/acal/database/AcalDBHelper.class
     [java] Writing to com/morphoss/acal/database/CacheModifier.class
     [java] Writing to com/morphoss/acal/database/CacheWindow.class
     [java] Writing to com/morphoss/acal/database/DMAction.class
     [java] Writing to com/morphoss/acal/database/DMDeleteQuery.class
     [java] Writing to com/morphoss/acal/database/DMInsertQuery.class
     [java] Writing to com/morphoss/acal/database/DMQueryBuilder$1.class
     [java] Writing to com/morphoss/acal/database/DMQueryBuilder.class
     [java] Writing to com/morphoss/acal/database/DMQueryList.class
     [java] Writing to com/morphoss/acal/database/DMUpdateQuery.class
     [java] Writing to com/morphoss/acal/database/DataChangeEvent$1.class
     [java] Writing to com/morphoss/acal/database/DataChangeEvent.class
     [java] Writing to com/morphoss/acal/database/DatabaseTableManager$QUERY_ACTION.class
     [java] Writing to com/morphoss/acal/database/DatabaseTableManager.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/ALARM_STATE.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/AlarmChangedEvent.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/AlarmChangedListener.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/AlarmProcessingException.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/AlarmQueueManager$1.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/AlarmQueueManager$AlarmTableManager.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/AlarmQueueManager.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/AlarmRow.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requests/ARGetNextDueAlarm$ARGetNextAlarmResult.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requests/ARGetNextDueAlarm.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requests/ARRebuildRequest.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requests/ARResourceChanged.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requests/ARUpdateAlarmState.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requesttypes/AlarmRequest.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requesttypes/AlarmRequestWithResponse$1.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requesttypes/AlarmRequestWithResponse.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requesttypes/AlarmResponse.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requesttypes/AlarmResponseListener.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requesttypes/BlockingAlarmRequest.class
     [java] Writing to com/morphoss/acal/database/alarmmanager/requesttypes/BlockingAlarmRequestWithResponse.class
     [java] Writing to com/morphoss/acal/database/cachemanager/BlockingCacheRequest.class
     [java] Writing to com/morphoss/acal/database/cachemanager/BlockingCacheRequestWithResponse.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheChangedEvent.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheChangedListener.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheManager$1.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheManager$CacheTableManager.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheManager.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheObject$1.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheObject.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheProcessingException.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheRequest.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheRequestWithResponse$1.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheRequestWithResponse.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheResponse.class
     [java] Writing to com/morphoss/acal/database/cachemanager/CacheResponseListener.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRAddRangeResult.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRClearCacheRequest.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRGetNextNObjects$CRGetNextNObjectsResponse.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRGetNextNObjects.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRJournalsByType$1.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRJournalsByType$CRJournalsByTypeResponse.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRJournalsByType.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRObjectsInMonthByDay$CREventsInMonthByDayResponse.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRObjectsInMonthByDay.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRObjectsInRange$1.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRObjectsInRange$CRObjectsInRangeResponse.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRObjectsInRange.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRObjectsInWindow$1.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRObjectsInWindow$CRObjectsInWindowResponse.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRObjectsInWindow.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRReduceRangeSize.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRResourceChanged.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRTodosByType$1.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRTodosByType$CRTodosByTypeResponse.class
     [java] Writing to com/morphoss/acal/database/cachemanager/requests/CRTodosByType.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/ResourceChangedEvent.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/ResourceChangedListener.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/ResourceManager$1.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/ResourceManager$ReadOnlyResourceTableManager.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/ResourceManager$ResourceTableManager.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/ResourceManager$WriteableResourceTableManager.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/ResourceManager.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/ResourceProcessingException.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/ResourceResponse.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/ResourceResponseListener.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRAlarmRowToAcalAlarm$RRAlarmRowToAcalAlarmResponse.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRAlarmRowToAcalAlarm.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRBlockAndProcessQueryList.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRDeleteByCollectionId.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRGetCacheEventsInRange$1.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRGetCacheEventsInRange$RREventsInRangeResponse.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRGetCacheEventsInRange.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRGetResourceInCollection$RRGetResourceInCollectionResult.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRGetResourceInCollection.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRGetResourcesInCollection$RRGetResourcesInCollectionResult.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRGetResourcesInCollection.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRGetUpcomingAlarms$RRGetUpcomingAlarmsResult.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRGetUpcomingAlarms.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRInitialCollectionSync.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRRequestInstance$RRRequestInstanceResponse.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRRequestInstance.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRRequestInstanceBlocking$RRRequestInstanceBlockingResult.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRRequestInstanceBlocking.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRSyncQueryMap$RRSyncQueryMapResponse.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRSyncQueryMap.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requests/RRUpdateCollection.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requesttypes/BlockingResourceRequest.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requesttypes/BlockingResourceRequestWithResponse.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requesttypes/ReadOnlyBlockingRequestWithResponse.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requesttypes/ReadOnlyResourceRequest.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requesttypes/ReadOnlyResourceRequestWithResponse$1.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requesttypes/ReadOnlyResourceRequestWithResponse.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requesttypes/ResourceRequest.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requesttypes/ResourceRequestWithResponse$1.class
     [java] Writing to com/morphoss/acal/database/resourcesmanager/requesttypes/ResourceRequestWithResponse.class
     [java] Writing to com/morphoss/acal/dataservice/CalendarInstance.class
     [java] Writing to com/morphoss/acal/dataservice/Collection.class
     [java] Writing to com/morphoss/acal/dataservice/ComponentResource.class
     [java] Writing to com/morphoss/acal/dataservice/EventInstance$1.class
     [java] Writing to com/morphoss/acal/dataservice/EventInstance$BadlyConstructedEventException.class
     [java] Writing to com/morphoss/acal/dataservice/EventInstance$EVENT_BUILDER.class
     [java] Writing to com/morphoss/acal/dataservice/EventInstance.class
     [java] Writing to com/morphoss/acal/dataservice/JournalInstance.class
     [java] Writing to com/morphoss/acal/dataservice/MethodsRequired.class
     [java] Writing to com/morphoss/acal/dataservice/Resource.class
     [java] Writing to com/morphoss/acal/dataservice/TodoInstance.class
     [java] Writing to com/morphoss/acal/davacal/AcalAlarm$1.class
     [java] Writing to com/morphoss/acal/davacal/AcalAlarm$ActionType.class
     [java] Writing to com/morphoss/acal/davacal/AcalAlarm$RelateWith.class
     [java] Writing to com/morphoss/acal/davacal/AcalAlarm.class
     [java] Writing to com/morphoss/acal/davacal/AcalProperty.class
     [java] Writing to com/morphoss/acal/davacal/InvalidCalendarActionException.class
     [java] Writing to com/morphoss/acal/davacal/InvalidCalendarComponentException.class
     [java] Writing to com/morphoss/acal/davacal/Masterable.class
     [java] Writing to com/morphoss/acal/davacal/PropertyName.class
     [java] Writing to com/morphoss/acal/davacal/RecurrenceId$VComponentComparatorByRecurrenceId.class
     [java] Writing to com/morphoss/acal/davacal/RecurrenceId.class
     [java] Writing to com/morphoss/acal/davacal/UnrecognizedTimeZoneException.class
     [java] Writing to com/morphoss/acal/davacal/VAlarm.class
     [java] Writing to com/morphoss/acal/davacal/VCalendar$1.class
     [java] Writing to com/morphoss/acal/davacal/VCalendar.class
     [java] Writing to com/morphoss/acal/davacal/VCalendarCreationException.class
     [java] Writing to com/morphoss/acal/davacal/VCard.class
     [java] Writing to com/morphoss/acal/davacal/VComponent$ComponentParts.class
     [java] Writing to com/morphoss/acal/davacal/VComponent$PartInfo.class
     [java] Writing to com/morphoss/acal/davacal/VComponent.class
     [java] Writing to com/morphoss/acal/davacal/VComponentCreationException.class
     [java] Writing to com/morphoss/acal/davacal/VEvent.class
     [java] Writing to com/morphoss/acal/davacal/VGenericComponent.class
     [java] Writing to com/morphoss/acal/davacal/VJournal.class
     [java] Writing to com/morphoss/acal/davacal/VTimezone.class
     [java] Writing to com/morphoss/acal/davacal/VTodo$1.class
     [java] Writing to com/morphoss/acal/davacal/VTodo$Status.class
     [java] Writing to com/morphoss/acal/davacal/VTodo.class
     [java] Writing to com/morphoss/acal/davacal/YouMustSurroundThisMethodInTryCatchOrIllEatYouException.class
     [java] Writing to com/morphoss/acal/davacal/ZoneData.class
     [java] Writing to com/morphoss/acal/desktop/ShowUpcomingRowLayout$BackgroundShape.class
     [java] Writing to com/morphoss/acal/desktop/ShowUpcomingRowLayout.class
     [java] Writing to com/morphoss/acal/providers/DavCollections.class
     [java] Writing to com/morphoss/acal/providers/PathSets.class
     [java] Writing to com/morphoss/acal/providers/Servers.class
     [java] Writing to com/morphoss/acal/providers/Timezones.class
     [java] Writing to com/morphoss/acal/receivers/StartUpIntentReceiver.class
     [java] Writing to com/morphoss/acal/receivers/TimezoneChangedReceiver.class
     [java] Writing to com/morphoss/acal/receivers/iMIPReceiver.class
     [java] Writing to com/morphoss/acal/service/AcalAuthenticator$StaticAuthenticatorImplementation.class
     [java] Writing to com/morphoss/acal/service/AcalAuthenticator.class
     [java] Writing to com/morphoss/acal/service/AddressbookToContacts.class
     [java] Writing to com/morphoss/acal/service/ContactsSyncAdapterService$SyncAdapterImpl.class
     [java] Writing to com/morphoss/acal/service/ContactsSyncAdapterService.class
     [java] Writing to com/morphoss/acal/service/DebugDatabase.class
     [java] Writing to com/morphoss/acal/service/HomeSetDiscovery.class
     [java] Writing to com/morphoss/acal/service/HomeSetsUpdate.class
     [java] Writing to com/morphoss/acal/service/InitialCollectionSync.class
     [java] Writing to com/morphoss/acal/service/ServiceJob.class
     [java] Writing to com/morphoss/acal/service/ServiceRequest$Stub$Proxy.class
     [java] Writing to com/morphoss/acal/service/ServiceRequest$Stub.class
     [java] Writing to com/morphoss/acal/service/ServiceRequest.class
     [java] Writing to com/morphoss/acal/service/SyncChangesToServer.class
     [java] Writing to com/morphoss/acal/service/SyncCollectionContents.class
     [java] Writing to com/morphoss/acal/service/SynchronisationJobs$WriteActions.class
     [java] Writing to com/morphoss/acal/service/SynchronisationJobs.class
     [java] Writing to com/morphoss/acal/service/UpdateTimezones.class
     [java] Writing to com/morphoss/acal/service/WorkerClass$1.class
     [java] Writing to com/morphoss/acal/service/WorkerClass$WakeUpTimer.class
     [java] Writing to com/morphoss/acal/service/WorkerClass.class
     [java] Writing to com/morphoss/acal/service/aCalService$1.class
     [java] Writing to com/morphoss/acal/service/aCalService$ServiceRequestHandler.class
     [java] Writing to com/morphoss/acal/service/aCalService.class
     [java] Writing to com/morphoss/acal/service/connector/AcalConnectionPool$1.class
     [java] Writing to com/morphoss/acal/service/connector/AcalConnectionPool.class
     [java] Writing to com/morphoss/acal/service/connector/AcalRequestor.class
     [java] Writing to com/morphoss/acal/service/connector/Base64Coder.class
     [java] Writing to com/morphoss/acal/service/connector/ConnectionFailedException.class
     [java] Writing to com/morphoss/acal/service/connector/ConnectorRequestError.class
     [java] Writing to com/morphoss/acal/service/connector/DavRequest.class
     [java] Writing to com/morphoss/acal/service/connector/EasySSLSocketFactory.class
     [java] Writing to com/morphoss/acal/service/connector/EasyX509TrustManager.class
     [java] Writing to com/morphoss/acal/service/connector/SendRequestFailedException.class
     [java] Writing to com/morphoss/acal/views/CustomYearDrawable.class
     [java] Writing to com/morphoss/acal/views/MonthDayBox.class
     [java] Writing to com/morphoss/acal/views/MonthImage.class
     [java] Writing to com/morphoss/acal/views/MonthImageGenerator.class
     [java] Writing to com/morphoss/acal/views/YearHeader.class
     [java] Writing to com/morphoss/acal/views/YearViewLinkedList.class
     [java] Writing to com/morphoss/acal/views/YearViewNode.class
     [java] Writing to com/morphoss/acal/weekview/WVCacheObject.class
     [java] Writing to com/morphoss/acal/weekview/WeekViewActivity.class
     [java] Writing to com/morphoss/acal/weekview/WeekViewCache$1.class
     [java] Writing to com/morphoss/acal/weekview/WeekViewCache.class
     [java] Writing to com/morphoss/acal/weekview/WeekViewDays$Rectangle.class
     [java] Writing to com/morphoss/acal/weekview/WeekViewDays.class
     [java] Writing to com/morphoss/acal/weekview/WeekViewHeader.class
     [java] Writing to com/morphoss/acal/weekview/WeekViewImageCache.class
     [java] Writing to com/morphoss/acal/weekview/WeekViewSideBar.class
     [java] Writing to com/morphoss/acal/weekview/WeekViewTimeTable.class
     [java] Writing to com/morphoss/acal/widget/AcalViewFlipper.class
     [java] Writing to com/morphoss/acal/widget/AlarmDialog$1.class
     [java] Writing to com/morphoss/acal/widget/AlarmDialog$AlarmSetListener.class
     [java] Writing to com/morphoss/acal/widget/AlarmDialog.class
     [java] Writing to com/morphoss/acal/widget/DateTimeDialog.class
     [java] Writing to com/morphoss/acal/widget/DateTimeSetListener.class
     [java] Writing to com/morphoss/acal/widget/NumberPicker$1.class
     [java] Writing to com/morphoss/acal/widget/NumberPicker$2.class
     [java] Writing to com/morphoss/acal/widget/NumberPicker$Formatter.class
     [java] Writing to com/morphoss/acal/widget/NumberPicker$NumberPickerInputFilter.class
     [java] Writing to com/morphoss/acal/widget/NumberPicker$NumberRangeKeyListener.class
     [java] Writing to com/morphoss/acal/widget/NumberPicker$OnChangedListener.class
     [java] Writing to com/morphoss/acal/widget/NumberPicker.class
     [java] Writing to com/morphoss/acal/widget/NumberPickerButton.class
     [java] Writing to com/morphoss/acal/widget/NumberPickerDialog.class
     [java] Writing to com/morphoss/acal/widget/NumberSelectedListener.class
     [java] Writing to com/morphoss/acal/widget/TimeZoneListAdapter$Zone.class
     [java] Writing to com/morphoss/acal/widget/TimeZoneListAdapter.class
     [java] Writing to com/morphoss/acal/xml/DavNode.class
     [java] Writing to com/morphoss/acal/xml/DavParserFactory$1.class
     [java] Writing to com/morphoss/acal/xml/DavParserFactory$PARSEMETHOD.class
     [java] Writing to com/morphoss/acal/xml/DavParserFactory.class
     [java] Writing to com/morphoss/acal/xml/DomDavNode.class
     [java] Writing to com/morphoss/acal/xml/DomDavXmlTreeBuilder.class
     [java] Writing to com/morphoss/acal/xml/SaxDavNode$1.class
     [java] Writing to com/morphoss/acal/xml/SaxDavNode$SaxDavHandler.class
     [java] Writing to com/morphoss/acal/xml/SaxDavNode.class
     [java] Writing to com/morphoss/acal/xml/SaxDavXmlTreeBuilder.class
     [java] Soot finished on Sun Nov 09 06:11:24 UTC 2014
     [java] Soot has run for 2 min. 17 sec.
     [java] original jar: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/original.jar
     [java] copy from original jar: com/morphoss/acal/desktop/ShowUpcomingWidgetProvider.class

-obfuscate:

-dex:
      [dex] input: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/instrumented.jar
      [dex] input: /home/vagrant/android-sdk-linux/tools/lib/emma_device.jar
      [dex] Pre-Dexing /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/a3t/instrumented.jar -> instrumented-b338901528982030c1991f565b8f8b4c.jar
      [dex] Using Pre-Dexed emma_device-e790229f52a04d2b195df6976ccc31d7.jar <- /home/vagrant/android-sdk-linux/tools/lib/emma_device.jar
      [dex] Found modified input file
      [dex] Converting compiled files and external libraries into /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/classes.dex...
       [dx] Merged dex A (410 defs/2453.4KiB) with dex B (297 defs/326.8KiB). Result is 707 defs/3420.9KiB. Took 1.9s

-crunch:
   [crunch] Crunching PNG Files in source dir: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/res
   [crunch] To destination dir: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/res
   [crunch] Crunched 0 PNG files to update cache

-package-resources:
     [aapt] No changed resources or assets. aCal.ap_ remains untouched

-package:
[apkbuilder] Found modified input file
[apkbuilder] Creating aCal-debug-unaligned.apk and signing it with a debug key...

-post-package:

-do-debug:
 [zipalign] Running zip align on final apk...
     [echo] Debug Package: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/aCal-debug.apk
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/build.prop
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/build.prop
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/build.prop
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.morphoss.acal_60_src/bin/build.prop

-post-build:

debug:

BUILD SUCCESSFUL
Total time: 3 minutes 21 seconds
