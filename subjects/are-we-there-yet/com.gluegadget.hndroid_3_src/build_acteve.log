Buildfile: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/build_acteve.xml

emma:

-set-mode-check:

-set-debug-files:

-check-env:
 [checkenv] Android SDK Tools Revision 23.0.2
 [checkenv] Installed at /home/vagrant/android-sdk-linux

-setup:
     [echo] Project Name: Main
  [gettype] Project Type: Self-Tested Application

-set-debug-mode:

-debug-obfuscation-check:

-pre-build:

-build-setup:
[getbuildtools] Using latest Build Tools: 20.0.0
     [echo] Resolving Build Target for Main...
[gettarget] Project Target:   Android 2.3.3
[gettarget] API level:        10
     [echo] ----------
     [echo] Creating output directories if needed...
    [mkdir] Created dir: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/rsObj
    [mkdir] Created dir: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/rsLibs
     [echo] ----------
     [echo] Resolving Dependencies for Main...
[dependency] Library dependencies:
[dependency] No Libraries
[dependency] 
[dependency] ------------------
[dependency] API<=15: Adding annotations.jar to the classpath.
     [echo] ----------
     [echo] Building Libraries with 'instrument'...
   [subant] No sub-builds to iterate on

-code-gen:
[mergemanifest] No changes in the AndroidManifest files.
     [echo] Handling aidl files...
     [aidl] No AIDL files to compile.
     [echo] ----------
     [echo] Handling RenderScript files...
     [echo] ----------
     [echo] Handling Resources...
     [aapt] Found new input file
     [aapt] Generating resource IDs...
     [echo] ----------
     [echo] Handling BuildConfig class...
[buildconfig] No need to generate new BuildConfig.

-pre-compile:

-compile:
    [javac] Compiling 1 source file to /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/classes
     [echo] Instrumenting classes from /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/classes...

-post-compile:
   [delete] Deleting: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t/original.jar
   [delete] Deleting: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t/instrumented.jar
      [jar] Building jar: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t/original.jar

instrument:
     [java] a3t.in.jars=/vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t/original.jar:/vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/libs/htmlcleaner-2.2.jar:/vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/libs/htmlspanner-0.2.jar
     [java] a3t.out.jar=/vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t/instrumented.jar
     [java] a3t.lib.jars=/home/vagrant/tools/acteve/jars/a3t_symbolic.jar:/home/vagrant/tools/acteve/jars/a3t_models.jar:/home/vagrant/android-sdk-linux/platforms/android-10/android.jar:/home/vagrant/tools/acteve/a3t_sdk/instrumentedframework.jar:/home/vagrant/tools/acteve/jars/a3t_stubs.jar:/home/vagrant/tools/acteve/jars/emma.jar
     [java] a3t.inputmeths.file=null
     [java] a3t.modelmeths.file=null
     [java] a3t.out.dir=/vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t
     [java] a3t.sdk.dir=/home/vagrant/tools/acteve/a3t_sdk (SDK if null)
     [java] a3t.rw.kind=ID_FIELD_WRITE
     [java] a3t.whiteflds.file=null
     [java] a3t.blackflds.file=null
     [java] a3t.whitemeths.file=null
     [java] a3t.instrflds.all=false
     [java] SHAUVIK config.inJars=/vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t/original.jar:/vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/libs/htmlcleaner-2.2.jar:/vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/libs/htmlspanner-0.2.jar
     [java] SHAUVIK config.libJars=/home/vagrant/tools/acteve/jars/a3t_symbolic.jar:/home/vagrant/tools/acteve/jars/a3t_models.jar:/home/vagrant/android-sdk-linux/platforms/android-10/android.jar:/home/vagrant/tools/acteve/a3t_sdk/instrumentedframework.jar:/home/vagrant/tools/acteve/jars/a3t_stubs.jar:/home/vagrant/tools/acteve/jars/emma.jar
     [java] Failed to load class: org.htmlcleaner.HtmlCleanerForAnt
     [java] couldn't find class: org.apache.tools.ant.Task (is your soot-class-path set properly?)
     [java] Failed to load class: org.htmlcleaner.HtmlNode
     [java] couldn't find class: org.apache.tools.ant.BuildException (is your soot-class-path set properly?)
     [java] Failed to load class: org.htmlcleaner.JDomSerializer
     [java] couldn't find class: org.jdom.DefaultJDOMFactory (is your soot-class-path set properly?)
     [java] Failed to load class: org.htmlcleaner.PrettyHtmlSerializer
     [java] couldn't find class: org.jdom.Document (is your soot-class-path set properly?)
     [java] Failed to load class: org.htmlcleaner.PrettyXmlSerializer
     [java] couldn't find class: org.jdom.Element (is your soot-class-path set properly?)
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_3;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_2, _sym_tmp_1;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_3 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         _sym_tmp_2 = interfaceinvoke _sym_tmp_3.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _neg()>();
     [java]         return _sym_tmp_2;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_4;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_3, _sym_tmp_1;
     [java]         int _sym_tmp_2;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_4 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         _sym_tmp_3 = interfaceinvoke _sym_tmp_4.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _cast(int)>(_sym_tmp_2);
     [java]         return _sym_tmp_3;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, java.lang.Object, java.lang.Object)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         java.lang.Object _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: java.lang.Object;
     [java]         _sym_tmp_4 := @parameter3: java.lang.Object;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, java.lang.Object, java.lang.Object)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         java.lang.Object _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: java.lang.Object;
     [java]         _sym_tmp_4 := @parameter3: java.lang.Object;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.LongExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.LongExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.LongExpression: acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int[], int, int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_6, _sym_tmp_5;
     [java]         int[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: int[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.IntegerArrayConstant: acteve.symbolic.array.IntegerArrayConstant get(int[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         int[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.IntegerArrayConstant: acteve.symbolic.array.IntegerArrayConstant get(int[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, short[], int, short)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         short _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         short[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: short[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: short;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.ShortArrayConstant: acteve.symbolic.array.ShortArrayConstant get(short[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, short[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         short[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: short[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.ShortArrayConstant: acteve.symbolic.array.ShortArrayConstant get(short[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, char[], int, char)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         char _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         char[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: char[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: char;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.CharArrayConstant: acteve.symbolic.array.CharArrayConstant get(char[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, char[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         char[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: char[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.CharArrayConstant: acteve.symbolic.array.CharArrayConstant get(char[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, byte[], int, byte)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         byte _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         byte[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: byte[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: byte;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.ByteArrayConstant: acteve.symbolic.array.ByteArrayConstant get(byte[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, byte[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         byte[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: byte[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.ByteArrayConstant: acteve.symbolic.array.ByteArrayConstant get(byte[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, boolean[], int, boolean)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         boolean _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         boolean[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: boolean[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: boolean;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.BooleanArrayConstant: acteve.symbolic.array.BooleanArrayConstant get(boolean[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, boolean[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         boolean[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: boolean[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.BooleanArrayConstant: acteve.symbolic.array.BooleanArrayConstant get(boolean[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long[], int, long)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         long[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: long[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.LongArrayConstant: acteve.symbolic.array.LongArrayConstant get(long[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.LongArrayConstant: acteve.symbolic.array.LongArrayConstant get(long[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float[], int, float)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         float[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: float[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.FloatArrayConstant: acteve.symbolic.array.FloatArrayConstant get(float[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         float[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.FloatArrayConstant: acteve.symbolic.array.FloatArrayConstant get(float[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double[], int, double)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         double[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: double[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.DoubleArrayConstant: acteve.symbolic.array.DoubleArrayConstant get(double[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         double[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.DoubleArrayConstant: acteve.symbolic.array.DoubleArrayConstant get(double[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _alen(acteve.symbolic.integer.Expression)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_3;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_2, _sym_tmp_1;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_3 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         _sym_tmp_2 = virtualinvoke _sym_tmp_3.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _alen()>();
     [java]         return _sym_tmp_2;
     [java]     }
     [java] SHAUVIK: Soot args-w -p cg off -keep-line-number -keep-bytecode-offset -dynamic-class acteve.symbolic.Util -soot-classpath /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t/original.jar:/vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/libs/htmlcleaner-2.2.jar:/vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/libs/htmlspanner-0.2.jar:/home/vagrant/tools/acteve/jars/a3t_symbolic.jar:/home/vagrant/tools/acteve/jars/a3t_models.jar:/home/vagrant/android-sdk-linux/platforms/android-10/android.jar:/home/vagrant/tools/acteve/a3t_sdk/instrumentedframework.jar:/home/vagrant/tools/acteve/jars/a3t_stubs.jar:/home/vagrant/tools/acteve/jars/emma.jar -dynamic-package acteve.symbolic.integer. -dynamic-package models. -outjar -d /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t/instrumented.jar -O -validate acteve.symbolic.DummyMain
     [java] Soot started on Sun Nov 09 06:06:07 UTC 2014
     [java] com.gluegadget.hndroid.BuildConfig
     [java] com.gluegadget.hndroid.Comment
     [java] com.gluegadget.hndroid.CommentDialog$1
     [java] com.gluegadget.hndroid.CommentDialog$ReadyListener
     [java] com.gluegadget.hndroid.CommentDialog$loginListener
     [java] com.gluegadget.hndroid.CommentDialog
     [java] com.gluegadget.hndroid.Comments$1
     [java] com.gluegadget.hndroid.Comments$2$1
     [java] com.gluegadget.hndroid.Comments$2
     [java] com.gluegadget.hndroid.Comments$3$1
     [java] com.gluegadget.hndroid.Comments$3
     [java] com.gluegadget.hndroid.Comments$4
     [java] com.gluegadget.hndroid.Comments$5
     [java] com.gluegadget.hndroid.Comments$6$1
     [java] com.gluegadget.hndroid.Comments$6
     [java] com.gluegadget.hndroid.Comments$OnCommentListener$1
     [java] com.gluegadget.hndroid.Comments$OnCommentListener
     [java] com.gluegadget.hndroid.Comments$OnReplyListener$1
     [java] com.gluegadget.hndroid.Comments$OnReplyListener
     [java] com.gluegadget.hndroid.Comments
     [java] com.gluegadget.hndroid.CommentsAdapter$ViewHolder
     [java] com.gluegadget.hndroid.CommentsAdapter
     [java] com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation
     [java] com.gluegadget.hndroid.EmmaInstrument.FinishListener
     [java] com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity$CoverageCollector
     [java] com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity
     [java] com.gluegadget.hndroid.EmmaInstrument.SMSInstrumentedReceiver
     [java] com.gluegadget.hndroid.KarmaWidget$UpdateService
     [java] com.gluegadget.hndroid.KarmaWidget
     [java] com.gluegadget.hndroid.KarmaWidgetConfigurationActivity$1
     [java] com.gluegadget.hndroid.KarmaWidgetConfigurationActivity
     [java] com.gluegadget.hndroid.LoginDialog$1
     [java] com.gluegadget.hndroid.LoginDialog$ReadyListener
     [java] com.gluegadget.hndroid.LoginDialog$loginListener
     [java] com.gluegadget.hndroid.LoginDialog
     [java] com.gluegadget.hndroid.Main$1
     [java] com.gluegadget.hndroid.Main$10
     [java] com.gluegadget.hndroid.Main$11
     [java] com.gluegadget.hndroid.Main$12
     [java] com.gluegadget.hndroid.Main$13$1
     [java] com.gluegadget.hndroid.Main$13
     [java] com.gluegadget.hndroid.Main$2$1
     [java] com.gluegadget.hndroid.Main$2
     [java] com.gluegadget.hndroid.Main$3$1
     [java] com.gluegadget.hndroid.Main$3
     [java] com.gluegadget.hndroid.Main$4$1
     [java] com.gluegadget.hndroid.Main$4
     [java] com.gluegadget.hndroid.Main$5$1
     [java] com.gluegadget.hndroid.Main$5
     [java] com.gluegadget.hndroid.Main$6
     [java] com.gluegadget.hndroid.Main$7
     [java] com.gluegadget.hndroid.Main$8
     [java] com.gluegadget.hndroid.Main$9
     [java] com.gluegadget.hndroid.Main$OnLoginListener$1
     [java] com.gluegadget.hndroid.Main$OnLoginListener
     [java] com.gluegadget.hndroid.Main
     [java] com.gluegadget.hndroid.News
     [java] com.gluegadget.hndroid.NewsAdapter$1
     [java] com.gluegadget.hndroid.NewsAdapter$ViewHolder
     [java] com.gluegadget.hndroid.NewsAdapter
     [java] com.gluegadget.hndroid.Preferences
     [java] com.gluegadget.hndroid.R$array
     [java] com.gluegadget.hndroid.R$attr
     [java] com.gluegadget.hndroid.R$drawable
     [java] com.gluegadget.hndroid.R$id
     [java] com.gluegadget.hndroid.R$layout
     [java] com.gluegadget.hndroid.R$string
     [java] com.gluegadget.hndroid.R$style
     [java] com.gluegadget.hndroid.R$xml
     [java] com.gluegadget.hndroid.R
     [java] com.gluegadget.hndroid.Submissions$1
     [java] com.gluegadget.hndroid.Submissions$2
     [java] com.gluegadget.hndroid.Submissions$3$1
     [java] com.gluegadget.hndroid.Submissions$3
     [java] com.gluegadget.hndroid.Submissions$4
     [java] com.gluegadget.hndroid.Submissions$5
     [java] com.gluegadget.hndroid.Submissions$6
     [java] com.gluegadget.hndroid.Submissions$7$1
     [java] com.gluegadget.hndroid.Submissions$7
     [java] com.gluegadget.hndroid.Submissions
     [java] org.htmlcleaner.BaseToken
     [java] org.htmlcleaner.BrowserCompactXmlSerializer
     [java] org.htmlcleaner.CleanerProperties
     [java] org.htmlcleaner.CleanerTransformations
     [java] org.htmlcleaner.CommandLine
     [java] org.htmlcleaner.CommentNode
     [java] org.htmlcleaner.CompactHtmlSerializer
     [java] org.htmlcleaner.CompactXmlSerializer
     [java] org.htmlcleaner.ConfigFileTagProvider$ConfigParser
     [java] org.htmlcleaner.ConfigFileTagProvider
     [java] org.htmlcleaner.ContentNode
     [java] org.htmlcleaner.DefaultTagProvider
     [java] org.htmlcleaner.DoctypeToken
     [java] org.htmlcleaner.DomSerializer
     [java] org.htmlcleaner.EndTagToken
     [java] org.htmlcleaner.HtmlCleaner$1
     [java] org.htmlcleaner.HtmlCleaner$CleanTimeValues
     [java] org.htmlcleaner.HtmlCleaner$OpenTags
     [java] org.htmlcleaner.HtmlCleaner$TagPos
     [java] org.htmlcleaner.HtmlCleaner
     [java] org.htmlcleaner.HtmlCleanerException
     [java] org.htmlcleaner.HtmlSerializer
     [java] org.htmlcleaner.HtmlTokenizer
     [java] org.htmlcleaner.ITagInfoProvider
     [java] org.htmlcleaner.Serializer$1
     [java] org.htmlcleaner.Serializer$HeadlessTagNode
     [java] org.htmlcleaner.Serializer
     [java] org.htmlcleaner.SimpleHtmlSerializer
     [java] org.htmlcleaner.SimpleXmlSerializer
     [java] org.htmlcleaner.SpecialEntity
     [java] org.htmlcleaner.TagInfo
     [java] org.htmlcleaner.TagNode$ITagNodeCondition
     [java] org.htmlcleaner.TagNode$TagAllCondition
     [java] org.htmlcleaner.TagNode$TagNodeAttExistsCondition
     [java] org.htmlcleaner.TagNode$TagNodeAttValueCondition
     [java] org.htmlcleaner.TagNode$TagNodeNameCondition
     [java] org.htmlcleaner.TagNode
     [java] org.htmlcleaner.TagNodeVisitor
     [java] org.htmlcleaner.TagToken
     [java] org.htmlcleaner.TagTransformation
     [java] org.htmlcleaner.Utils
     [java] org.htmlcleaner.XmlSerializer
     [java] org.htmlcleaner.XPather
     [java] org.htmlcleaner.XPatherException
     [java] net.nightwhistler.htmlspanner.spans.FontFamilySpan
     [java] net.nightwhistler.htmlspanner.spans.CenterSpan
     [java] net.nightwhistler.htmlspanner.HtmlSpanner
     [java] net.nightwhistler.htmlspanner.handlers.MonoSpaceHandler
     [java] net.nightwhistler.htmlspanner.handlers.SubScriptHandler
     [java] net.nightwhistler.htmlspanner.handlers.ItalicHandler
     [java] net.nightwhistler.htmlspanner.handlers.NewLineHandler
     [java] net.nightwhistler.htmlspanner.handlers.ListItemHandler
     [java] net.nightwhistler.htmlspanner.handlers.MarginHandler
     [java] net.nightwhistler.htmlspanner.handlers.RelativeSizeHandler
     [java] net.nightwhistler.htmlspanner.handlers.TableHandler$1
     [java] net.nightwhistler.htmlspanner.handlers.PreHandler
     [java] net.nightwhistler.htmlspanner.handlers.BoldHandler
     [java] net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable
     [java] net.nightwhistler.htmlspanner.handlers.SuperScriptHandler
     [java] net.nightwhistler.htmlspanner.handlers.LinkHandler
     [java] net.nightwhistler.htmlspanner.handlers.ImageHandler
     [java] net.nightwhistler.htmlspanner.handlers.TableHandler
     [java] net.nightwhistler.htmlspanner.handlers.TableHandler$Table
     [java] net.nightwhistler.htmlspanner.handlers.HeaderHandler
     [java] net.nightwhistler.htmlspanner.handlers.CenterHandler
     [java] net.nightwhistler.htmlspanner.handlers.CenterHandler$1
     [java] net.nightwhistler.htmlspanner.FontFamily
     [java] net.nightwhistler.htmlspanner.TagNodeHandler
     [java] Instrumenting <com.gluegadget.hndroid.BuildConfig: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comment: void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Comment: void <init>(java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Comment: java.lang.Integer getPadding()>
     [java] Instrumenting <com.gluegadget.hndroid.Comment: java.lang.String getTitle()>
     [java] Instrumenting <com.gluegadget.hndroid.Comment: java.lang.String getAuthor()>
     [java] Instrumenting <com.gluegadget.hndroid.Comment: java.lang.String getReplyToUrl()>
     [java] Instrumenting <com.gluegadget.hndroid.Comment: java.lang.String getUpVoteUrl()>
     [java] Instrumenting <com.gluegadget.hndroid.Comment: java.lang.String toString()>
     [java] Instrumenting <com.gluegadget.hndroid.Comment: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comment: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog$loginListener: void <init>(com.gluegadget.hndroid.CommentDialog)>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog$loginListener: void onClick(android.view.View)>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog$loginListener: void <init>(com.gluegadget.hndroid.CommentDialog,com.gluegadget.hndroid.CommentDialog$1)>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog$loginListener: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog$loginListener: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog: void <init>(android.content.Context,java.lang.String,com.gluegadget.hndroid.CommentDialog$ReadyListener)>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog: void <init>(android.content.Context,java.lang.String,java.lang.String,com.gluegadget.hndroid.CommentDialog$ReadyListener)>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog: void onClick(android.view.View)>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog: com.gluegadget.hndroid.CommentDialog$ReadyListener access$100(com.gluegadget.hndroid.CommentDialog)>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$1: void <init>(com.gluegadget.hndroid.Comments)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$2$1: void <init>(com.gluegadget.hndroid.Comments$2)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$2$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$2$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$2$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$2: void <init>(com.gluegadget.hndroid.Comments)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$2: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$2: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$2: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$3$1: void <init>(com.gluegadget.hndroid.Comments$3)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$3$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$3$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$3$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$3: void <init>(com.gluegadget.hndroid.Comments)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$3: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$3: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$3: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$4: void <init>(com.gluegadget.hndroid.Comments)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$4: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$4: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$4: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$5: void <init>(com.gluegadget.hndroid.Comments,com.gluegadget.hndroid.Comment)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$5: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$5: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$5: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$6$1: void <init>(com.gluegadget.hndroid.Comments$6)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$6$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$6$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$6$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$6: void <init>(com.gluegadget.hndroid.Comments,com.gluegadget.hndroid.Comment)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$6: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$6: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$6: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnCommentListener$1: void <init>(com.gluegadget.hndroid.Comments$OnCommentListener,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnCommentListener$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnCommentListener$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnCommentListener$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnCommentListener: void <init>(com.gluegadget.hndroid.Comments)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnCommentListener: void ready(java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnCommentListener: void ready(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnCommentListener: void <init>(com.gluegadget.hndroid.Comments,com.gluegadget.hndroid.Comments$1)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnCommentListener: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnCommentListener: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnReplyListener$1: void <init>(com.gluegadget.hndroid.Comments$OnReplyListener,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnReplyListener$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnReplyListener$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnReplyListener$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnReplyListener: void <init>(com.gluegadget.hndroid.Comments)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnReplyListener: void ready(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnReplyListener: void ready(java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnReplyListener: void <init>(com.gluegadget.hndroid.Comments,com.gluegadget.hndroid.Comments$1)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnReplyListener: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments$OnReplyListener: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments: boolean onCreateOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments: boolean onPrepareOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments: void refreshComments(java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments: void access$000(com.gluegadget.hndroid.Comments,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Comments: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Comments: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentsAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentsAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentsAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentsAdapter: void <init>(android.content.Context,int,java.util.List)>
     [java] Instrumenting <com.gluegadget.hndroid.CommentsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.gluegadget.hndroid.CommentsAdapter: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.CommentsAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: void onStart()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: void generateCoverageReport()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: java.lang.String getCoverageFilePath()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: boolean setCoverageFilePath(java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.String,java.lang.Exception)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: void onActivityFinished()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: void dumpIntermediateCoverage(java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity$CoverageCollector: void <init>(com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity$CoverageCollector: void onReceive(android.content.Context,android.content.Intent)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity$CoverageCollector: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity: void setFinishListener(com.gluegadget.hndroid.EmmaInstrument.FinishListener)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity: void finish()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity: com.gluegadget.hndroid.EmmaInstrument.FinishListener access$000(com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.SMSInstrumentedReceiver: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.SMSInstrumentedReceiver: void onReceive(android.content.Context,android.content.Intent)>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.SMSInstrumentedReceiver: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget$UpdateService: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget$UpdateService: void onStart(android.content.Intent,int)>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget$UpdateService: void requestUpdate(int[])>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget$UpdateService: android.widget.RemoteViews buildUpdate(android.content.Context)>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget$UpdateService: android.os.IBinder onBind(android.content.Intent)>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget$UpdateService: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget$UpdateService: boolean hasMoreUpdates()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget$UpdateService: int getNextUpdate()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget$UpdateService: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget$UpdateService: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget: void onDeleted(android.content.Context,int[])>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget: void updateAppWidget(android.content.Context,android.appwidget.AppWidgetManager,int)>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidget: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity$1: void <init>(com.gluegadget.hndroid.KarmaWidgetConfigurationActivity)>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity$1: void onClick(android.view.View)>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity: java.lang.CharSequence loadUsername(android.content.Context,int)>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity: void saveTitlePref(android.content.Context,int,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity: void deleteUsername(android.content.Context,int)>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.KarmaWidgetConfigurationActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog$loginListener: void <init>(com.gluegadget.hndroid.LoginDialog)>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog$loginListener: void onClick(android.view.View)>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog$loginListener: void <init>(com.gluegadget.hndroid.LoginDialog,com.gluegadget.hndroid.LoginDialog$1)>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog$loginListener: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog$loginListener: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog: void <init>(android.content.Context,java.lang.String,com.gluegadget.hndroid.LoginDialog$ReadyListener)>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog: void onClick(android.view.View)>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog: com.gluegadget.hndroid.LoginDialog$ReadyListener access$100(com.gluegadget.hndroid.LoginDialog)>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.LoginDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$1: void <init>(com.gluegadget.hndroid.Main)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$10: void <init>(com.gluegadget.hndroid.Main,com.gluegadget.hndroid.News)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$10: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$10: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$10: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$11: void <init>(com.gluegadget.hndroid.Main,com.gluegadget.hndroid.News)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$11: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$11: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$11: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$12: void <init>(com.gluegadget.hndroid.Main,com.gluegadget.hndroid.News)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$12: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$12: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$12: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$13$1: void <init>(com.gluegadget.hndroid.Main$13)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$13$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$13$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$13$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$13: void <init>(com.gluegadget.hndroid.Main,com.gluegadget.hndroid.News)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$13: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$13: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$13: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$2$1: void <init>(com.gluegadget.hndroid.Main$2)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$2$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$2$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$2$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$2: void <init>(com.gluegadget.hndroid.Main)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$2: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$2: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$2: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$3$1: void <init>(com.gluegadget.hndroid.Main$3,com.gluegadget.hndroid.News)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$3$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$3$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$3$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$3: void <init>(com.gluegadget.hndroid.Main)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$3: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$3: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$3: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$4$1: void <init>(com.gluegadget.hndroid.Main$4)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$4$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$4$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$4$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$4: void <init>(com.gluegadget.hndroid.Main)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$4: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$4: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$4: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$5$1: void <init>(com.gluegadget.hndroid.Main$5)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$5$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$5$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$5$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$5: void <init>(com.gluegadget.hndroid.Main)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$5: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$5: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$5: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$6: void <init>(com.gluegadget.hndroid.Main)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$6: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$6: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$6: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$7: void <init>(com.gluegadget.hndroid.Main)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$7: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$7: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$7: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$8: void <init>(com.gluegadget.hndroid.Main,android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$8: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$8: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$8: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$9: void <init>(com.gluegadget.hndroid.Main)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$9: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$9: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$9: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$OnLoginListener$1: void <init>(com.gluegadget.hndroid.Main$OnLoginListener,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$OnLoginListener$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$OnLoginListener$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$OnLoginListener$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$OnLoginListener: void <init>(com.gluegadget.hndroid.Main)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$OnLoginListener: void ready(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$OnLoginListener: void <init>(com.gluegadget.hndroid.Main,com.gluegadget.hndroid.Main$1)>
     [java] Instrumenting <com.gluegadget.hndroid.Main$OnLoginListener: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main$OnLoginListener: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Main: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.gluegadget.hndroid.Main: boolean onCreateOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.gluegadget.hndroid.Main: boolean onPrepareOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.gluegadget.hndroid.Main: boolean onOptionsItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Main: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.gluegadget.hndroid.Main: void refreshNews()>
     [java] Instrumenting <com.gluegadget.hndroid.Main: void refreshNews(java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Main: void access$000(com.gluegadget.hndroid.Main)>
     [java] Instrumenting <com.gluegadget.hndroid.Main: void access$100(com.gluegadget.hndroid.Main,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Main: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Main: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.News: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.News: void <init>(java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.News: java.lang.String getCommentsUrl()>
     [java] Instrumenting <com.gluegadget.hndroid.News: java.lang.String getTitle()>
     [java] Instrumenting <com.gluegadget.hndroid.News: java.lang.String getScore()>
     [java] Instrumenting <com.gluegadget.hndroid.News: java.lang.String getComment()>
     [java] Instrumenting <com.gluegadget.hndroid.News: java.lang.String getAuthor()>
     [java] Instrumenting <com.gluegadget.hndroid.News: java.lang.String getUrl()>
     [java] Instrumenting <com.gluegadget.hndroid.News: java.lang.String getUpVoteUrl()>
     [java] Instrumenting <com.gluegadget.hndroid.News: java.lang.String getDomain()>
     [java] Instrumenting <com.gluegadget.hndroid.News: java.lang.String toString()>
     [java] Instrumenting <com.gluegadget.hndroid.News: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.News: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter$1: void <init>(com.gluegadget.hndroid.NewsAdapter)>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter$1: void onClick(android.view.View)>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter: void <init>(android.content.Context,int,java.util.List)>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.NewsAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Preferences: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.Preferences: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.gluegadget.hndroid.Preferences: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Preferences: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.R$array: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.R$attr: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.R$drawable: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.R$id: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.R$layout: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.R$string: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.R$style: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.R$xml: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.R: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$1: void <init>(com.gluegadget.hndroid.Submissions,android.os.Bundle)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$2: void <init>(com.gluegadget.hndroid.Submissions)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$2: void handleMessage(android.os.Message)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$2: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$2: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$3$1: void <init>(com.gluegadget.hndroid.Submissions$3,com.gluegadget.hndroid.News)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$3$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$3$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$3$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$3: void <init>(com.gluegadget.hndroid.Submissions)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$3: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$3: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$3: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$4: void <init>(com.gluegadget.hndroid.Submissions)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$4: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$4: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$4: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$5: void <init>(com.gluegadget.hndroid.Submissions,com.gluegadget.hndroid.News)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$5: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$5: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$5: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$6: void <init>(com.gluegadget.hndroid.Submissions,com.gluegadget.hndroid.News)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$6: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$6: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$6: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$7$1: void <init>(com.gluegadget.hndroid.Submissions$7)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$7$1: void run()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$7$1: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$7$1: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$7: void <init>(com.gluegadget.hndroid.Submissions,com.gluegadget.hndroid.News)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$7: boolean onMenuItemClick(android.view.MenuItem)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$7: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions$7: boolean[][] $VRi()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions: void <init>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions: void refreshNews(java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions: void access$000(com.gluegadget.hndroid.Submissions,java.lang.String)>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions: void <clinit>()>
     [java] Instrumenting <com.gluegadget.hndroid.Submissions: boolean[][] $VRi()>
     [java] Instrumenting <org.htmlcleaner.BrowserCompactXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.BrowserCompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void <init>()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isAdvancedXmlEscape()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setAdvancedXmlEscape(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isTransResCharsToNCR()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setTransResCharsToNCR(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isUseCdataForScriptAndStyle()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setUseCdataForScriptAndStyle(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isTranslateSpecialEntities()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setTranslateSpecialEntities(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isTransSpecialEntitiesToNCR()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setTransSpecialEntitiesToNCR(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isRecognizeUnicodeChars()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setRecognizeUnicodeChars(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isOmitUnknownTags()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setOmitUnknownTags(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isTreatUnknownTagsAsContent()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setTreatUnknownTagsAsContent(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isOmitDeprecatedTags()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setOmitDeprecatedTags(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isTreatDeprecatedTagsAsContent()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setTreatDeprecatedTagsAsContent(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isOmitComments()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setOmitComments(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isOmitXmlDeclaration()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setOmitXmlDeclaration(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isOmitDoctypeDeclaration()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setOmitDoctypeDeclaration(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isOmitHtmlEnvelope()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setOmitHtmlEnvelope(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isUseEmptyElementTags()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setUseEmptyElementTags(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isAllowMultiWordAttributes()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setAllowMultiWordAttributes(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isAllowHtmlInsideAttributes()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setAllowHtmlInsideAttributes(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isIgnoreQuestAndExclam()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setIgnoreQuestAndExclam(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: boolean isNamespacesAware()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setNamespacesAware(boolean)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: java.lang.String getHyphenReplacementInComment()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setHyphenReplacementInComment(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: java.lang.String getPruneTags()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setPruneTags(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: java.lang.String getBooleanAttributeValues()>
     [java] Instrumenting <org.htmlcleaner.CleanerProperties: void setBooleanAttributeValues(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.CleanerTransformations: void <init>()>
     [java] Instrumenting <org.htmlcleaner.CleanerTransformations: void addTransformation(org.htmlcleaner.TagTransformation)>
     [java] Instrumenting <org.htmlcleaner.CleanerTransformations: boolean hasTransformationForTag(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.CleanerTransformations: org.htmlcleaner.TagTransformation getTransformation(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.CommandLine: void <init>()>
     [java] Instrumenting <org.htmlcleaner.CommandLine: java.lang.String getArgValue(java.lang.String[],java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.CommandLine: boolean toBoolean(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.CommandLine: void main(java.lang.String[])>
     [java] Instrumenting <org.htmlcleaner.CommentNode: void <init>(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.CommentNode: java.lang.String getCommentedContent()>
     [java] Instrumenting <org.htmlcleaner.CommentNode: java.lang.StringBuilder getContent()>
     [java] Instrumenting <org.htmlcleaner.CommentNode: java.lang.String toString()>
     [java] Instrumenting <org.htmlcleaner.CommentNode: void serialize(org.htmlcleaner.Serializer,java.io.Writer)>
     [java] Instrumenting <org.htmlcleaner.CompactHtmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.CompactHtmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>
     [java] Instrumenting <org.htmlcleaner.CompactXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.CompactXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void <init>(org.htmlcleaner.ConfigFileTagProvider,java.util.Map)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void parse(org.xml.sax.InputSource)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void characters(char[],int,int)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider$ConfigParser: void endElement(java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider: void <init>()>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider: void <init>(org.xml.sax.InputSource)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider: void <init>(java.io.File)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider: void <init>(java.net.URL)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider: void main(java.lang.String[])>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider: boolean access$000(org.htmlcleaner.ConfigFileTagProvider)>
     [java] Instrumenting <org.htmlcleaner.ConfigFileTagProvider: void <clinit>()>
     [java] Instrumenting <org.htmlcleaner.ContentNode: void <init>(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.ContentNode: void <init>(char[],int)>
     [java] Instrumenting <org.htmlcleaner.ContentNode: java.lang.String toString()>
     [java] Instrumenting <org.htmlcleaner.ContentNode: java.lang.StringBuilder getContent()>
     [java] Instrumenting <org.htmlcleaner.ContentNode: void serialize(org.htmlcleaner.Serializer,java.io.Writer)>
     [java] Instrumenting <org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.DefaultTagProvider getInstance()>
     [java] Instrumenting <org.htmlcleaner.DefaultTagProvider: void <init>()>
     [java] Instrumenting <org.htmlcleaner.DefaultTagProvider: org.htmlcleaner.TagInfo getTagInfo(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.DefaultTagProvider: void removeTagInfo(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.DefaultTagProvider: void addTagInfo(org.htmlcleaner.TagInfo)>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: java.lang.String clean(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: boolean isValid()>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: java.lang.String getContent()>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: java.lang.String toString()>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: java.lang.String getName()>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: void serialize(org.htmlcleaner.Serializer,java.io.Writer)>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: java.lang.String getPart1()>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: java.lang.String getPart2()>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: java.lang.String getPart3()>
     [java] Instrumenting <org.htmlcleaner.DoctypeToken: java.lang.String getPart4()>
     [java] Instrumenting <org.htmlcleaner.DomSerializer: void <init>(org.htmlcleaner.CleanerProperties,boolean)>
     [java] Instrumenting <org.htmlcleaner.DomSerializer: void <init>(org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.DomSerializer: org.w3c.dom.Document createDOM(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.DomSerializer: org.w3c.dom.Element createElement(org.htmlcleaner.TagNode,org.w3c.dom.Document)>
     [java] Instrumenting <org.htmlcleaner.DomSerializer: void setAttributes(org.htmlcleaner.TagNode,org.w3c.dom.Element)>
     [java] Instrumenting <org.htmlcleaner.DomSerializer: void createSubnodes(org.w3c.dom.Document,org.w3c.dom.Element,java.util.List)>
     [java] Instrumenting <org.htmlcleaner.EndTagToken: void <init>()>
     [java] Instrumenting <org.htmlcleaner.EndTagToken: void <init>(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.EndTagToken: void setAttribute(java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.EndTagToken: void serialize(org.htmlcleaner.Serializer,java.io.Writer)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$1: void <init>(org.htmlcleaner.HtmlCleaner,java.io.Reader,org.htmlcleaner.CleanerProperties,org.htmlcleaner.CleanerTransformations,org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$1: void makeTree(java.util.List)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$1: org.htmlcleaner.TagNode createTagNode(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: void <init>(org.htmlcleaner.HtmlCleaner)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: void <init>(org.htmlcleaner.HtmlCleaner,org.htmlcleaner.HtmlCleaner$1)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: org.htmlcleaner.HtmlCleaner$OpenTags access$402(org.htmlcleaner.HtmlCleaner$CleanTimeValues,org.htmlcleaner.HtmlCleaner$OpenTags)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: boolean access$602(org.htmlcleaner.HtmlCleaner$CleanTimeValues,boolean)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: boolean access$702(org.htmlcleaner.HtmlCleaner$CleanTimeValues,boolean)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: java.util.Set access$800(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: java.util.Set access$900(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: org.htmlcleaner.TagNode access$1002(org.htmlcleaner.HtmlCleaner$CleanTimeValues,org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: org.htmlcleaner.TagNode access$1102(org.htmlcleaner.HtmlCleaner$CleanTimeValues,org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: org.htmlcleaner.TagNode access$1202(org.htmlcleaner.HtmlCleaner$CleanTimeValues,org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: org.htmlcleaner.TagNode access$1302(org.htmlcleaner.HtmlCleaner$CleanTimeValues,org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: org.htmlcleaner.TagNode access$1200(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: org.htmlcleaner.TagNode access$1000(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: org.htmlcleaner.TagNode access$1100(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: java.util.Set access$1500(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: org.htmlcleaner.TagNode access$1300(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: java.util.Set access$1600(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: org.htmlcleaner.HtmlCleaner$OpenTags access$400(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: boolean access$600(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$CleanTimeValues: boolean access$700(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: void <init>(org.htmlcleaner.HtmlCleaner)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: boolean isEmpty()>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: void addTag(java.lang.String,int)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: void removeTag(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findFirstTagPos()>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos getLastTagPos()>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTag(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: boolean tagExists(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos findTagToPlaceRubbish()>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: boolean tagEncountered(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: boolean someAlreadyOpen(java.util.Set)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: void <init>(org.htmlcleaner.HtmlCleaner,org.htmlcleaner.HtmlCleaner$1)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$1700(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$1800(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: java.util.List access$2000(org.htmlcleaner.HtmlCleaner$OpenTags)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$2100(org.htmlcleaner.HtmlCleaner$OpenTags)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$2200(org.htmlcleaner.HtmlCleaner$OpenTags)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$2300(org.htmlcleaner.HtmlCleaner$OpenTags)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$2400(org.htmlcleaner.HtmlCleaner$OpenTags,java.util.Set)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: boolean access$2500(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: void access$2600(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String,int)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: void access$2700(org.htmlcleaner.HtmlCleaner$OpenTags,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$OpenTags: org.htmlcleaner.HtmlCleaner$TagPos access$2800(org.htmlcleaner.HtmlCleaner$OpenTags)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$TagPos: void <init>(org.htmlcleaner.HtmlCleaner,int,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$TagPos: java.lang.String access$100(org.htmlcleaner.HtmlCleaner$TagPos)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$TagPos: org.htmlcleaner.TagInfo access$200(org.htmlcleaner.HtmlCleaner$TagPos)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner$TagPos: int access$1900(org.htmlcleaner.HtmlCleaner$TagPos)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void <init>()>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void <init>(org.htmlcleaner.ITagInfoProvider,org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.File,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.File)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.net.URL)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.InputStream,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.InputStream)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode clean(java.io.Reader,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode createTagNode(java.lang.String,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode makeTagNodeCopy(org.htmlcleaner.TagNode,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void calculateRootNode(org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void addAttributesToTag(org.htmlcleaner.TagNode,java.util.Map)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: boolean isFatalTagSatisfied(org.htmlcleaner.TagInfo,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: boolean mustAddRequiredParent(org.htmlcleaner.TagInfo,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode createTagNode(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: boolean isAllowedInLastOpenTag(org.htmlcleaner.BaseToken,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void saveToLastOpenTag(java.util.List,org.htmlcleaner.BaseToken,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: boolean isStartToken(java.lang.Object)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void makeTree(java.util.List,java.util.ListIterator,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void createDocumentNodes(java.util.List,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: java.util.List closeSnippet(java.util.List,org.htmlcleaner.HtmlCleaner$TagPos,java.lang.Object,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void closeAll(java.util.List,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void addPossibleHeadCandidate(org.htmlcleaner.TagInfo,org.htmlcleaner.TagNode,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerProperties getProperties()>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void setPruneTags(java.lang.String,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.ITagInfoProvider getTagInfoProvider()>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.CleanerTransformations getTransformations()>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void setTransformations(org.htmlcleaner.CleanerTransformations)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: java.lang.String getInnerHtml(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void setInnerHtml(org.htmlcleaner.TagNode,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.ITagInfoProvider access$000(org.htmlcleaner.HtmlCleaner)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: org.htmlcleaner.TagNode access$1400(org.htmlcleaner.HtmlCleaner,java.lang.String,org.htmlcleaner.HtmlCleaner$CleanTimeValues)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleaner: void <clinit>()>
     [java] Instrumenting <org.htmlcleaner.HtmlCleanerException: void <init>()>
     [java] Instrumenting <org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.Throwable)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlCleanerException: void <init>(java.lang.String,java.lang.Throwable)>
     [java] Instrumenting <org.htmlcleaner.HtmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.HtmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.HtmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.HtmlSerializer: java.lang.String escapeText(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>
     [java] Instrumenting <org.htmlcleaner.HtmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void <init>(java.io.Reader,org.htmlcleaner.CleanerProperties,org.htmlcleaner.CleanerTransformations,org.htmlcleaner.ITagInfoProvider)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void addToken(org.htmlcleaner.BaseToken)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void readIfNeeded(int)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: java.util.List getTokenList()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void go()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void go(int)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean startsWith(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean startsWithSimple(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isWhitespace(int)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isWhitespace()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isWhitespaceSafe()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isChar(int,char)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isChar(char)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isCharSimple(char)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: char getCurrentChar()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isCharEquals(char)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isIdentifierStartChar(int)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isIdentifierStartChar()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isIdentifierChar()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isValidXmlChar()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isValidXmlCharSafe()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isAllRead()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void save(char)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void saveCurrent()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void saveCurrentSafe()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void saveCurrent(int)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void skipWhitespaces()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean addSavedAsContent()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void start()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean isReservedTag(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void tagStart()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void tagEnd()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: java.lang.String identifier()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void tagAttributes()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: java.lang.String attributeValue()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: boolean content()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void ignoreUntil(char)>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void comment()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: void doctype()>
     [java] Instrumenting <org.htmlcleaner.HtmlTokenizer: org.htmlcleaner.DoctypeToken getDocType()>
     [java] Instrumenting <org.htmlcleaner.Serializer$HeadlessTagNode: void <init>(org.htmlcleaner.Serializer,org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.Serializer$HeadlessTagNode: void <init>(org.htmlcleaner.Serializer,org.htmlcleaner.TagNode,org.htmlcleaner.Serializer$1)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void <init>(org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream,boolean)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void writeToStream(org.htmlcleaner.TagNode,java.io.OutputStream)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void writeToFile(org.htmlcleaner.TagNode,java.lang.String,java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void writeToFile(org.htmlcleaner.TagNode,java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void writeToFile(org.htmlcleaner.TagNode,java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void writeToFile(org.htmlcleaner.TagNode,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Serializer: java.lang.String getAsString(org.htmlcleaner.TagNode,java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.Serializer: java.lang.String getAsString(org.htmlcleaner.TagNode,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Serializer: java.lang.String getAsString(org.htmlcleaner.TagNode,boolean)>
     [java] Instrumenting <org.htmlcleaner.Serializer: java.lang.String getAsString(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void write(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Serializer: void write(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.Serializer: boolean isScriptOrStyle(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.SimpleHtmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.SimpleHtmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>
     [java] Instrumenting <org.htmlcleaner.SimpleXmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.SimpleXmlSerializer: void serialize(org.htmlcleaner.TagNode,java.io.Writer)>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: void addEntity(java.lang.String,int)>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: org.htmlcleaner.SpecialEntity getEntity(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: int getMaxEntityLength()>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: void <init>(java.lang.String,int)>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: java.lang.String getKey()>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: int getIntCode()>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: char getCharacter()>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: java.lang.String getDecimalNCR()>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: java.lang.String getHexNCR()>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: java.lang.String getEscapedValue()>
     [java] Instrumenting <org.htmlcleaner.SpecialEntity: void <clinit>()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void <init>(java.lang.String,int,int,boolean,boolean,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void defineFatalTags(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void defineRequiredEnclosingTags(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void defineForbiddenTags(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void defineAllowedChildrenTags(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void defineHigherLevelTags(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void defineCloseBeforeCopyInsideTags(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void defineCloseInsideCopyAfterTags(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void defineCloseBeforeTags(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: java.lang.String getName()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setName(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: int getContentType()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: java.util.Set getMustCloseTags()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setMustCloseTags(java.util.Set)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: java.util.Set getHigherTags()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setHigherTags(java.util.Set)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: java.util.Set getChildTags()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setChildTags(java.util.Set)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: java.util.Set getPermittedTags()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setPermittedTags(java.util.Set)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: java.util.Set getCopyTags()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setCopyTags(java.util.Set)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: java.util.Set getContinueAfterTags()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setContinueAfterTags(java.util.Set)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: java.lang.String getRequiredParent()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setRequiredParent(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: int getBelongsTo()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setBelongsTo(int)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: java.lang.String getFatalTag()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setFatalTag(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean isDeprecated()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setDeprecated(boolean)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean isUnique()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setUnique(boolean)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean isIgnorePermitted()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean isEmptyTag()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: void setIgnorePermitted(boolean)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean allowsBody()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean isHigher(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean isCopy(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean hasCopyTags()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean isContinueAfter(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean hasPermittedTags()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean isHeadTag()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean isHeadAndBodyTag()>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean isMustCloseTag(org.htmlcleaner.TagInfo)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean allowsItem(org.htmlcleaner.BaseToken)>
     [java] Instrumenting <org.htmlcleaner.TagInfo: boolean allowsAnything()>
     [java] Instrumenting <org.htmlcleaner.TagNode$TagAllCondition: void <init>(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.TagNode$TagAllCondition: boolean satisfy(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.TagNode$TagNodeAttExistsCondition: void <init>(org.htmlcleaner.TagNode,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode$TagNodeAttExistsCondition: boolean satisfy(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.TagNode$TagNodeAttValueCondition: void <init>(org.htmlcleaner.TagNode,java.lang.String,java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode$TagNodeAttValueCondition: boolean satisfy(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.TagNode$TagNodeNameCondition: void <init>(org.htmlcleaner.TagNode,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode$TagNodeNameCondition: boolean satisfy(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void <init>(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode: boolean setName(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.lang.String getAttributeByName(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.Map getAttributes()>
     [java] Instrumenting <org.htmlcleaner.TagNode: boolean hasAttribute(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void addAttribute(java.lang.String,java.lang.String)>
     [java] type Ljava/lang/Deprecated;
     [java] Instrumenting <org.htmlcleaner.TagNode: void setAttribute(java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void addNamespaceDeclaration(java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.Map getNamespaceDeclarations()>
     [java] Instrumenting <org.htmlcleaner.TagNode: void removeAttribute(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.List getChildren()>
     [java] Instrumenting <org.htmlcleaner.TagNode: boolean hasChildren()>
     [java] Instrumenting <org.htmlcleaner.TagNode: void setChildren(java.util.List)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.List getChildTagList()>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode[] getChildTags()>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.lang.StringBuffer getText()>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode getParent()>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.DoctypeToken getDocType()>
     [java] Instrumenting <org.htmlcleaner.TagNode: void setDocType(org.htmlcleaner.DoctypeToken)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void addChild(java.lang.Object)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void addChildren(java.util.List)>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode findElement(org.htmlcleaner.TagNode$ITagNodeCondition,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.List getElementList(org.htmlcleaner.TagNode$ITagNodeCondition,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode[] getElements(org.htmlcleaner.TagNode$ITagNodeCondition,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.List getAllElementsList(boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode[] getAllElements(boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode findElementByName(java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.List getElementListByName(java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode[] getElementsByName(java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode findElementHavingAttribute(java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.List getElementListHavingAttribute(java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode[] getElementsHavingAttribute(java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode findElementByAttValue(java.lang.String,java.lang.String,boolean,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.List getElementListByAttValue(java.lang.String,java.lang.String,boolean,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode[] getElementsByAttValue(java.lang.String,java.lang.String,boolean,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.lang.Object[] evaluateXPath(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode: boolean removeFromTree()>
     [java] Instrumenting <org.htmlcleaner.TagNode: boolean removeChild(java.lang.Object)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void removeAllChildren()>
     [java] Instrumenting <org.htmlcleaner.TagNode: void replaceChild(org.htmlcleaner.HtmlNode,org.htmlcleaner.HtmlNode)>
     [java] Instrumenting <org.htmlcleaner.TagNode: int getChildIndex(org.htmlcleaner.HtmlNode)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void insertChild(int,org.htmlcleaner.HtmlNode)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void insertChildBefore(org.htmlcleaner.HtmlNode,org.htmlcleaner.HtmlNode)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void insertChildAfter(org.htmlcleaner.HtmlNode,org.htmlcleaner.HtmlNode)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void addItemForMoving(org.htmlcleaner.BaseToken)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.List getItemsToMove()>
     [java] Instrumenting <org.htmlcleaner.TagNode: void setItemsToMove(java.util.List)>
     [java] Instrumenting <org.htmlcleaner.TagNode: boolean isFormed()>
     [java] Instrumenting <org.htmlcleaner.TagNode: void setFormed(boolean)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void setFormed()>
     [java] Instrumenting <org.htmlcleaner.TagNode: void transformAttributes(org.htmlcleaner.TagTransformation)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void traverse(org.htmlcleaner.TagNodeVisitor)>
     [java] Instrumenting <org.htmlcleaner.TagNode: boolean traverseInternally(org.htmlcleaner.TagNodeVisitor)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void collectNamespacePrefixesOnPath(java.util.Set)>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.lang.String getNamespaceURIOnPath(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagNode: void serialize(org.htmlcleaner.Serializer,java.io.Writer)>
     [java] Instrumenting <org.htmlcleaner.TagNode: org.htmlcleaner.TagNode makeCopy()>
     [java] Instrumenting <org.htmlcleaner.TagNode: java.util.Map access$000(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.TagToken: void <init>()>
     [java] Instrumenting <org.htmlcleaner.TagToken: void <init>(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagToken: java.lang.String getName()>
     [java] Instrumenting <org.htmlcleaner.TagToken: java.lang.String toString()>
     [java] Instrumenting <org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String,boolean)>
     [java] Instrumenting <org.htmlcleaner.TagTransformation: void <init>(java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagTransformation: void <init>(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagTransformation: void addAttributeTransformation(java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagTransformation: void addAttributeTransformation(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.TagTransformation: boolean hasAttributeTransformations()>
     [java] Instrumenting <org.htmlcleaner.TagTransformation: java.lang.String getSourceTag()>
     [java] Instrumenting <org.htmlcleaner.TagTransformation: java.lang.String getDestTag()>
     [java] Instrumenting <org.htmlcleaner.TagTransformation: boolean isPreserveSourceAttributes()>
     [java] Instrumenting <org.htmlcleaner.TagTransformation: java.util.Map getAttributeTransformations()>
     [java] Instrumenting <org.htmlcleaner.Utils: void <init>()>
     [java] Instrumenting <org.htmlcleaner.Utils: java.lang.String ltrim(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Utils: java.lang.String rtrim(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Utils: java.lang.String getCharsetFromContentTypeString(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Utils: java.lang.String getCharsetFromContent(java.net.URL)>
     [java] Instrumenting <org.htmlcleaner.Utils: boolean isHexadecimalDigit(char)>
     [java] Instrumenting <org.htmlcleaner.Utils: boolean isValidXmlChar(char)>
     [java] Instrumenting <org.htmlcleaner.Utils: boolean isReservedXmlChar(char)>
     [java] Instrumenting <org.htmlcleaner.Utils: boolean isValidInt(java.lang.String,int)>
     [java] Instrumenting <org.htmlcleaner.Utils: java.lang.String escapeXml(java.lang.String,org.htmlcleaner.CleanerProperties,boolean)>
     [java] Instrumenting <org.htmlcleaner.Utils: boolean isWhitespaceString(java.lang.Object)>
     [java] Instrumenting <org.htmlcleaner.Utils: boolean isIdentifierHelperChar(char)>
     [java] Instrumenting <org.htmlcleaner.Utils: boolean isValidXmlIdentifier(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Utils: boolean isEmptyString(java.lang.Object)>
     [java] Instrumenting <org.htmlcleaner.Utils: java.lang.String evaluateTemplate(java.lang.String,java.util.Map)>
     [java] Instrumenting <org.htmlcleaner.Utils: java.lang.String[] tokenize(java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Utils: void updateTagTransformations(org.htmlcleaner.CleanerTransformations,java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Utils: boolean isFullUrl(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Utils: java.lang.String fullUrl(java.lang.String,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Utils: java.lang.String getXmlNSPrefix(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Utils: java.lang.String getXmlName(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.Utils: void <clinit>()>
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: void <init>(org.htmlcleaner.CleanerProperties)>
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: void writeXmlToStream(org.htmlcleaner.TagNode,java.io.OutputStream,java.lang.String)>
     [java] type Ljava/lang/Deprecated;
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: void writeXmlToStream(org.htmlcleaner.TagNode,java.io.OutputStream)>
     [java] type Ljava/lang/Deprecated;
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: void writeXmlToFile(org.htmlcleaner.TagNode,java.lang.String,java.lang.String)>
     [java] type Ljava/lang/Deprecated;
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: void writeXmlToFile(org.htmlcleaner.TagNode,java.lang.String)>
     [java] type Ljava/lang/Deprecated;
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: java.lang.String getXmlAsString(org.htmlcleaner.TagNode,java.lang.String)>
     [java] type Ljava/lang/Deprecated;
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: java.lang.String getXmlAsString(org.htmlcleaner.TagNode)>
     [java] type Ljava/lang/Deprecated;
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: void writeXml(org.htmlcleaner.TagNode,java.io.Writer,java.lang.String)>
     [java] type Ljava/lang/Deprecated;
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: java.lang.String escapeXml(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: boolean dontEscape(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: void serializeOpenTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>
     [java] Instrumenting <org.htmlcleaner.XmlSerializer: void serializeEndTag(org.htmlcleaner.TagNode,java.io.Writer,boolean)>
     [java] Instrumenting <org.htmlcleaner.XPather: void <init>(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.XPather: java.lang.Object[] evaluateAgainstNode(org.htmlcleaner.TagNode)>
     [java] Instrumenting <org.htmlcleaner.XPather: void throwStandardException()>
     [java] Instrumenting <org.htmlcleaner.XPather: java.util.Collection evaluateAgainst(java.util.Collection,int,int,boolean,int,int,boolean,java.util.Collection)>
     [java] Instrumenting <org.htmlcleaner.XPather: java.lang.String flatten(int,int)>
     [java] Instrumenting <org.htmlcleaner.XPather: boolean isValidInteger(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.XPather: boolean isValidDouble(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.XPather: boolean isIdentifier(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.XPather: boolean isFunctionCall(int,int)>
     [java] Instrumenting <org.htmlcleaner.XPather: java.util.Collection evaluateFunction(java.util.Collection,int,int,int,int,boolean)>
     [java] Instrumenting <org.htmlcleaner.XPather: java.util.Collection filterByCondition(java.util.Collection,int,int)>
     [java] Instrumenting <org.htmlcleaner.XPather: boolean isToken(java.lang.String,int)>
     [java] Instrumenting <org.htmlcleaner.XPather: int findClosingIndex(int,int)>
     [java] Instrumenting <org.htmlcleaner.XPather: boolean isAtt(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.XPather: java.util.Collection singleton(java.lang.Object)>
     [java] Instrumenting <org.htmlcleaner.XPather: java.util.Collection getElementsByName(java.util.Collection,int,int,boolean,boolean)>
     [java] Instrumenting <org.htmlcleaner.XPather: boolean evaluateLogic(java.util.Collection,java.util.Collection,java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.XPather: java.lang.String toText(java.lang.Object)>
     [java] Instrumenting <org.htmlcleaner.XPatherException: void <init>()>
     [java] Instrumenting <org.htmlcleaner.XPatherException: void <init>(java.lang.Throwable)>
     [java] Instrumenting <org.htmlcleaner.XPatherException: void <init>(java.lang.String)>
     [java] Instrumenting <org.htmlcleaner.XPatherException: void <init>(java.lang.String,java.lang.Throwable)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.spans.FontFamilySpan: void <init>(net.nightwhistler.htmlspanner.FontFamily)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.spans.FontFamilySpan: void setBold(boolean)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.spans.FontFamilySpan: void setItalic(boolean)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.spans.FontFamilySpan: void updateDrawState(android.text.TextPaint)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.spans.FontFamilySpan: void updateMeasureState(android.text.TextPaint)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.spans.FontFamilySpan: void applyCustomTypeFace(android.graphics.Paint,net.nightwhistler.htmlspanner.FontFamily)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.spans.CenterSpan: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.spans.CenterSpan: android.text.Layout$Alignment getAlignment()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: void <init>(org.htmlcleaner.HtmlCleaner)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: net.nightwhistler.htmlspanner.FontFamily getFontFamily()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: void setFontFamily(net.nightwhistler.htmlspanner.FontFamily)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: void setStripExtraWhiteSpace(boolean)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: boolean isStripExtraWhiteSpace()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: void registerHandler(java.lang.String,net.nightwhistler.htmlspanner.TagNodeHandler)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: android.text.Spanned fromHtml(java.lang.String)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: android.text.Spanned fromHtml(java.io.Reader)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: android.text.Spanned fromHtml(java.io.InputStream)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: net.nightwhistler.htmlspanner.TagNodeHandler getHandlerFor(java.lang.String)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: android.text.Spanned fromTagNode(org.htmlcleaner.TagNode)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: org.htmlcleaner.HtmlCleaner createHtmlCleaner()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: java.lang.String getEditedText(java.lang.String)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: java.lang.String getReplacement(java.util.regex.Matcher)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: void handleContent(android.text.SpannableStringBuilder,java.lang.Object,org.htmlcleaner.TagNode)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: void applySpan(android.text.SpannableStringBuilder,org.htmlcleaner.TagNode)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: void registerBuiltInHandlers()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.HtmlSpanner: void <clinit>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.MonoSpaceHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.MonoSpaceHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.SubScriptHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.SubScriptHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.ItalicHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.ItalicHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.NewLineHandler: void <init>(int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.NewLineHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.ListItemHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.ListItemHandler: int getMyIndex(org.htmlcleaner.TagNode)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.ListItemHandler: java.lang.String getParentName(org.htmlcleaner.TagNode)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.ListItemHandler: void beforeChildren(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.ListItemHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.MarginHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.MarginHandler: void beforeChildren(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.MarginHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.MarginHandler: void <clinit>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.RelativeSizeHandler: void <init>(float)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.RelativeSizeHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$1: void <init>(net.nightwhistler.htmlspanner.handlers.TableHandler)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$1: android.text.Layout$Alignment getAlignment()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.PreHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.PreHandler: void getPlainText(java.lang.StringBuffer,java.lang.Object)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.PreHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.PreHandler: boolean rendersContent()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.BoldHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.BoldHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable: void <init>(net.nightwhistler.htmlspanner.handlers.TableHandler,java.util.List)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable: void draw(android.graphics.Canvas)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable: int getIntrinsicHeight()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable: int getIntrinsicWidth()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable: int getOpacity()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable: void setAlpha(int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable: void setColorFilter(android.graphics.ColorFilter)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.SuperScriptHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.SuperScriptHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.LinkHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.LinkHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.ImageHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.ImageHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.ImageHandler: android.graphics.Bitmap loadBitmap(java.lang.String)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: void setTableWidth(int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: void setTextColor(int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: void setTextSize(float)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: void setTypeFace(android.graphics.Typeface)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: boolean rendersContent()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: void readNode(java.lang.Object,net.nightwhistler.htmlspanner.handlers.TableHandler$Table)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: net.nightwhistler.htmlspanner.handlers.TableHandler$Table getTable(org.htmlcleaner.TagNode)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: android.text.TextPaint getTextPaint()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: int calculateRowHeight(java.util.List)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: int access$100(net.nightwhistler.htmlspanner.handlers.TableHandler)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: int access$200(net.nightwhistler.htmlspanner.handlers.TableHandler)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: int access$300(net.nightwhistler.htmlspanner.handlers.TableHandler,java.util.List)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler: android.text.TextPaint access$400(net.nightwhistler.htmlspanner.handlers.TableHandler)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$Table: void <init>(net.nightwhistler.htmlspanner.handlers.TableHandler)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$Table: void addRow()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$Table: java.util.List getBottomRow()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$Table: java.util.List getRows()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$Table: void addCell(android.text.Spanned)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.TableHandler$Table: void <init>(net.nightwhistler.htmlspanner.handlers.TableHandler,net.nightwhistler.htmlspanner.handlers.TableHandler$1)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.HeaderHandler: void <init>(float)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.HeaderHandler: void beforeChildren(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.HeaderHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.CenterHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.CenterHandler: void handleTagNode(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder,int,int)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.CenterHandler$1: void <init>(net.nightwhistler.htmlspanner.handlers.CenterHandler)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.handlers.CenterHandler$1: android.text.Layout$Alignment getAlignment()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: void <init>(java.lang.String,android.graphics.Typeface)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: java.lang.String getName()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: void setBoldItalicTypeface(android.graphics.Typeface)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: void setBoldTypeface(android.graphics.Typeface)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: void setDefaultTypeface(android.graphics.Typeface)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: void setItalicTypeface(android.graphics.Typeface)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: android.graphics.Typeface getBoldItalicTypeface()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: android.graphics.Typeface getBoldTypeface()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: android.graphics.Typeface getDefaultTypeface()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: android.graphics.Typeface getItalicTypeface()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: boolean isFakeBold()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.FontFamily: boolean isFakeItalic()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.TagNodeHandler: void <init>()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.TagNodeHandler: void setSpanner(net.nightwhistler.htmlspanner.HtmlSpanner)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.TagNodeHandler: net.nightwhistler.htmlspanner.HtmlSpanner getSpanner()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.TagNodeHandler: void beforeChildren(org.htmlcleaner.TagNode,android.text.SpannableStringBuilder)>
     [java] Instrumenting <net.nightwhistler.htmlspanner.TagNodeHandler: boolean rendersContent()>
     [java] Instrumenting <net.nightwhistler.htmlspanner.TagNodeHandler: void appendNewLine(android.text.SpannableStringBuilder)>
     [java] Transforming acteve.symbolic.SymbolicOperations... 
     [java] Transforming com.gluegadget.hndroid.BuildConfig... 
     [java] Transforming com.gluegadget.hndroid.Comment... 
     [java] Transforming com.gluegadget.hndroid.CommentDialog$1... 
     [java] Transforming com.gluegadget.hndroid.CommentDialog$ReadyListener... 
     [java] Transforming com.gluegadget.hndroid.CommentDialog$loginListener... 
     [java] Transforming com.gluegadget.hndroid.CommentDialog... 
     [java] Transforming com.gluegadget.hndroid.Comments$1... 
     [java] Transforming com.gluegadget.hndroid.Comments$2$1... 
     [java] Transforming com.gluegadget.hndroid.Comments$2... 
     [java] Transforming com.gluegadget.hndroid.Comments$3$1... 
     [java] Transforming com.gluegadget.hndroid.Comments$3... 
     [java] Transforming com.gluegadget.hndroid.Comments$4... 
     [java] Transforming com.gluegadget.hndroid.Comments$5... 
     [java] Transforming com.gluegadget.hndroid.Comments$6$1... 
     [java] Transforming com.gluegadget.hndroid.Comments$6... 
     [java] Transforming com.gluegadget.hndroid.Comments$OnCommentListener$1... 
     [java] Transforming com.gluegadget.hndroid.Comments$OnCommentListener... 
     [java] Transforming com.gluegadget.hndroid.Comments$OnReplyListener$1... 
     [java] Transforming com.gluegadget.hndroid.Comments$OnReplyListener... 
     [java] Transforming com.gluegadget.hndroid.Comments... 
     [java] Transforming com.gluegadget.hndroid.CommentsAdapter$ViewHolder... 
     [java] Transforming com.gluegadget.hndroid.CommentsAdapter... 
     [java] Transforming com.gluegadget.hndroid.EmmaInstrument.EmmaInstrumentation... 
     [java] Transforming com.gluegadget.hndroid.EmmaInstrument.FinishListener... 
     [java] Transforming com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity$CoverageCollector... 
     [java] Transforming com.gluegadget.hndroid.EmmaInstrument.InstrumentedActivity... 
     [java] Transforming com.gluegadget.hndroid.EmmaInstrument.SMSInstrumentedReceiver... 
     [java] Transforming com.gluegadget.hndroid.KarmaWidget$UpdateService... 
     [java] Transforming com.gluegadget.hndroid.KarmaWidget... 
     [java] Transforming com.gluegadget.hndroid.KarmaWidgetConfigurationActivity$1... 
     [java] Transforming com.gluegadget.hndroid.KarmaWidgetConfigurationActivity... 
     [java] Transforming com.gluegadget.hndroid.LoginDialog$1... 
     [java] Transforming com.gluegadget.hndroid.LoginDialog$ReadyListener... 
     [java] Transforming com.gluegadget.hndroid.LoginDialog$loginListener... 
     [java] Transforming com.gluegadget.hndroid.LoginDialog... 
     [java] Transforming com.gluegadget.hndroid.Main$1... 
     [java] Transforming com.gluegadget.hndroid.Main$10... 
     [java] Transforming com.gluegadget.hndroid.Main$11... 
     [java] Transforming com.gluegadget.hndroid.Main$12... 
     [java] Transforming com.gluegadget.hndroid.Main$13$1... 
     [java] Transforming com.gluegadget.hndroid.Main$13... 
     [java] Transforming com.gluegadget.hndroid.Main$2$1... 
     [java] Transforming com.gluegadget.hndroid.Main$2... 
     [java] Transforming com.gluegadget.hndroid.Main$3$1... 
     [java] Transforming com.gluegadget.hndroid.Main$3... 
     [java] Transforming com.gluegadget.hndroid.Main$4$1... 
     [java] Transforming com.gluegadget.hndroid.Main$4... 
     [java] Transforming com.gluegadget.hndroid.Main$5$1... 
     [java] Transforming com.gluegadget.hndroid.Main$5... 
     [java] Transforming com.gluegadget.hndroid.Main$6... 
     [java] Transforming com.gluegadget.hndroid.Main$7... 
     [java] Transforming com.gluegadget.hndroid.Main$8... 
     [java] Transforming com.gluegadget.hndroid.Main$9... 
     [java] Transforming com.gluegadget.hndroid.Main$OnLoginListener$1... 
     [java] Transforming com.gluegadget.hndroid.Main$OnLoginListener... 
     [java] Transforming com.gluegadget.hndroid.Main... 
     [java] Transforming com.gluegadget.hndroid.News... 
     [java] Transforming com.gluegadget.hndroid.NewsAdapter$1... 
     [java] Transforming com.gluegadget.hndroid.NewsAdapter$ViewHolder... 
     [java] Transforming com.gluegadget.hndroid.NewsAdapter... 
     [java] Transforming com.gluegadget.hndroid.Preferences... 
     [java] Transforming com.gluegadget.hndroid.R$array... 
     [java] Transforming com.gluegadget.hndroid.R$attr... 
     [java] Transforming com.gluegadget.hndroid.R$drawable... 
     [java] Transforming com.gluegadget.hndroid.R$id... 
     [java] Transforming com.gluegadget.hndroid.R$layout... 
     [java] Transforming com.gluegadget.hndroid.R$string... 
     [java] Transforming com.gluegadget.hndroid.R$style... 
     [java] Transforming com.gluegadget.hndroid.R$xml... 
     [java] Transforming com.gluegadget.hndroid.R... 
     [java] Transforming com.gluegadget.hndroid.Submissions$1... 
     [java] Transforming com.gluegadget.hndroid.Submissions$2... 
     [java] Transforming com.gluegadget.hndroid.Submissions$3$1... 
     [java] Transforming com.gluegadget.hndroid.Submissions$3... 
     [java] Transforming com.gluegadget.hndroid.Submissions$4... 
     [java] Transforming com.gluegadget.hndroid.Submissions$5... 
     [java] Transforming com.gluegadget.hndroid.Submissions$6... 
     [java] Transforming com.gluegadget.hndroid.Submissions$7$1... 
     [java] Transforming com.gluegadget.hndroid.Submissions$7... 
     [java] Transforming com.gluegadget.hndroid.Submissions... 
     [java] Transforming org.htmlcleaner.BaseToken... 
     [java] Transforming org.htmlcleaner.BrowserCompactXmlSerializer... 
     [java] Transforming org.htmlcleaner.CleanerProperties... 
     [java] Transforming org.htmlcleaner.CleanerTransformations... 
     [java] Transforming org.htmlcleaner.CommandLine... 
     [java] Transforming org.htmlcleaner.CommentNode... 
     [java] Transforming org.htmlcleaner.CompactHtmlSerializer... 
     [java] Transforming org.htmlcleaner.CompactXmlSerializer... 
     [java] Transforming org.htmlcleaner.ConfigFileTagProvider$ConfigParser... 
     [java] Transforming org.htmlcleaner.ConfigFileTagProvider... 
     [java] Transforming org.htmlcleaner.ContentNode... 
     [java] Transforming org.htmlcleaner.DefaultTagProvider... 
     [java] Transforming org.htmlcleaner.DoctypeToken... 
     [java] Transforming org.htmlcleaner.DomSerializer... 
     [java] Transforming org.htmlcleaner.EndTagToken... 
     [java] Transforming org.htmlcleaner.HtmlCleaner$1... 
     [java] Transforming org.htmlcleaner.HtmlCleaner$CleanTimeValues... 
     [java] Transforming org.htmlcleaner.HtmlCleaner$OpenTags... 
     [java] Transforming org.htmlcleaner.HtmlCleaner$TagPos... 
     [java] Transforming org.htmlcleaner.HtmlCleaner... 
     [java] Transforming org.htmlcleaner.HtmlCleanerException... 
     [java] Transforming org.htmlcleaner.HtmlSerializer... 
     [java] Transforming org.htmlcleaner.HtmlTokenizer... 
     [java] Transforming org.htmlcleaner.ITagInfoProvider... 
     [java] Transforming org.htmlcleaner.Serializer$1... 
     [java] Transforming org.htmlcleaner.Serializer$HeadlessTagNode... 
     [java] Transforming org.htmlcleaner.Serializer... 
     [java] Transforming org.htmlcleaner.SimpleHtmlSerializer... 
     [java] Transforming org.htmlcleaner.SimpleXmlSerializer... 
     [java] Transforming org.htmlcleaner.SpecialEntity... 
     [java] Transforming org.htmlcleaner.TagInfo... 
     [java] Transforming org.htmlcleaner.TagNode$ITagNodeCondition... 
     [java] Transforming org.htmlcleaner.TagNode$TagAllCondition... 
     [java] Transforming org.htmlcleaner.TagNode$TagNodeAttExistsCondition... 
     [java] Transforming org.htmlcleaner.TagNode$TagNodeAttValueCondition... 
     [java] Transforming org.htmlcleaner.TagNode$TagNodeNameCondition... 
     [java] Transforming org.htmlcleaner.TagNode... 
     [java] Transforming org.htmlcleaner.TagNodeVisitor... 
     [java] Transforming org.htmlcleaner.TagToken... 
     [java] Transforming org.htmlcleaner.TagTransformation... 
     [java] Transforming org.htmlcleaner.Utils... 
     [java] Transforming org.htmlcleaner.XmlSerializer... 
     [java] Transforming org.htmlcleaner.XPather... 
     [java] Transforming org.htmlcleaner.XPatherException... 
     [java] Transforming net.nightwhistler.htmlspanner.spans.FontFamilySpan... 
     [java] Transforming net.nightwhistler.htmlspanner.spans.CenterSpan... 
     [java] Transforming net.nightwhistler.htmlspanner.HtmlSpanner... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.MonoSpaceHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.SubScriptHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.ItalicHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.NewLineHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.ListItemHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.MarginHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.RelativeSizeHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.TableHandler$1... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.PreHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.BoldHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.TableHandler$TableRowDrawable... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.SuperScriptHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.LinkHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.ImageHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.TableHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.TableHandler$Table... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.HeaderHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.CenterHandler... 
     [java] Transforming net.nightwhistler.htmlspanner.handlers.CenterHandler$1... 
     [java] Transforming net.nightwhistler.htmlspanner.FontFamily... 
     [java] Transforming net.nightwhistler.htmlspanner.TagNodeHandler... 
     [java] Writing to acteve/symbolic/SymbolicOperations.class
     [java] Writing to com/gluegadget/hndroid/BuildConfig.class
     [java] Writing to com/gluegadget/hndroid/Comment.class
     [java] Writing to com/gluegadget/hndroid/CommentDialog$1.class
     [java] Writing to com/gluegadget/hndroid/CommentDialog$ReadyListener.class
     [java] Writing to com/gluegadget/hndroid/CommentDialog$loginListener.class
     [java] Writing to com/gluegadget/hndroid/CommentDialog.class
     [java] Writing to com/gluegadget/hndroid/Comments$1.class
     [java] Writing to com/gluegadget/hndroid/Comments$2$1.class
     [java] Writing to com/gluegadget/hndroid/Comments$2.class
     [java] Writing to com/gluegadget/hndroid/Comments$3$1.class
     [java] Writing to com/gluegadget/hndroid/Comments$3.class
     [java] Writing to com/gluegadget/hndroid/Comments$4.class
     [java] Writing to com/gluegadget/hndroid/Comments$5.class
     [java] Writing to com/gluegadget/hndroid/Comments$6$1.class
     [java] Writing to com/gluegadget/hndroid/Comments$6.class
     [java] Writing to com/gluegadget/hndroid/Comments$OnCommentListener$1.class
     [java] Writing to com/gluegadget/hndroid/Comments$OnCommentListener.class
     [java] Writing to com/gluegadget/hndroid/Comments$OnReplyListener$1.class
     [java] Writing to com/gluegadget/hndroid/Comments$OnReplyListener.class
     [java] Writing to com/gluegadget/hndroid/Comments.class
     [java] Writing to com/gluegadget/hndroid/CommentsAdapter$ViewHolder.class
     [java] Writing to com/gluegadget/hndroid/CommentsAdapter.class
     [java] Writing to com/gluegadget/hndroid/EmmaInstrument/EmmaInstrumentation.class
     [java] Writing to com/gluegadget/hndroid/EmmaInstrument/FinishListener.class
     [java] Writing to com/gluegadget/hndroid/EmmaInstrument/InstrumentedActivity$CoverageCollector.class
     [java] Writing to com/gluegadget/hndroid/EmmaInstrument/InstrumentedActivity.class
     [java] Writing to com/gluegadget/hndroid/EmmaInstrument/SMSInstrumentedReceiver.class
     [java] Writing to com/gluegadget/hndroid/KarmaWidget$UpdateService.class
     [java] Writing to com/gluegadget/hndroid/KarmaWidget.class
     [java] Writing to com/gluegadget/hndroid/KarmaWidgetConfigurationActivity$1.class
     [java] Writing to com/gluegadget/hndroid/KarmaWidgetConfigurationActivity.class
     [java] Writing to com/gluegadget/hndroid/LoginDialog$1.class
     [java] Writing to com/gluegadget/hndroid/LoginDialog$ReadyListener.class
     [java] Writing to com/gluegadget/hndroid/LoginDialog$loginListener.class
     [java] Writing to com/gluegadget/hndroid/LoginDialog.class
     [java] Writing to com/gluegadget/hndroid/Main$1.class
     [java] Writing to com/gluegadget/hndroid/Main$10.class
     [java] Writing to com/gluegadget/hndroid/Main$11.class
     [java] Writing to com/gluegadget/hndroid/Main$12.class
     [java] Writing to com/gluegadget/hndroid/Main$13$1.class
     [java] Writing to com/gluegadget/hndroid/Main$13.class
     [java] Writing to com/gluegadget/hndroid/Main$2$1.class
     [java] Writing to com/gluegadget/hndroid/Main$2.class
     [java] Writing to com/gluegadget/hndroid/Main$3$1.class
     [java] Writing to com/gluegadget/hndroid/Main$3.class
     [java] Writing to com/gluegadget/hndroid/Main$4$1.class
     [java] Writing to com/gluegadget/hndroid/Main$4.class
     [java] Writing to com/gluegadget/hndroid/Main$5$1.class
     [java] Writing to com/gluegadget/hndroid/Main$5.class
     [java] Writing to com/gluegadget/hndroid/Main$6.class
     [java] Writing to com/gluegadget/hndroid/Main$7.class
     [java] Writing to com/gluegadget/hndroid/Main$8.class
     [java] Writing to com/gluegadget/hndroid/Main$9.class
     [java] Writing to com/gluegadget/hndroid/Main$OnLoginListener$1.class
     [java] Writing to com/gluegadget/hndroid/Main$OnLoginListener.class
     [java] Writing to com/gluegadget/hndroid/Main.class
     [java] Writing to com/gluegadget/hndroid/News.class
     [java] Writing to com/gluegadget/hndroid/NewsAdapter$1.class
     [java] Writing to com/gluegadget/hndroid/NewsAdapter$ViewHolder.class
     [java] Writing to com/gluegadget/hndroid/NewsAdapter.class
     [java] Writing to com/gluegadget/hndroid/Preferences.class
     [java] Writing to com/gluegadget/hndroid/R$array.class
     [java] Writing to com/gluegadget/hndroid/R$attr.class
     [java] Writing to com/gluegadget/hndroid/R$drawable.class
     [java] Writing to com/gluegadget/hndroid/R$id.class
     [java] Writing to com/gluegadget/hndroid/R$layout.class
     [java] Writing to com/gluegadget/hndroid/R$string.class
     [java] Writing to com/gluegadget/hndroid/R$style.class
     [java] Writing to com/gluegadget/hndroid/R$xml.class
     [java] Writing to com/gluegadget/hndroid/R.class
     [java] Writing to com/gluegadget/hndroid/Submissions$1.class
     [java] Writing to com/gluegadget/hndroid/Submissions$2.class
     [java] Writing to com/gluegadget/hndroid/Submissions$3$1.class
     [java] Writing to com/gluegadget/hndroid/Submissions$3.class
     [java] Writing to com/gluegadget/hndroid/Submissions$4.class
     [java] Writing to com/gluegadget/hndroid/Submissions$5.class
     [java] Writing to com/gluegadget/hndroid/Submissions$6.class
     [java] Writing to com/gluegadget/hndroid/Submissions$7$1.class
     [java] Writing to com/gluegadget/hndroid/Submissions$7.class
     [java] Writing to com/gluegadget/hndroid/Submissions.class
     [java] Writing to org/htmlcleaner/BaseToken.class
     [java] Writing to org/htmlcleaner/BrowserCompactXmlSerializer.class
     [java] Writing to org/htmlcleaner/CleanerProperties.class
     [java] Writing to org/htmlcleaner/CleanerTransformations.class
     [java] Writing to org/htmlcleaner/CommandLine.class
     [java] Writing to org/htmlcleaner/CommentNode.class
     [java] Writing to org/htmlcleaner/CompactHtmlSerializer.class
     [java] Writing to org/htmlcleaner/CompactXmlSerializer.class
     [java] Writing to org/htmlcleaner/ConfigFileTagProvider$ConfigParser.class
     [java] Writing to org/htmlcleaner/ConfigFileTagProvider.class
     [java] Writing to org/htmlcleaner/ContentNode.class
     [java] Writing to org/htmlcleaner/DefaultTagProvider.class
     [java] Writing to org/htmlcleaner/DoctypeToken.class
     [java] Writing to org/htmlcleaner/DomSerializer.class
     [java] Writing to org/htmlcleaner/EndTagToken.class
     [java] Writing to org/htmlcleaner/HtmlCleaner$1.class
     [java] Writing to org/htmlcleaner/HtmlCleaner$CleanTimeValues.class
     [java] Writing to org/htmlcleaner/HtmlCleaner$OpenTags.class
     [java] Writing to org/htmlcleaner/HtmlCleaner$TagPos.class
     [java] Writing to org/htmlcleaner/HtmlCleaner.class
     [java] Writing to org/htmlcleaner/HtmlCleanerException.class
     [java] Writing to org/htmlcleaner/HtmlSerializer.class
     [java] Writing to org/htmlcleaner/HtmlTokenizer.class
     [java] Writing to org/htmlcleaner/ITagInfoProvider.class
     [java] Writing to org/htmlcleaner/Serializer$1.class
     [java] Writing to org/htmlcleaner/Serializer$HeadlessTagNode.class
     [java] Writing to org/htmlcleaner/Serializer.class
     [java] Writing to org/htmlcleaner/SimpleHtmlSerializer.class
     [java] Writing to org/htmlcleaner/SimpleXmlSerializer.class
     [java] Writing to org/htmlcleaner/SpecialEntity.class
     [java] Writing to org/htmlcleaner/TagInfo.class
     [java] Writing to org/htmlcleaner/TagNode$ITagNodeCondition.class
     [java] Writing to org/htmlcleaner/TagNode$TagAllCondition.class
     [java] Writing to org/htmlcleaner/TagNode$TagNodeAttExistsCondition.class
     [java] Writing to org/htmlcleaner/TagNode$TagNodeAttValueCondition.class
     [java] Writing to org/htmlcleaner/TagNode$TagNodeNameCondition.class
     [java] Writing to org/htmlcleaner/TagNode.class
     [java] Writing to org/htmlcleaner/TagNodeVisitor.class
     [java] Writing to org/htmlcleaner/TagToken.class
     [java] Writing to org/htmlcleaner/TagTransformation.class
     [java] Writing to org/htmlcleaner/Utils.class
     [java] Writing to org/htmlcleaner/XmlSerializer.class
     [java] Writing to org/htmlcleaner/XPather.class
     [java] Writing to org/htmlcleaner/XPatherException.class
     [java] Writing to net/nightwhistler/htmlspanner/spans/FontFamilySpan.class
     [java] Writing to net/nightwhistler/htmlspanner/spans/CenterSpan.class
     [java] Writing to net/nightwhistler/htmlspanner/HtmlSpanner.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/MonoSpaceHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/SubScriptHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/ItalicHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/NewLineHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/ListItemHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/MarginHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/RelativeSizeHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/TableHandler$1.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/PreHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/BoldHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/TableHandler$TableRowDrawable.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/SuperScriptHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/LinkHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/ImageHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/TableHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/TableHandler$Table.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/HeaderHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/CenterHandler.class
     [java] Writing to net/nightwhistler/htmlspanner/handlers/CenterHandler$1.class
     [java] Writing to net/nightwhistler/htmlspanner/FontFamily.class
     [java] Writing to net/nightwhistler/htmlspanner/TagNodeHandler.class
     [java] Soot finished on Sun Nov 09 06:06:42 UTC 2014
     [java] Soot has run for 0 min. 34 sec.
     [java] original jar: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/libs/htmlcleaner-2.2.jar
     [java] copy from original jar: org/htmlcleaner/HtmlCleanerForAnt.class
     [java] copy from original jar: org/htmlcleaner/HtmlNode.class
     [java] copy from original jar: org/htmlcleaner/JDomSerializer.class
     [java] copy from original jar: org/htmlcleaner/PrettyHtmlSerializer.class
     [java] copy from original jar: org/htmlcleaner/PrettyXmlSerializer.class

-obfuscate:

-dex:
      [dex] input: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t/instrumented.jar
      [dex] input: /home/vagrant/android-sdk-linux/tools/lib/emma_device.jar
      [dex] Pre-Dexing /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/a3t/instrumented.jar -> instrumented-98cfd926c683ff9d7355e87130b53fd9.jar
      [dex] Using Pre-Dexed emma_device-e790229f52a04d2b195df6976ccc31d7.jar <- /home/vagrant/android-sdk-linux/tools/lib/emma_device.jar
      [dex] Found modified input file
      [dex] Converting compiled files and external libraries into /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/classes.dex...
       [dx] Merged dex A (154 defs/407.4KiB) with dex B (297 defs/326.8KiB). Result is 451 defs/893.1KiB. Took 1.2s

-crunch:
   [crunch] Crunching PNG Files in source dir: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/res
   [crunch] To destination dir: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/res
   [crunch] Crunched 0 PNG files to update cache

-package-resources:
     [aapt] No changed resources or assets. Main.ap_ remains untouched

-package:
[apkbuilder] Found modified input file
[apkbuilder] Creating Main-debug-unaligned.apk and signing it with a debug key...

-post-package:

-do-debug:
 [zipalign] Running zip align on final apk...
     [echo] Debug Package: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/Main-debug.apk
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/build.prop
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/build.prop
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/build.prop
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.gluegadget.hndroid_3_src/bin/build.prop

-post-build:

debug:

BUILD SUCCESSFUL
Total time: 1 minute 3 seconds
