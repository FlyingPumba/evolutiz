public class org.scoutant.blokish.AppRater extends java.lang.Object
{
    private static final int DAYS_UNTIL_PROMPT;
    private static final int LAUNCHES_UNTIL_PROMPT;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final acteve.symbolic.integer.Expression DAYS_UNTIL_PROMPT$sym;
    private static final int DAYS_UNTIL_PROMPT$a3tid;
    private static final acteve.symbolic.integer.Expression LAUNCHES_UNTIL_PROMPT$sym;
    private static final int LAUNCHES_UNTIL_PROMPT$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.AppRater r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.AppRater;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32419, 1);
        _sym_tmp_1 = <org.scoutant.blokish.AppRater: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 448);
        $r1 = <org.scoutant.blokish.AppRater: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45366, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.AppRater: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45366, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public static void app_launched(android.content.Context)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $b11$sym, $l10$sym, $l9$sym, $l8$sym, $b7$sym, $l6$sym, $l5$sym, $b4$sym, $l3$sym, $l2$sym, $l1$sym, $z0$sym, l0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        android.content.Context r0;
        boolean[][] $r1;
        boolean[] r2;
        android.content.SharedPreferences r3;
        android.content.SharedPreferences$Editor r4;
        long l0, $l1, $l2, $l3, $l5, $l6, $l8, $l9, $l10;
        java.lang.Long r5;
        boolean $z0;
        byte $b4, $b7, $b11;
        org.scoutant.blokish.RateDialog $r8;

        r0 := @parameter0: android.content.Context;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21742, 32420, 1);
        _sym_tmp_1 = <org.scoutant.blokish.AppRater: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 448);
        $r1 = <org.scoutant.blokish.AppRater: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45367, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.AppRater: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45367, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8539, null, null, null);
        r3 = virtualinvoke r0.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>("apprater", 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        $z0 = interfaceinvoke r3.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("dontshowagain", 0);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45368, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        return;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45368, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5321, null);
        r4 = interfaceinvoke r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2333, null, null, null);
        $l1 = interfaceinvoke r3.<android.content.SharedPreferences: long getLong(java.lang.String,long)>("launch_count", 0L);
        $l1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2333);
        l0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,long,long)>($l1$sym, null, $l1, 1L);
        l0 = $l1 + 1L;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8331, null, null, l0$sym);
        interfaceinvoke r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("launch_count", l0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2333, null, null, null);
        $l2 = interfaceinvoke r3.<android.content.SharedPreferences: long getLong(java.lang.String,long)>("date_firstlaunch", 0L);
        $l2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2333);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(81, $l2$sym);
        r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(359, null);
        $l3 = virtualinvoke r5.<java.lang.Long: long longValue()>();
        $l3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(359);
        $b4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,long,long)>($l3$sym, null, $l3, 0L);
        $b4 = $l3 cmp 0L;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($b4$sym, null, $b4, 0);
        if $b4 != 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45369, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(212);
        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(212);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(81, $l5$sym);
        r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(359, null);
        $l6 = virtualinvoke r5.<java.lang.Long: long longValue()>();
        $l6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(359);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8331, null, null, $l6$sym);
        interfaceinvoke r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("date_firstlaunch", $l6);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45369, 1);
        goto label5;

     label5:
        $b7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,long,long)>(l0$sym, null, l0, 8L);
        $b7 = l0 cmp 8L;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($b7$sym, null, $b7, 0);
        if $b7 < 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45370, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(212);
        $l8 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l8$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(212);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(359, null);
        $l9 = virtualinvoke r5.<java.lang.Long: long longValue()>();
        $l9$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(359);
        $l10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,long,long)>($l9$sym, null, $l9, 259200000L);
        $l10 = $l9 + 259200000L;
        $b11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,long,long)>($l8$sym, $l10$sym, $l8, $l10);
        $b11 = $l8 cmp $l10;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($b11$sym, null, $b11, 0);
        if $b11 < 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45371, 0);
        $r8 = new org.scoutant.blokish.RateDialog;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke $r8.<org.scoutant.blokish.RateDialog: void <init>(android.content.Context)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(107, null);
        virtualinvoke $r8.<org.scoutant.blokish.RateDialog: void show()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label8;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45370, 1);
        goto label8;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45371, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8350, null);
        interfaceinvoke r4.<android.content.SharedPreferences$Editor: boolean commit()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32421, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.AppRater: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32422, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.AppRater: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 448);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.AppRater: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(448);
        <org.scoutant.blokish.AppRater: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[8];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/AppRater", -8463015030687656455L);
        return $r0;
    }
}
public final class org.scoutant.blokish.BuildConfig extends java.lang.Object
{
    public static final boolean DEBUG;
    public static final acteve.symbolic.integer.Expression DEBUG$sym;
    public static final int DEBUG$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.BuildConfig r0;

        r0 := @this: org.scoutant.blokish.BuildConfig;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32423, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
class org.scoutant.blokish.BusyIndicator$1 extends java.lang.Object implements android.view.animation.Interpolator
{
    final org.scoutant.blokish.BusyIndicator this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.BusyIndicator)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator$1 r0;
        org.scoutant.blokish.BusyIndicator r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.BusyIndicator$1;
        r1 := @parameter0: org.scoutant.blokish.BusyIndicator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21744, 32424, 2);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 449);
        $r2 = <org.scoutant.blokish.BusyIndicator$1: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45372, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.BusyIndicator$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45372, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 450);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.BusyIndicator$1: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(450);
        r0.<org.scoutant.blokish.BusyIndicator$1: org.scoutant.blokish.BusyIndicator this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public float getInterpolation(float)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $f3$sym, $f2$sym, $i0$sym, $f1$sym, r2$sym, f0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, $i0;
        org.scoutant.blokish.BusyIndicator$1 r0;
        float f0, $f1, $f2, $f3;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.BusyIndicator$1;
        f0 := @parameter0: float;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(2594, 32425, 2);
        f0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 449);
        $r1 = <org.scoutant.blokish.BusyIndicator$1: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45373, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.BusyIndicator$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45373, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        $f1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>(f0$sym, null, f0, 12.0F);
        $f1 = f0 * 12.0F;
        $i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f1$sym, 4);
        $i0 = (int) $f1;
        $f2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i0$sym, 6);
        $f2 = (float) $i0;
        $f3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f2$sym, null, $f2, 12.0F);
        $f3 = $f2 / 12.0F;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(2594, $f3$sym);
        return $f3;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32426, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.BusyIndicator$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32427, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 449);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.BusyIndicator$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(449);
        <org.scoutant.blokish.BusyIndicator$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/BusyIndicator$1", 4320153509509806689L);
        return $r0;
    }
}
class org.scoutant.blokish.BusyIndicator$2 extends java.lang.Object implements java.lang.Runnable
{
    final org.scoutant.blokish.BusyIndicator this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.BusyIndicator)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator$2 r0;
        org.scoutant.blokish.BusyIndicator r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.BusyIndicator$2;
        r1 := @parameter0: org.scoutant.blokish.BusyIndicator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21744, 32428, 2);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 451);
        $r2 = <org.scoutant.blokish.BusyIndicator$2: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45374, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.BusyIndicator$2: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45374, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 452);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.BusyIndicator$2: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(452);
        r0.<org.scoutant.blokish.BusyIndicator$2: org.scoutant.blokish.BusyIndicator this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void run()
    {
        acteve.symbolic.integer.Expression _sym_tmp_9, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator$2 r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.BusyIndicator $r3, $r5, $r6, $r8, $r10, $r13, $r15;
        android.view.View $r4, $r7, $r11, $r14;
        boolean $z0;
        android.graphics.drawable.Drawable $r9;
        android.view.animation.Animation $r12;
        android.view.animation.RotateAnimation $r16;

        r0 := @this: org.scoutant.blokish.BusyIndicator$2;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(533, 32429, 1);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 451);
        $r1 = <org.scoutant.blokish.BusyIndicator$2: boolean[][] $VRc>;
        _sym_tmp_9 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45375, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.BusyIndicator$2: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45375, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 452);
        $r3 = r0.<org.scoutant.blokish.BusyIndicator$2: org.scoutant.blokish.BusyIndicator this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21745, null);
        $r4 = staticinvoke <org.scoutant.blokish.BusyIndicator: android.view.View access$000(org.scoutant.blokish.BusyIndicator)>($r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, null);
        virtualinvoke $r4.<android.view.View: void setVisibility(int)>(0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.BusyIndicator$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 452);
        $r5 = r0.<org.scoutant.blokish.BusyIndicator$2: org.scoutant.blokish.BusyIndicator this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21746, null);
        $z0 = staticinvoke <org.scoutant.blokish.BusyIndicator: boolean access$100(org.scoutant.blokish.BusyIndicator)>($r5);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21746);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_9 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45376, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.BusyIndicator$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 452);
        $r6 = r0.<org.scoutant.blokish.BusyIndicator$2: org.scoutant.blokish.BusyIndicator this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21745, null);
        $r7 = staticinvoke <org.scoutant.blokish.BusyIndicator: android.view.View access$000(org.scoutant.blokish.BusyIndicator)>($r6);
        _sym_tmp_5 = r0.<org.scoutant.blokish.BusyIndicator$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 452);
        $r8 = r0.<org.scoutant.blokish.BusyIndicator$2: org.scoutant.blokish.BusyIndicator this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21747, null);
        $r9 = staticinvoke <org.scoutant.blokish.BusyIndicator: android.graphics.drawable.Drawable access$200(org.scoutant.blokish.BusyIndicator)>($r8);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1446, null, null);
        virtualinvoke $r7.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r9);
        _sym_tmp_6 = r0.<org.scoutant.blokish.BusyIndicator$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 452);
        $r10 = r0.<org.scoutant.blokish.BusyIndicator$2: org.scoutant.blokish.BusyIndicator this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21745, null);
        $r11 = staticinvoke <org.scoutant.blokish.BusyIndicator: android.view.View access$000(org.scoutant.blokish.BusyIndicator)>($r10);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6701, null);
        $r12 = virtualinvoke $r11.<android.view.View: android.view.animation.Animation getAnimation()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_9 = null;
        if $r12 != null goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45377, 0);
        _sym_tmp_7 = r0.<org.scoutant.blokish.BusyIndicator$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 452);
        $r13 = r0.<org.scoutant.blokish.BusyIndicator$2: org.scoutant.blokish.BusyIndicator this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21745, null);
        $r14 = staticinvoke <org.scoutant.blokish.BusyIndicator: android.view.View access$000(org.scoutant.blokish.BusyIndicator)>($r13);
        _sym_tmp_8 = r0.<org.scoutant.blokish.BusyIndicator$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 452);
        $r15 = r0.<org.scoutant.blokish.BusyIndicator$2: org.scoutant.blokish.BusyIndicator this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21748, null);
        $r16 = staticinvoke <org.scoutant.blokish.BusyIndicator: android.view.animation.RotateAnimation access$300(org.scoutant.blokish.BusyIndicator)>($r15);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2209, null, null);
        virtualinvoke $r14.<android.view.View: void startAnimation(android.view.animation.Animation)>($r16);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45376, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45377, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32430, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.BusyIndicator$2: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32431, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 451);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.BusyIndicator$2: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(451);
        <org.scoutant.blokish.BusyIndicator$2: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[4];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/BusyIndicator$2", 546055096349754234L);
        return $r0;
    }
}
class org.scoutant.blokish.BusyIndicator$3 extends java.lang.Object implements java.lang.Runnable
{
    final org.scoutant.blokish.BusyIndicator this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.BusyIndicator)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator$3 r0;
        org.scoutant.blokish.BusyIndicator r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.BusyIndicator$3;
        r1 := @parameter0: org.scoutant.blokish.BusyIndicator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21744, 32432, 2);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 453);
        $r2 = <org.scoutant.blokish.BusyIndicator$3: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45378, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.BusyIndicator$3: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45378, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 454);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.BusyIndicator$3: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(454);
        r0.<org.scoutant.blokish.BusyIndicator$3: org.scoutant.blokish.BusyIndicator this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void run()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator$3 r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.BusyIndicator $r3, $r5, $r8;
        android.view.View $r4, $r6, $r9;
        android.view.animation.Animation $r7;

        r0 := @this: org.scoutant.blokish.BusyIndicator$3;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(533, 32433, 1);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 453);
        $r1 = <org.scoutant.blokish.BusyIndicator$3: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45379, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.BusyIndicator$3: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45379, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 454);
        $r3 = r0.<org.scoutant.blokish.BusyIndicator$3: org.scoutant.blokish.BusyIndicator this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21745, null);
        $r4 = staticinvoke <org.scoutant.blokish.BusyIndicator: android.view.View access$000(org.scoutant.blokish.BusyIndicator)>($r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, null);
        virtualinvoke $r4.<android.view.View: void setVisibility(int)>(4);
        _sym_tmp_3 = r0.<org.scoutant.blokish.BusyIndicator$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 454);
        $r5 = r0.<org.scoutant.blokish.BusyIndicator$3: org.scoutant.blokish.BusyIndicator this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21745, null);
        $r6 = staticinvoke <org.scoutant.blokish.BusyIndicator: android.view.View access$000(org.scoutant.blokish.BusyIndicator)>($r5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6701, null);
        $r7 = virtualinvoke $r6.<android.view.View: android.view.animation.Animation getAnimation()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_5 = null;
        if $r7 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45380, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.BusyIndicator$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 454);
        $r8 = r0.<org.scoutant.blokish.BusyIndicator$3: org.scoutant.blokish.BusyIndicator this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21745, null);
        $r9 = staticinvoke <org.scoutant.blokish.BusyIndicator: android.view.View access$000(org.scoutant.blokish.BusyIndicator)>($r8);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2220, null);
        virtualinvoke $r9.<android.view.View: void clearAnimation()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45380, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32434, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.BusyIndicator$3: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32435, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 453);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.BusyIndicator$3: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(453);
        <org.scoutant.blokish.BusyIndicator$3: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/BusyIndicator$3", -1951089306258213160L);
        return $r0;
    }
}
public class org.scoutant.blokish.BusyIndicator extends java.lang.Object
{
    private android.view.View view;
    private android.os.Handler uiHandler;
    private boolean visible;
    private android.graphics.drawable.Drawable drawable;
    private android.view.animation.RotateAnimation animation;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private int view$a3tid;
    private int uiHandler$a3tid;
    private acteve.symbolic.integer.Expression visible$sym;
    private int visible$a3tid;
    private int drawable$a3tid;
    private int animation$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(android.content.Context, android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_12, b0$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator r0;
        android.content.Context r1;
        android.view.View r2;
        boolean[][] $r3;
        boolean[] r4;
        byte b0;
        android.os.Handler $r5;
        android.content.res.Resources $r6;
        android.graphics.drawable.Drawable $r7;
        android.view.animation.RotateAnimation $r8, $r9, $r10, $r12, $r13, $r14;
        org.scoutant.blokish.BusyIndicator$1 $r11;

        r0 := @this: org.scoutant.blokish.BusyIndicator;
        r1 := @parameter0: android.content.Context;
        r2 := @parameter1: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21749, 32436, 3);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 455);
        $r3 = <org.scoutant.blokish.BusyIndicator: boolean[][] $VRc>;
        _sym_tmp_12 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45381, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.BusyIndicator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45381, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 0);
        r4 = $r3[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.scoutant.blokish.BusyIndicator: acteve.symbolic.integer.Expression visible$sym> = null;
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator: int visible$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 456);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.BusyIndicator: int visible$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(456);
        r0.<org.scoutant.blokish.BusyIndicator: boolean visible> = 0;
        _sym_tmp_3 = r0.<org.scoutant.blokish.BusyIndicator: int view$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 457);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.BusyIndicator: int view$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(457);
        r0.<org.scoutant.blokish.BusyIndicator: android.view.View view> = r2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, null);
        virtualinvoke r2.<android.view.View: void setVisibility(int)>(4);
        $r5 = new android.os.Handler;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<android.os.Handler: void <init>()>();
        _sym_tmp_4 = r0.<org.scoutant.blokish.BusyIndicator: int uiHandler$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 458);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.BusyIndicator: int uiHandler$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(458);
        r0.<org.scoutant.blokish.BusyIndicator: android.os.Handler uiHandler> = $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1196, null);
        $r6 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1293, null, null);
        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(2130837533);
        _sym_tmp_5 = r0.<org.scoutant.blokish.BusyIndicator: int drawable$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 459);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.BusyIndicator: int drawable$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(459);
        r0.<org.scoutant.blokish.BusyIndicator: android.graphics.drawable.Drawable drawable> = $r7;
        $r8 = new android.view.animation.RotateAnimation;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6866, null, null, null, null, null, null, null);
        specialinvoke $r8.<android.view.animation.RotateAnimation: void <init>(float,float,int,float,int,float)>(0.0F, 360.0F, 1, 0.5F, 1, 0.5F);
        _sym_tmp_6 = r0.<org.scoutant.blokish.BusyIndicator: int animation$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 460);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.BusyIndicator: int animation$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(460);
        r0.<org.scoutant.blokish.BusyIndicator: android.view.animation.RotateAnimation animation> = $r8;
        _sym_tmp_7 = r0.<org.scoutant.blokish.BusyIndicator: int animation$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 460);
        $r9 = r0.<org.scoutant.blokish.BusyIndicator: android.view.animation.RotateAnimation animation>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6793, null, null);
        virtualinvoke $r9.<android.view.animation.RotateAnimation: void setRepeatCount(int)>(-1);
        b0$sym = null;
        b0 = 12;
        _sym_tmp_8 = r0.<org.scoutant.blokish.BusyIndicator: int animation$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 460);
        $r10 = r0.<org.scoutant.blokish.BusyIndicator: android.view.animation.RotateAnimation animation>;
        $r11 = new org.scoutant.blokish.BusyIndicator$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21744, null, null);
        specialinvoke $r11.<org.scoutant.blokish.BusyIndicator$1: void <init>(org.scoutant.blokish.BusyIndicator)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2242, null, null);
        virtualinvoke $r10.<android.view.animation.RotateAnimation: void setInterpolator(android.view.animation.Interpolator)>($r11);
        _sym_tmp_9 = r0.<org.scoutant.blokish.BusyIndicator: int animation$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 460);
        $r12 = r0.<org.scoutant.blokish.BusyIndicator: android.view.animation.RotateAnimation animation>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2078, null, null);
        virtualinvoke $r12.<android.view.animation.RotateAnimation: void setDuration(long)>(1800L);
        _sym_tmp_10 = r0.<org.scoutant.blokish.BusyIndicator: int animation$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 460);
        $r13 = r0.<org.scoutant.blokish.BusyIndicator: android.view.animation.RotateAnimation animation>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6702, null, null);
        virtualinvoke $r13.<android.view.animation.RotateAnimation: void setStartTime(long)>(-1L);
        _sym_tmp_11 = r0.<org.scoutant.blokish.BusyIndicator: int animation$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 460);
        $r14 = r0.<org.scoutant.blokish.BusyIndicator: android.view.animation.RotateAnimation animation>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6789, null, null);
        virtualinvoke $r14.<android.view.animation.RotateAnimation: void setStartOffset(long)>(0L);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        return;
    }

    public void show()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator r0;
        boolean[][] $r1;
        boolean[] r2;
        android.os.Handler $r3;
        org.scoutant.blokish.BusyIndicator$2 $r4;

        r0 := @this: org.scoutant.blokish.BusyIndicator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(107, 32437, 1);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 455);
        $r1 = <org.scoutant.blokish.BusyIndicator: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45382, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.BusyIndicator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45382, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        r0.<org.scoutant.blokish.BusyIndicator: acteve.symbolic.integer.Expression visible$sym> = null;
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator: int visible$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 456);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.BusyIndicator: int visible$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(456);
        r0.<org.scoutant.blokish.BusyIndicator: boolean visible> = 1;
        _sym_tmp_3 = r0.<org.scoutant.blokish.BusyIndicator: int uiHandler$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 458);
        $r3 = r0.<org.scoutant.blokish.BusyIndicator: android.os.Handler uiHandler>;
        $r4 = new org.scoutant.blokish.BusyIndicator$2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21744, null, null);
        specialinvoke $r4.<org.scoutant.blokish.BusyIndicator$2: void <init>(org.scoutant.blokish.BusyIndicator)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1657, null, null);
        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void hide()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator r0;
        boolean[][] $r1;
        boolean[] r2;
        android.os.Handler $r3;
        org.scoutant.blokish.BusyIndicator$3 $r4;

        r0 := @this: org.scoutant.blokish.BusyIndicator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(2210, 32438, 1);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 455);
        $r1 = <org.scoutant.blokish.BusyIndicator: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45383, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.BusyIndicator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45383, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        r0.<org.scoutant.blokish.BusyIndicator: acteve.symbolic.integer.Expression visible$sym> = null;
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator: int visible$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 456);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.BusyIndicator: int visible$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(456);
        r0.<org.scoutant.blokish.BusyIndicator: boolean visible> = 0;
        _sym_tmp_3 = r0.<org.scoutant.blokish.BusyIndicator: int uiHandler$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 458);
        $r3 = r0.<org.scoutant.blokish.BusyIndicator: android.os.Handler uiHandler>;
        $r4 = new org.scoutant.blokish.BusyIndicator$3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21744, null, null);
        specialinvoke $r4.<org.scoutant.blokish.BusyIndicator$3: void <init>(org.scoutant.blokish.BusyIndicator)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1657, null, null);
        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    static android.view.View access$000(org.scoutant.blokish.BusyIndicator)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator r0;
        boolean[][] $r1;
        boolean[] r2;
        android.view.View $r3;

        r0 := @parameter0: org.scoutant.blokish.BusyIndicator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21745, 32439, 1);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 455);
        $r1 = <org.scoutant.blokish.BusyIndicator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45384, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.BusyIndicator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45384, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator: int view$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 457);
        $r3 = r0.<org.scoutant.blokish.BusyIndicator: android.view.View view>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    static boolean access$100(org.scoutant.blokish.BusyIndicator)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0;

        r0 := @parameter0: org.scoutant.blokish.BusyIndicator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21746, 32440, 1);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 455);
        $r1 = <org.scoutant.blokish.BusyIndicator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45385, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.BusyIndicator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45385, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        $z0$sym = r0.<org.scoutant.blokish.BusyIndicator: acteve.symbolic.integer.Expression visible$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator: int visible$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 456);
        $z0 = r0.<org.scoutant.blokish.BusyIndicator: boolean visible>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21746, $z0$sym);
        return $z0;
    }

    static android.graphics.drawable.Drawable access$200(org.scoutant.blokish.BusyIndicator)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator r0;
        boolean[][] $r1;
        boolean[] r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @parameter0: org.scoutant.blokish.BusyIndicator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21747, 32441, 1);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 455);
        $r1 = <org.scoutant.blokish.BusyIndicator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45386, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.BusyIndicator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45386, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 5);
        r2 = $r1[5];
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator: int drawable$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 459);
        $r3 = r0.<org.scoutant.blokish.BusyIndicator: android.graphics.drawable.Drawable drawable>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    static android.view.animation.RotateAnimation access$300(org.scoutant.blokish.BusyIndicator)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.BusyIndicator r0;
        boolean[][] $r1;
        boolean[] r2;
        android.view.animation.RotateAnimation $r3;

        r0 := @parameter0: org.scoutant.blokish.BusyIndicator;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21748, 32442, 1);
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 455);
        $r1 = <org.scoutant.blokish.BusyIndicator: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45387, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.BusyIndicator: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45387, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 6);
        r2 = $r1[6];
        _sym_tmp_2 = r0.<org.scoutant.blokish.BusyIndicator: int animation$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 460);
        $r3 = r0.<org.scoutant.blokish.BusyIndicator: android.view.animation.RotateAnimation animation>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32443, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.BusyIndicator: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 7);
        r1 = $r0[7];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32444, 0);
        $r0 = newmultiarray (boolean)[8][];
        _sym_tmp_1 = <org.scoutant.blokish.BusyIndicator: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 455);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.BusyIndicator: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(455);
        <org.scoutant.blokish.BusyIndicator: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[1];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[1];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/BusyIndicator", -2366380365947733393L);
        return $r0;
    }
}
class org.scoutant.blokish.ButtonsView$1 extends java.lang.Object implements android.view.View$OnClickListener
{
    final org.scoutant.blokish.ButtonsView this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.ButtonsView)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.ButtonsView$1 r0;
        org.scoutant.blokish.ButtonsView r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.ButtonsView$1;
        r1 := @parameter0: org.scoutant.blokish.ButtonsView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21750, 32445, 2);
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 461);
        $r2 = <org.scoutant.blokish.ButtonsView$1: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45388, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.ButtonsView$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45388, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 462);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(462);
        r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_45, $i12$sym, $i11$sym, $z2$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $r34$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_44, _sym_tmp_43, _sym_tmp_42, _sym_tmp_41, _sym_tmp_40, _sym_tmp_39, _sym_tmp_38, _sym_tmp_37, _sym_tmp_36, _sym_tmp_35, _sym_tmp_34, _sym_tmp_33, _sym_tmp_32, _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.scoutant.blokish.ButtonsView$1 r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.PieceUI r4;
        org.scoutant.blokish.model.Move r5, $r8;
        boolean z0, $z2;
        org.scoutant.blokish.ButtonsView $r6, $r10, $r13, $r17, $r18, $r21, $r29, $r38, $r40, $r44, $r47, $r50, $r53, $r55, $r58;
        org.scoutant.blokish.GameView $r7, $r11, $r14, $r19, $r23, $r30, $r39, $r41, $r48, $r51, $r54, $r56, $r59;
        org.scoutant.blokish.model.Piece $r9, $r16, $r25, $r33, $r43;
        org.scoutant.blokish.model.Game $r12, $r20, $r31;
        org.scoutant.blokish.PieceUI[] $r15;
        android.view.ViewParent $r22;
        android.widget.TextView[] $r24;
        android.widget.TextView $r26;
        java.lang.StringBuilder $r27, $r28, $r36;
        java.util.List $r32;
        java.lang.Object $r34;
        org.scoutant.blokish.model.Board $r35;
        java.lang.String $r37;
        org.scoutant.blokish.UI $r42, $r49, $r52, $r57;
        android.content.Context $r45;
        android.content.SharedPreferences $r46;

        r0 := @this: org.scoutant.blokish.ButtonsView$1;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1399, 32446, 2);
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 461);
        $r2 = <org.scoutant.blokish.ButtonsView$1: boolean[][] $VRc>;
        _sym_tmp_45 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_45, 45389, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.ButtonsView$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_45, 45389, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ui", "ok...");
        _sym_tmp_2 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 462);
        $r6 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r7 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r6);
        _sym_tmp_3 = $r7.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 463);
        r4 = $r7.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_45 = null;
        if r4 != null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_45, 45390, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7, null, null);
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ui", "cannot retrieve piece!");
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        return;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_45, 45390, 1);
        goto label3;

     label3:
        $r8 = new org.scoutant.blokish.model.Move;
        _sym_tmp_4 = r4.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 464);
        $r9 = r4.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i2$sym = r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_5 = r4.<org.scoutant.blokish.PieceUI: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 465);
        $i2 = r4.<org.scoutant.blokish.PieceUI: int i>;
        $i3$sym = r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_6 = r4.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 466);
        $i3 = r4.<org.scoutant.blokish.PieceUI: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21752, null, null, $i2$sym, $i3$sym);
        specialinvoke $r8.<org.scoutant.blokish.model.Move: void <init>(org.scoutant.blokish.model.Piece,int,int)>($r9, $i2, $i3);
        r5 = $r8;
        _sym_tmp_7 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 462);
        $r10 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r11 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r10);
        _sym_tmp_8 = $r11.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 467);
        $r12 = $r11.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21753, null, null);
        z0 = virtualinvoke $r12.<org.scoutant.blokish.model.Game: boolean valid(org.scoutant.blokish.model.Move)>(r5);
        z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21753);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_45 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, null, z0, 0);
        if z0 == 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_45, 45391, 0);
        r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression movable$sym> = null;
        _sym_tmp_9 = r4.<org.scoutant.blokish.PieceUI: int movable$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_9, 468);
        _sym_tmp_9 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r4.<org.scoutant.blokish.PieceUI: int movable$a3tid> = _sym_tmp_9;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(468);
        r4.<org.scoutant.blokish.PieceUI: boolean movable> = 0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6415, null, null);
        virtualinvoke r4.<org.scoutant.blokish.PieceUI: void setLongClickable(boolean)>(0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1333, null, null);
        virtualinvoke r4.<org.scoutant.blokish.PieceUI: void setClickable(boolean)>(0);
        _sym_tmp_10 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 462);
        $r13 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r14 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r13);
        _sym_tmp_11 = $r14.<org.scoutant.blokish.GameView: int lasts$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 469);
        $r15 = $r14.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI[] lasts>;
        _sym_tmp_12 = r4.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 464);
        $r16 = r4.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i4$sym = $r16.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_13 = $r16.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 470);
        $i4 = $r16.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r15, $i4);
        $r15[$i4] = r4;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke r4.<org.scoutant.blokish.PieceUI: void invalidate()>();
        _sym_tmp_14 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 462);
        $r17 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, null);
        virtualinvoke $r17.<org.scoutant.blokish.ButtonsView: void setVisibility(int)>(4);
        _sym_tmp_15 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 462);
        $r18 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r19 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r18);
        _sym_tmp_16 = $r19.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 467);
        $r20 = $r19.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21754, null, null);
        virtualinvoke $r20.<org.scoutant.blokish.model.Game: boolean play(org.scoutant.blokish.model.Move)>(r5);
        _sym_tmp_17 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 462);
        $r21 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1204, null);
        $r22 = virtualinvoke $r21.<org.scoutant.blokish.ButtonsView: android.view.ViewParent getParent()>();
        $r23 = (org.scoutant.blokish.GameView) $r22;
        _sym_tmp_18 = $r23.<org.scoutant.blokish.GameView: int tabs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 471);
        $r24 = $r23.<org.scoutant.blokish.GameView: android.widget.TextView[] tabs>;
        _sym_tmp_19 = r5.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 472);
        $r25 = r5.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        $i5$sym = $r25.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_20 = $r25.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 470);
        $i5 = $r25.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r24, $i5);
        $r26 = $r24[$i5];
        $r27 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        _sym_tmp_21 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 462);
        $r29 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r30 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r29);
        _sym_tmp_22 = $r30.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 467);
        $r31 = $r30.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_23 = $r31.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 473);
        $r32 = $r31.<org.scoutant.blokish.model.Game: java.util.List boards>;
        _sym_tmp_24 = r5.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 472);
        $r33 = r5.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        $i6$sym = $r33.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_25 = $r33.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 470);
        $i6 = $r33.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i6$sym);
        $r34 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>($i6);
        $r34$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r35 = (org.scoutant.blokish.model.Board) $r34;
        $i7$sym = $r35.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression score$sym>;
        _sym_tmp_26 = $r35.<org.scoutant.blokish.model.Board: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 474);
        $i7 = $r35.<org.scoutant.blokish.model.Board: int score>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i7$sym);
        $r36 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1348, null, null);
        virtualinvoke $r26.<android.widget.TextView: void setText(java.lang.CharSequence)>($r37);
        _sym_tmp_27 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 462);
        $r38 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r39 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r38);
        _sym_tmp_28 = $r39.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_28, 463);
        _sym_tmp_28 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r39.<org.scoutant.blokish.GameView: int selected$a3tid> = _sym_tmp_28;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(463);
        $r39.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected> = null;
        _sym_tmp_29 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 462);
        $r40 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r41 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r40);
        _sym_tmp_30 = $r41.<org.scoutant.blokish.GameView: int ui$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 475);
        $r42 = $r41.<org.scoutant.blokish.GameView: org.scoutant.blokish.UI ui>;
        _sym_tmp_31 = r4.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_31, 464);
        $r43 = r4.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i8$sym = $r43.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_32 = $r43.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_32, 470);
        $i8 = $r43.<org.scoutant.blokish.model.Piece: int color>;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, null, $i8, 1);
        $i9 = $i8 + 1;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, null, $i9, 4);
        $i10 = $i9 % 4;
        $r42.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym> = $i10$sym;
        _sym_tmp_33 = $r42.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_33, 476);
        _sym_tmp_33 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r42.<org.scoutant.blokish.UI: int turn$a3tid> = _sym_tmp_33;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(476);
        $r42.<org.scoutant.blokish.UI: int turn> = $i10;
        _sym_tmp_34 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_34, 462);
        $r44 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21755, null);
        $r45 = staticinvoke <org.scoutant.blokish.ButtonsView: android.content.Context access$100(org.scoutant.blokish.ButtonsView)>($r44);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(4842, null);
        $r46 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r45);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        $z2 = interfaceinvoke $r46.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("ai", 1);
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_45 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_45, 45392, 0);
        _sym_tmp_35 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_35, 462);
        $r47 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r48 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r47);
        _sym_tmp_36 = $r48.<org.scoutant.blokish.GameView: int ui$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_36, 475);
        $r49 = $r48.<org.scoutant.blokish.GameView: org.scoutant.blokish.UI ui>;
        _sym_tmp_37 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_37, 462);
        $r50 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r51 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r50);
        _sym_tmp_38 = $r51.<org.scoutant.blokish.GameView: int ui$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_38, 475);
        $r52 = $r51.<org.scoutant.blokish.GameView: org.scoutant.blokish.UI ui>;
        $i11$sym = $r52.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_39 = $r52.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_39, 476);
        $i11 = $r52.<org.scoutant.blokish.UI: int turn>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21756, null, $i11$sym);
        virtualinvoke $r49.<org.scoutant.blokish.UI: void think(int)>($i11);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        goto label7;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_45, 45392, 1);
        goto label5;

     label5:
        _sym_tmp_40 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_40, 462);
        $r53 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r54 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r53);
        _sym_tmp_41 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_41, 462);
        $r55 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r56 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r55);
        _sym_tmp_42 = $r56.<org.scoutant.blokish.GameView: int ui$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_42, 475);
        $r57 = $r56.<org.scoutant.blokish.GameView: org.scoutant.blokish.UI ui>;
        $i12$sym = $r57.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_43 = $r57.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_43, 476);
        $i12 = $r57.<org.scoutant.blokish.UI: int turn>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21757, null, $i12$sym);
        virtualinvoke $r54.<org.scoutant.blokish.GameView: void showPieces(int)>($i12);
        _sym_tmp_44 = r0.<org.scoutant.blokish.ButtonsView$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_44, 462);
        $r58 = r0.<org.scoutant.blokish.ButtonsView$1: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r59 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r58);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke $r59.<org.scoutant.blokish.GameView: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_45, 45391, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32447, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.ButtonsView$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32448, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 461);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.ButtonsView$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(461);
        <org.scoutant.blokish.ButtonsView$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[7];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/ButtonsView$1", -7798354808162619671L);
        return $r0;
    }
}
class org.scoutant.blokish.ButtonsView$2 extends java.lang.Object implements android.view.View$OnClickListener
{
    final org.scoutant.blokish.ButtonsView this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.ButtonsView)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.ButtonsView$2 r0;
        org.scoutant.blokish.ButtonsView r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.ButtonsView$2;
        r1 := @parameter0: org.scoutant.blokish.ButtonsView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21750, 32449, 2);
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 477);
        $r2 = <org.scoutant.blokish.ButtonsView$2: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45393, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.ButtonsView$2: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45393, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.ButtonsView$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 478);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.ButtonsView$2: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(478);
        r0.<org.scoutant.blokish.ButtonsView$2: org.scoutant.blokish.ButtonsView this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.ButtonsView$2 r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.ButtonsView $r4, $r7, $r9;
        org.scoutant.blokish.GameView $r5, $r8;
        org.scoutant.blokish.PieceUI $r6;

        r0 := @this: org.scoutant.blokish.ButtonsView$2;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1399, 32450, 2);
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 477);
        $r2 = <org.scoutant.blokish.ButtonsView$2: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45394, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.ButtonsView$2: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45394, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ui", "cancel...");
        _sym_tmp_2 = r0.<org.scoutant.blokish.ButtonsView$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 478);
        $r4 = r0.<org.scoutant.blokish.ButtonsView$2: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r5 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r4);
        _sym_tmp_3 = $r5.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 463);
        $r6 = $r5.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21758, null);
        virtualinvoke $r6.<org.scoutant.blokish.PieceUI: void replace()>();
        _sym_tmp_4 = r0.<org.scoutant.blokish.ButtonsView$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 478);
        $r7 = r0.<org.scoutant.blokish.ButtonsView$2: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21751, null);
        $r8 = staticinvoke <org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)>($r7);
        _sym_tmp_5 = $r8.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 463);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r8.<org.scoutant.blokish.GameView: int selected$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(463);
        $r8.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected> = null;
        _sym_tmp_6 = r0.<org.scoutant.blokish.ButtonsView$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 478);
        $r9 = r0.<org.scoutant.blokish.ButtonsView$2: org.scoutant.blokish.ButtonsView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, null);
        virtualinvoke $r9.<org.scoutant.blokish.ButtonsView: void setVisibility(int)>(4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32451, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.ButtonsView$2: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32452, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 477);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.ButtonsView$2: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(477);
        <org.scoutant.blokish.ButtonsView$2: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/ButtonsView$2", 4320153518115063240L);
        return $r0;
    }
}
public class org.scoutant.blokish.ButtonsView extends android.widget.FrameLayout
{
    protected static final java.lang.String tag;
    private android.content.Context context;
    private android.widget.ImageButton cancel;
    private android.widget.ImageButton ok;
    private org.scoutant.blokish.GameView game;
    private android.view.View$OnClickListener doOk;
    private android.view.View$OnClickListener doCancel;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    protected static final int tag$a3tid;
    private int context$a3tid;
    private int cancel$a3tid;
    private int ok$a3tid;
    private int game$a3tid;
    private int doOk$a3tid;
    private int doCancel$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(android.content.Context)
    {
        acteve.symbolic.integer.Expression _sym_tmp_11, $i2$sym, $i1$sym, $r7$sym, i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2;
        org.scoutant.blokish.ButtonsView r0;
        android.content.Context r1;
        boolean[][] $r2;
        boolean[] r3;
        android.view.Display r4;
        org.scoutant.blokish.ButtonsView$1 $r5;
        org.scoutant.blokish.ButtonsView$2 $r6;
        java.lang.Object $r7;
        android.view.WindowManager $r8;
        android.widget.FrameLayout$LayoutParams $r9;
        android.view.View$OnClickListener $r10, $r13;
        android.widget.ImageButton $r11, $r12, $r14, $r15;

        r0 := @this: org.scoutant.blokish.ButtonsView;
        r1 := @parameter0: android.content.Context;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(274, 32453, 2);
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 479);
        $r2 = <org.scoutant.blokish.ButtonsView: boolean[][] $VRc>;
        _sym_tmp_11 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45395, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.ButtonsView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45395, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke r0.<android.widget.FrameLayout: void <init>(android.content.Context)>(r1);
        $r5 = new org.scoutant.blokish.ButtonsView$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21750, null, null);
        specialinvoke $r5.<org.scoutant.blokish.ButtonsView$1: void <init>(org.scoutant.blokish.ButtonsView)>(r0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.ButtonsView: int doOk$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 480);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.ButtonsView: int doOk$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(480);
        r0.<org.scoutant.blokish.ButtonsView: android.view.View$OnClickListener doOk> = $r5;
        $r6 = new org.scoutant.blokish.ButtonsView$2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21750, null, null);
        specialinvoke $r6.<org.scoutant.blokish.ButtonsView$2: void <init>(org.scoutant.blokish.ButtonsView)>(r0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.ButtonsView: int doCancel$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 481);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.ButtonsView: int doCancel$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(481);
        r0.<org.scoutant.blokish.ButtonsView: android.view.View$OnClickListener doCancel> = $r6;
        _sym_tmp_4 = r0.<org.scoutant.blokish.ButtonsView: int context$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 482);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.ButtonsView: int context$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(482);
        r0.<org.scoutant.blokish.ButtonsView: android.content.Context context> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, null);
        virtualinvoke r0.<org.scoutant.blokish.ButtonsView: void setVisibility(int)>(4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(102, null, null);
        $r7 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");
        $r7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(102);
        $r8 = (android.view.WindowManager) $r7;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6534, null);
        r4 = interfaceinvoke $r8.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2097, null);
        $i1 = virtualinvoke r4.<android.view.Display: int getHeight()>();
        $i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2097);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1376, null);
        $i2 = virtualinvoke r4.<android.view.Display: int getWidth()>();
        $i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1376);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, $i2$sym, $i1, $i2);
        i0 = $i1 - $i2;
        $r9 = new android.widget.FrameLayout$LayoutParams;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(990, null, null, i0$sym, null);
        specialinvoke $r9.<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>(-1, i0, 80);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1369, null, null);
        virtualinvoke r0.<org.scoutant.blokish.ButtonsView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>($r9);
        _sym_tmp_5 = r0.<org.scoutant.blokish.ButtonsView: int doCancel$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 481);
        $r10 = r0.<org.scoutant.blokish.ButtonsView: android.view.View$OnClickListener doCancel>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21759, null, null, null, null);
        $r11 = specialinvoke r0.<org.scoutant.blokish.ButtonsView: android.widget.ImageButton button(int,android.view.View$OnClickListener,int)>(2130837520, $r10, 0);
        _sym_tmp_6 = r0.<org.scoutant.blokish.ButtonsView: int cancel$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 483);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.ButtonsView: int cancel$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(483);
        r0.<org.scoutant.blokish.ButtonsView: android.widget.ImageButton cancel> = $r11;
        _sym_tmp_7 = r0.<org.scoutant.blokish.ButtonsView: int cancel$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 483);
        $r12 = r0.<org.scoutant.blokish.ButtonsView: android.widget.ImageButton cancel>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1511, null, null);
        virtualinvoke r0.<org.scoutant.blokish.ButtonsView: void addView(android.view.View)>($r12);
        _sym_tmp_8 = r0.<org.scoutant.blokish.ButtonsView: int doOk$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 480);
        $r13 = r0.<org.scoutant.blokish.ButtonsView: android.view.View$OnClickListener doOk>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21759, null, null, null, null);
        $r14 = specialinvoke r0.<org.scoutant.blokish.ButtonsView: android.widget.ImageButton button(int,android.view.View$OnClickListener,int)>(2130837521, $r13, 1);
        _sym_tmp_9 = r0.<org.scoutant.blokish.ButtonsView: int ok$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_9, 484);
        _sym_tmp_9 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.ButtonsView: int ok$a3tid> = _sym_tmp_9;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(484);
        r0.<org.scoutant.blokish.ButtonsView: android.widget.ImageButton ok> = $r14;
        _sym_tmp_10 = r0.<org.scoutant.blokish.ButtonsView: int ok$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 484);
        $r15 = r0.<org.scoutant.blokish.ButtonsView: android.widget.ImageButton ok>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1511, null, null);
        virtualinvoke r0.<org.scoutant.blokish.ButtonsView: void addView(android.view.View)>($r15);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21760, null, null);
        virtualinvoke r0.<org.scoutant.blokish.ButtonsView: void setOkState(boolean)>(0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private android.widget.ImageButton button(int, android.view.View$OnClickListener, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i5$sym, $i4$sym, $i3$sym, $r11$sym, i2$sym, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, $i3, $i4, $i5;
        org.scoutant.blokish.ButtonsView r0;
        android.view.View$OnClickListener r1;
        boolean[][] $r2;
        boolean[] r3;
        android.widget.ImageButton r4, $r7;
        android.widget.FrameLayout$LayoutParams r5, $r9;
        android.view.Display r6;
        android.content.Context $r8, $r10, $r13;
        java.lang.Object $r11;
        android.view.WindowManager $r12;
        android.content.res.Resources $r14;
        android.graphics.drawable.Drawable $r15;
        android.widget.ImageView$ScaleType $r16;

        r0 := @this: org.scoutant.blokish.ButtonsView;
        i0 := @parameter0: int;
        r1 := @parameter1: android.view.View$OnClickListener;
        i1 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21759, 32454, 4);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 479);
        $r2 = <org.scoutant.blokish.ButtonsView: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45396, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.ButtonsView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45396, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        $r7 = new android.widget.ImageButton;
        _sym_tmp_2 = r0.<org.scoutant.blokish.ButtonsView: int context$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 482);
        $r8 = r0.<org.scoutant.blokish.ButtonsView: android.content.Context context>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke $r7.<android.widget.ImageButton: void <init>(android.content.Context)>($r8);
        r4 = $r7;
        $r9 = new android.widget.FrameLayout$LayoutParams;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(990, null, null, null, null);
        specialinvoke $r9.<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>(-2, -2, 16);
        r5 = $r9;
        _sym_tmp_3 = r0.<org.scoutant.blokish.ButtonsView: int context$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 482);
        $r10 = r0.<org.scoutant.blokish.ButtonsView: android.content.Context context>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(102, null, null);
        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");
        $r11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(102);
        $r12 = (android.view.WindowManager) $r11;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6534, null);
        r6 = interfaceinvoke $r12.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1376, null);
        $i3 = virtualinvoke r6.<android.view.Display: int getWidth()>();
        $i3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1376);
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 384);
        $i4 = $i3 - 384;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, null, $i4, 3);
        $i5 = $i4 / 3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1439, $i5$sym, null);
        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, 80);
        i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1439);
        r5.<android.widget.FrameLayout$LayoutParams: int leftMargin> = i2;
        r5.<android.widget.FrameLayout$LayoutParams: int rightMargin> = i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 0);
        if i1 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45397, 0);
        r5.<android.widget.FrameLayout$LayoutParams: int gravity> = 19;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45397, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        if i1 != 1 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45398, 0);
        r5.<android.widget.FrameLayout$LayoutParams: int gravity> = 21;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45398, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1369, null, null);
        virtualinvoke r4.<android.widget.ImageButton: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r5);
        _sym_tmp_4 = r0.<org.scoutant.blokish.ButtonsView: int context$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 482);
        $r13 = r0.<org.scoutant.blokish.ButtonsView: android.content.Context context>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1196, null);
        $r14 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1293, null, i0$sym);
        $r15 = virtualinvoke $r14.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1509, null, null);
        virtualinvoke r4.<android.widget.ImageButton: void setImageDrawable(android.graphics.drawable.Drawable)>($r15);
        $r16 = <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType CENTER_INSIDE>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1716, null, null);
        virtualinvoke r4.<android.widget.ImageButton: void setScaleType(android.widget.ImageView$ScaleType)>($r16);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2393, null, null);
        virtualinvoke r4.<android.widget.ImageButton: void setBackgroundColor(int)>(0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1450, null, null);
        virtualinvoke r4.<android.widget.ImageButton: void setOnClickListener(android.view.View$OnClickListener)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        return r4;
    }

    protected void setState(android.widget.ImageButton, boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $s0$sym, r3$sym, z0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.ButtonsView r0;
        android.widget.ImageButton r1;
        boolean z0;
        boolean[][] $r2;
        boolean[] r3;
        short $s0;

        r0 := @this: org.scoutant.blokish.ButtonsView;
        r1 := @parameter0: android.widget.ImageButton;
        z0 := @parameter1: boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21761, 32455, 3);
        z0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 479);
        $r2 = <org.scoutant.blokish.ButtonsView: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45399, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.ButtonsView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45399, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 2);
        r3 = $r2[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1342, null, z0$sym);
        virtualinvoke r1.<android.widget.ImageButton: void setEnabled(boolean)>(z0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, null, z0, 0);
        if z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45400, 0);
        $s0$sym = null;
        $s0 = 200;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45400, 1);
        goto label3;

     label3:
        $s0$sym = null;
        $s0 = 50;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1364, null, $s0$sym);
        virtualinvoke r1.<android.widget.ImageButton: void setAlpha(int)>($s0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return;
    }

    public void setOkState(boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym, z0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.ButtonsView r0;
        boolean z0;
        boolean[][] $r1;
        boolean[] r2;
        android.widget.ImageButton $r3;

        r0 := @this: org.scoutant.blokish.ButtonsView;
        z0 := @parameter0: boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21760, 32456, 2);
        z0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 479);
        $r1 = <org.scoutant.blokish.ButtonsView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45401, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.ButtonsView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45401, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        _sym_tmp_2 = r0.<org.scoutant.blokish.ButtonsView: int ok$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 484);
        $r3 = r0.<org.scoutant.blokish.ButtonsView: android.widget.ImageButton ok>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21761, null, null, z0$sym);
        virtualinvoke r0.<org.scoutant.blokish.ButtonsView: void setState(android.widget.ImageButton,boolean)>($r3, z0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    protected void onAttachedToWindow()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.ButtonsView r0;
        boolean[][] $r1;
        boolean[] r2;
        android.view.ViewParent $r3;
        org.scoutant.blokish.GameView $r4;

        r0 := @this: org.scoutant.blokish.ButtonsView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1476, 32457, 1);
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 479);
        $r1 = <org.scoutant.blokish.ButtonsView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45402, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.ButtonsView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45402, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1476, null);
        specialinvoke r0.<android.widget.FrameLayout: void onAttachedToWindow()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1204, null);
        $r3 = virtualinvoke r0.<org.scoutant.blokish.ButtonsView: android.view.ViewParent getParent()>();
        $r4 = (org.scoutant.blokish.GameView) $r3;
        _sym_tmp_2 = r0.<org.scoutant.blokish.ButtonsView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 485);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.ButtonsView: int game$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(485);
        r0.<org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView game> = $r4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    static org.scoutant.blokish.GameView access$000(org.scoutant.blokish.ButtonsView)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.ButtonsView r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.GameView $r3;

        r0 := @parameter0: org.scoutant.blokish.ButtonsView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21751, 32458, 1);
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 479);
        $r1 = <org.scoutant.blokish.ButtonsView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45403, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.ButtonsView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45403, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 5);
        r2 = $r1[5];
        _sym_tmp_2 = r0.<org.scoutant.blokish.ButtonsView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 485);
        $r3 = r0.<org.scoutant.blokish.ButtonsView: org.scoutant.blokish.GameView game>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    static android.content.Context access$100(org.scoutant.blokish.ButtonsView)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.ButtonsView r0;
        boolean[][] $r1;
        boolean[] r2;
        android.content.Context $r3;

        r0 := @parameter0: org.scoutant.blokish.ButtonsView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21755, 32459, 1);
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 479);
        $r1 = <org.scoutant.blokish.ButtonsView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45404, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.ButtonsView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45404, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 6);
        r2 = $r1[6];
        _sym_tmp_2 = r0.<org.scoutant.blokish.ButtonsView: int context$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 482);
        $r3 = r0.<org.scoutant.blokish.ButtonsView: android.content.Context context>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32460, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.ButtonsView: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 7);
        r1 = $r0[7];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32461, 0);
        $r0 = newmultiarray (boolean)[8][];
        _sym_tmp_1 = <org.scoutant.blokish.ButtonsView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 479);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.ButtonsView: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(479);
        <org.scoutant.blokish.ButtonsView: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[5];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[4];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[1];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[1];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/ButtonsView", -1879902319864787691L);
        return $r0;
    }
}
public class org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation extends android.app.Instrumentation implements org.scoutant.blokish.EmmaInstrument.FinishListener
{
    public static java.lang.String TAG;
    private static final java.lang.String DEFAULT_COVERAGE_FILE_PATH;
    private final android.os.Bundle mResults;
    private android.content.Intent mIntent;
    private static final boolean LOGD;
    private boolean mCoverage;
    private java.lang.String mCoverageFilePath;
    private static final boolean[][] $VRc;
    public static int TAG$a3tid;
    private static final int DEFAULT_COVERAGE_FILE_PATH$a3tid;
    private final int mResults$a3tid;
    private int mIntent$a3tid;
    private static final acteve.symbolic.integer.Expression LOGD$sym;
    private static final int LOGD$a3tid;
    private acteve.symbolic.integer.Expression mCoverage$sym;
    private int mCoverage$a3tid;
    private int mCoverageFilePath$a3tid;
    private static final int $VRc$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        boolean[][] $r1;
        boolean[] r2;
        android.os.Bundle $r3;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32462, 1);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45405, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45405, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.app.Instrumentation: void <init>()>();
        $r3 = new android.os.Bundle;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<android.os.Bundle: void <init>()>();
        _sym_tmp_2 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mResults$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 487);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mResults$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(487);
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: android.os.Bundle mResults> = $r3;
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: acteve.symbolic.integer.Expression mCoverage$sym> = null;
        _sym_tmp_3 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 488);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(488);
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean mCoverage> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void onCreate(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;
        java.lang.String $r4, $r9, $r10;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        boolean $z0;
        android.content.Intent $r11, $r13;
        android.content.Context $r12;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1621, 32463, 2);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r2 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45406, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45406, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 489);
        $r4 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        $r5 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onCreate(");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, $r9);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1621, null, null);
        specialinvoke r0.<android.app.Instrumentation: void onCreate(android.os.Bundle)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_7 = null;
        if r1 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45407, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21762, null, null, null);
        $z0 = specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r1, "coverage");
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21762);
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: acteve.symbolic.integer.Expression mCoverage$sym> = $z0$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 488);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(488);
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean mCoverage> = $z0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2706, null, null);
        $r10 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverageFile");
        _sym_tmp_4 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 490);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(490);
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String mCoverageFilePath> = $r10;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45407, 1);
        goto label3;

     label3:
        $r11 = new android.content.Intent;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8437, null);
        $r12 = virtualinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: android.content.Context getTargetContext()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9129, null, null, null);
        specialinvoke $r11.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r12, class "org/scoutant/blokish/EmmaInstrument/InstrumentedActivity");
        _sym_tmp_5 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mIntent$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 491);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mIntent$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(491);
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: android.content.Intent mIntent> = $r11;
        _sym_tmp_6 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mIntent$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 491);
        $r13 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: android.content.Intent mIntent>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1591, null, null);
        virtualinvoke $r13.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(535, null);
        virtualinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void start()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        return;
    }

    public void onStart()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.EmmaInstrument.InstrumentedActivity r3;
        java.lang.String $r4;
        android.content.Intent $r5;
        android.app.Activity $r6;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(8425, 32464, 1);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45408, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45408, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        _sym_tmp_2 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 489);
        $r4 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, "onStart()");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8425, null);
        specialinvoke r0.<android.app.Instrumentation: void onStart()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(10470);
        staticinvoke <android.os.Looper: void prepare()>();
        _sym_tmp_3 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mIntent$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 491);
        $r5 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: android.content.Intent mIntent>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8450, null, null);
        $r6 = virtualinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: android.app.Activity startActivitySync(android.content.Intent)>($r5);
        r3 = (org.scoutant.blokish.EmmaInstrument.InstrumentedActivity) $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21763, null, null);
        virtualinvoke r3.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: void setFinishListener(org.scoutant.blokish.EmmaInstrument.FinishListener)>(r0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private boolean getBooleanArgument(android.os.Bundle, java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $z1$sym, $z0$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        android.os.Bundle r1;
        java.lang.String r2, r5;
        boolean[][] $r3;
        boolean[] r4;
        boolean $z0, $z1;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: android.os.Bundle;
        r2 := @parameter1: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21762, 32465, 3);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r3 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45409, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45409, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 3);
        r4 = $r3[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2706, null, null);
        r5 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(r2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_2 = null;
        if r5 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45410, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(20857, null);
        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r5);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(20857);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45411, 0);
        $z1$sym = null;
        $z1 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        goto label5;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45410, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45411, 1);
        goto label4;

     label4:
        $z1$sym = null;
        $z1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 3);
        r4[3] = 1;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 4);
        r4[4] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21762, $z1$sym);
        return $z1;
    }

    private void generateCoverageReport()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        boolean[][] $r1;
        boolean[] r2;
        java.io.File r3, $r7;
        java.lang.Class r4, $r10, $r11, $r12;
        java.lang.reflect.Method r5;
        java.lang.String $r6, $r8;
        java.lang.Class[] $r9;
        java.lang.Object[] $r13;
        java.lang.Boolean $r14, $r15;
        java.lang.ClassNotFoundException $r17, r18;
        java.lang.SecurityException $r19, r20;
        java.lang.NoSuchMethodException $r21, r22;
        java.lang.IllegalArgumentException $r23, r24;
        java.lang.IllegalAccessException $r25, r26;
        java.lang.reflect.InvocationTargetException $r27, r28;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21767, 32466, 1);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45412, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45412, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        _sym_tmp_2 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 489);
        $r6 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r6, "generateCoverageReport()");
        $r7 = new java.io.File;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21764, null);
        $r8 = specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String getCoverageFilePath()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1, null, null);
        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8);
        r3 = $r7;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2060, null);
        r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.vladium.emma.rt.RT");
        $r9 = newarray (java.lang.Class)[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1386, null);
        $r10 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r9, 0);
        $r9[0] = $r10;
        $r11 = <java.lang.Boolean: java.lang.Class TYPE>;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r9, 1);
        $r9[1] = $r11;
        $r12 = <java.lang.Boolean: java.lang.Class TYPE>;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r9, 2);
        $r9[2] = $r12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2770, null, null, null);
        r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dumpCoverageData", $r9);
        $r13 = newarray (java.lang.Object)[3];
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r13, 0);
        $r13[0] = r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2654, null);
        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r13, 1);
        $r13[1] = $r14;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2654, null);
        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r13, 2);
        $r13[2] = $r15;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2771, null, null, null);
        virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label3:
        goto label10;

     label4:
        $r17 := @caughtexception;
        r18 = $r17;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21765, null, null, null);
        specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.String,java.lang.Exception)>("Emma.jar not in the class path?", r18);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label10;

     label5:
        $r19 := @caughtexception;
        r20 = $r19;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21766, null, null);
        specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>(r20);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label10;

     label6:
        $r21 := @caughtexception;
        r22 = $r21;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21766, null, null);
        specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>(r22);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label10;

     label7:
        $r23 := @caughtexception;
        r24 = $r23;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21766, null, null);
        specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>(r24);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        goto label10;

     label8:
        $r25 := @caughtexception;
        r26 = $r25;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21766, null, null);
        specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>(r26);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label10;

     label9:
        $r27 := @caughtexception;
        r28 = $r27;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21766, null, null);
        specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>(r28);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;

     label10:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        return;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.SecurityException from label2 to label3 with label5;
        catch java.lang.NoSuchMethodException from label2 to label3 with label6;
        catch java.lang.IllegalArgumentException from label2 to label3 with label7;
        catch java.lang.IllegalAccessException from label2 to label3 with label8;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label9;
    }

    private java.lang.String getCoverageFilePath()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21764, 32467, 1);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45413, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45413, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 5);
        r2 = $r1[5];
        _sym_tmp_2 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 490);
        $r3 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String mCoverageFilePath>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_4 = null;
        if $r3 != null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45414, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        return "/mnt/sdcard/coverage.ec";

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45414, 1);
        goto label3;

     label3:
        _sym_tmp_3 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 490);
        $r4 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String mCoverageFilePath>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return $r4;
    }

    private boolean setCoverageFilePath(java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        java.lang.String r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21768, 32468, 2);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r2 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45415, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45415, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 6);
        r3 = $r2[6];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_3 = null;
        if r1 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45416, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(152, null);
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(152);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_3 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 0);
        if $i0 <= 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45417, 0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 490);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverageFilePath$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(490);
        r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String mCoverageFilePath> = r1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21768, null);
        return 1;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45416, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45417, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21768, null);
        return 0;
    }

    private void reportEmmaError(java.lang.Exception)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        java.lang.Exception r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: java.lang.Exception;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21766, 32469, 2);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r2 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45418, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45418, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 7);
        r3 = $r2[7];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21765, null, null, null);
        specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.String,java.lang.Exception)>("", r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private void reportEmmaError(java.lang.String, java.lang.Exception)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        java.lang.String r1, r5, $r9, $r14;
        java.lang.Exception r2;
        boolean[][] $r3;
        boolean[] r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13;
        android.os.Bundle $r10;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.Exception;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21765, 32470, 3);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r3 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45419, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45419, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 8);
        r4 = $r3[8];
        $r6 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to generate emma coverage. ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        _sym_tmp_2 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 489);
        $r9 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(110, null, null, null);
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, r5, r2);
        _sym_tmp_3 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mResults$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 487);
        $r10 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: android.os.Bundle mResults>;
        $r11 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nError: ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7751, null, null, null);
        virtualinvoke $r10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r14);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        return;
    }

    public void onActivityFinished()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String $r3;
        boolean $z0;
        android.os.Bundle $r4;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21769, 32471, 1);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45420, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45420, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];
        _sym_tmp_2 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 489);
        $r3 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r3, "onActivityFinished()");
        $z0$sym = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: acteve.symbolic.integer.Expression mCoverage$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 488);
        $z0 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean mCoverage>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45421, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21767, null);
        specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void generateCoverageReport()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45421, 1);
        goto label3;

     label3:
        _sym_tmp_4 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mResults$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 487);
        $r4 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: android.os.Bundle mResults>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8430, null, null, null);
        virtualinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void finish(int,android.os.Bundle)>(-1, $r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    public void dumpIntermediateCoverage(java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $z1$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r0;
        java.lang.String r1, $r4, $r8, $r9, $r14;
        boolean[][] $r2;
        boolean[] r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12, $r13;
        boolean $z0, $z1;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        r1 := @parameter0: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21770, 32472, 2);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 486);
        $r2 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45422, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45422, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 10);
        r3 = $r2[10];
        _sym_tmp_2 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 489);
        $r4 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        $r5 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Intermidate Dump Called with file name :");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r4, $r8);
        $z0$sym = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: acteve.symbolic.integer.Expression mCoverage$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int mCoverage$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 488);
        $z0 = r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean mCoverage>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45423, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21768, null, null);
        $z1 = specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean setCoverageFilePath(java.lang.String)>(r1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21768);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45424, 0);
        _sym_tmp_4 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 489);
        $r9 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG>;
        $r10 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to set the given file path:");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as dump target.");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r9, $r14);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45424, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21767, null);
        specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void generateCoverageReport()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21768, null, null);
        specialinvoke r0.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean setCoverageFilePath(java.lang.String)>("/mnt/sdcard/coverage.ec");
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45423, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        return;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32473, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 11);
        r1 = $r0[11];
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 489);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int TAG$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(489);
        <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: java.lang.String TAG> = "EmmaInstrumentation:";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32474, 0);
        $r0 = newmultiarray (boolean)[12][];
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 486);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(486);
        <org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[5];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[8];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[3];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[4];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[1];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[1];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[3];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[5];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[1];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/EmmaInstrument/EmmaInstrumentation", -6390195098943533753L);
        return $r0;
    }
}
public interface  org.scoutant.blokish.EmmaInstrument.FinishListener extends java.lang.Object
{

    public abstract void onActivityFinished();

    public abstract void dumpIntermediateCoverage(java.lang.String);
}
class org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector extends android.content.BroadcastReceiver
{
    final org.scoutant.blokish.EmmaInstrument.InstrumentedActivity this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.EmmaInstrument.InstrumentedActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector r0;
        org.scoutant.blokish.EmmaInstrument.InstrumentedActivity r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector;
        r1 := @parameter0: org.scoutant.blokish.EmmaInstrument.InstrumentedActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21771, 32475, 2);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 492);
        $r2 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45425, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45425, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 493);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(493);
        r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: org.scoutant.blokish.EmmaInstrument.InstrumentedActivity this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onReceive(android.content.Context, android.content.Intent)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $z1$sym, $z0$sym, $r16$sym, $r15$sym, $r14$sym, $i0$sym, $r12$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0;
        org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector r0;
        android.content.Context r1;
        android.content.Intent r2;
        boolean[][] $r3;
        boolean[] r4;
        android.os.Bundle r5;
        java.lang.Object[] r6, $r13;
        android.telephony.SmsMessage r7;
        java.lang.String r8, r9, $r17;
        org.scoutant.blokish.EmmaInstrument.InstrumentedActivity $r10, $r18;
        org.scoutant.blokish.EmmaInstrument.FinishListener $r11, $r19;
        java.lang.Object $r12, $r14;
        byte[] $r15, $r16;
        boolean $z0, $z1;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector;
        r1 := @parameter0: android.content.Context;
        r2 := @parameter1: android.content.Intent;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(728, 32476, 3);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 492);
        $r3 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45426, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45426, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 1);
        r4 = $r3[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(730, null);
        r5 = virtualinvoke r2.<android.content.Intent: android.os.Bundle getExtras()>();
        _sym_tmp_2 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 493);
        $r10 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: org.scoutant.blokish.EmmaInstrument.InstrumentedActivity this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21772, null);
        $r11 = staticinvoke <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: org.scoutant.blokish.EmmaInstrument.FinishListener access$000(org.scoutant.blokish.EmmaInstrument.InstrumentedActivity)>($r10);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_4 = null;
        if $r11 == null goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45427, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        _sym_tmp_4 = null;
        if r5 == null goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45428, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(731, null, null);
        $r12 = virtualinvoke r5.<android.os.Bundle: java.lang.Object get(java.lang.String)>("pdus");
        $r12$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(731);
        $r13 = (java.lang.Object[]) $r12;
        r6 = (java.lang.Object[]) $r13;
        $i0$sym = null;
        $i0 = lengthof r6;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 0);
        if $i0 <= 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45429, 0);
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>(r6, 0);
        $r14 = r6[0];
        $r15$sym = $r14$sym;
        $r15 = (byte[]) $r14;
        $r16$sym = $r15$sym;
        $r16 = (byte[]) $r15;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5113, $r16$sym);
        r7 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>($r16);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(4804, null);
        $r17 = virtualinvoke r7.<android.telephony.SmsMessage: java.lang.String getMessageBody()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r8 = virtualinvoke $r17.<java.lang.String: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5110, null);
        r9 = virtualinvoke r7.<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(4073, null, null);
        $z0 = virtualinvoke r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("6782345628");
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(4073);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 3);
        r4[3] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45430, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(57, null, null);
        $z1 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("/mnt/sdcard");
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(57);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 4);
        r4[4] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45431, 0);
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45430, 1);
        goto label3;

     label3:
        _sym_tmp_3 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 493);
        $r18 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: org.scoutant.blokish.EmmaInstrument.InstrumentedActivity this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21772, null);
        $r19 = staticinvoke <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: org.scoutant.blokish.EmmaInstrument.FinishListener access$000(org.scoutant.blokish.EmmaInstrument.InstrumentedActivity)>($r18);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21770, null, null);
        interfaceinvoke $r19.<org.scoutant.blokish.EmmaInstrument.FinishListener: void dumpIntermediateCoverage(java.lang.String)>(r8);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 5);
        r4[5] = 1;
        goto label8;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45427, 1);
        goto label8;

        goto label8;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45428, 1);
        goto label8;

        goto label8;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45429, 1);
        goto label8;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45431, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 6);
        r4[6] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32477, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32478, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 492);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(492);
        <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[7];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/EmmaInstrument/InstrumentedActivity$CoverageCollector", -1604738725137032633L);
        return $r0;
    }
}
public class org.scoutant.blokish.EmmaInstrument.InstrumentedActivity extends org.scoutant.blokish.SplashScreen
{
    public static java.lang.String TAG;
    private org.scoutant.blokish.EmmaInstrument.FinishListener mListener;
    private static final boolean[][] $VRc;
    public static int TAG$a3tid;
    private int mListener$a3tid;
    private static final int $VRc$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.InstrumentedActivity r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.InstrumentedActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32479, 1);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 494);
        $r1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45432, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45432, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<org.scoutant.blokish.SplashScreen: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void setFinishListener(org.scoutant.blokish.EmmaInstrument.FinishListener)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.InstrumentedActivity r0;
        org.scoutant.blokish.EmmaInstrument.FinishListener r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.InstrumentedActivity;
        r1 := @parameter0: org.scoutant.blokish.EmmaInstrument.FinishListener;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21763, 32480, 2);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 494);
        $r2 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45433, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45433, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void finish()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.InstrumentedActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;
        org.scoutant.blokish.EmmaInstrument.FinishListener $r8, $r9;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.InstrumentedActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1658, 32481, 1);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 494);
        $r1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45434, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45434, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        $r3 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        _sym_tmp_2 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 495);
        $r4 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: java.lang.String TAG>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".InstrumentedActivity");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r7, "finish()");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1658, null);
        specialinvoke r0.<org.scoutant.blokish.SplashScreen: void finish()>();
        _sym_tmp_3 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int mListener$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 496);
        $r8 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: org.scoutant.blokish.EmmaInstrument.FinishListener mListener>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_5 = null;
        if $r8 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45435, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int mListener$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 496);
        $r9 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: org.scoutant.blokish.EmmaInstrument.FinishListener mListener>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21769, null);
        interfaceinvoke $r9.<org.scoutant.blokish.EmmaInstrument.FinishListener: void onActivityFinished()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45435, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    static org.scoutant.blokish.EmmaInstrument.FinishListener access$000(org.scoutant.blokish.EmmaInstrument.InstrumentedActivity)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.InstrumentedActivity r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.EmmaInstrument.FinishListener $r3;

        r0 := @parameter0: org.scoutant.blokish.EmmaInstrument.InstrumentedActivity;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21772, 32482, 1);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 494);
        $r1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45436, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45436, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        _sym_tmp_2 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int mListener$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 496);
        $r3 = r0.<org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: org.scoutant.blokish.EmmaInstrument.FinishListener mListener>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32483, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 4);
        r1 = $r0[4];
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 495);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int TAG$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(495);
        <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: java.lang.String TAG> = "IntrumentedPlayer";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32484, 0);
        $r0 = newmultiarray (boolean)[5][];
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 494);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(494);
        <org.scoutant.blokish.EmmaInstrument.InstrumentedActivity: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[3];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/EmmaInstrument/InstrumentedActivity", -3953097121653020106L);
        return $r0;
    }
}
public class org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver extends android.content.BroadcastReceiver
{
    public static java.lang.String TAG;
    private static final boolean[][] $VRc;
    public static int TAG$a3tid;
    private static final int $VRc$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32485, 1);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 497);
        $r1 = <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45437, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45437, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void onReceive(android.content.Context, android.content.Intent)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver r0;
        android.content.Context r1;
        android.content.Intent r2;
        boolean[][] $r3;
        boolean[] r4;
        org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation r6, $r7;

        r0 := @this: org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver;
        r1 := @parameter0: android.content.Context;
        r2 := @parameter1: android.content.Intent;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(728, 32486, 3);
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 497);
        $r3 = <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45438, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45438, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 1);
        r4 = $r3[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(730, null);
        virtualinvoke r2.<android.content.Intent: android.os.Bundle getExtras()>();
        $r7 = new org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r7.<org.scoutant.blokish.EmmaInstrument.EmmaInstrumentation: void <init>()>();
        r6 = $r7;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_2 = null;
        if r6 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45439, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21770, null, null);
        interfaceinvoke r6.<org.scoutant.blokish.EmmaInstrument.FinishListener: void dumpIntermediateCoverage(java.lang.String)>("/mnt/sdcard/coverage.ec");
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45439, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        return;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32487, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: int TAG$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 498);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: int TAG$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(498);
        <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: java.lang.String TAG> = "M3SMSInstrumentedReceiver";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32488, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 497);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(497);
        <org.scoutant.blokish.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/EmmaInstrument/SMSInstrumentedReceiver", 8704909102833939831L);
        return $r0;
    }
}
class org.scoutant.blokish.EndGameDialog$1 extends java.lang.Object implements android.view.View$OnClickListener
{
    final org.scoutant.blokish.EndGameDialog this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.EndGameDialog)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EndGameDialog$1 r0;
        org.scoutant.blokish.EndGameDialog r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.EndGameDialog$1;
        r1 := @parameter0: org.scoutant.blokish.EndGameDialog;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21773, 32489, 2);
        _sym_tmp_1 = <org.scoutant.blokish.EndGameDialog$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 499);
        $r2 = <org.scoutant.blokish.EndGameDialog$1: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45440, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.EndGameDialog$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45440, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.EndGameDialog$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 500);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.EndGameDialog$1: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(500);
        r0.<org.scoutant.blokish.EndGameDialog$1: org.scoutant.blokish.EndGameDialog this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.EndGameDialog$1 r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.EndGameDialog $r4;

        r0 := @this: org.scoutant.blokish.EndGameDialog$1;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1399, 32490, 2);
        _sym_tmp_1 = <org.scoutant.blokish.EndGameDialog$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 499);
        $r2 = <org.scoutant.blokish.EndGameDialog$1: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45441, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.EndGameDialog$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45441, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.EndGameDialog$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 500);
        $r4 = r0.<org.scoutant.blokish.EndGameDialog$1: org.scoutant.blokish.EndGameDialog this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1527, null);
        virtualinvoke $r4.<org.scoutant.blokish.EndGameDialog: void dismiss()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32491, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.EndGameDialog$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32492, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.EndGameDialog$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 499);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.EndGameDialog$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(499);
        <org.scoutant.blokish.EndGameDialog$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/EndGameDialog$1", 4320153508954628847L);
        return $r0;
    }
}
public class org.scoutant.blokish.EndGameDialog extends android.app.Dialog
{
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(android.content.Context, boolean, java.lang.String, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $b2$sym, r4$sym, i1$sym, i0$sym, z0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1;
        org.scoutant.blokish.EndGameDialog r0;
        android.content.Context r1;
        boolean z0;
        java.lang.String r2;
        boolean[][] $r3;
        boolean[] r4;
        android.widget.TextView r5;
        android.widget.Button r6;
        android.view.Window $r7;
        android.view.View $r8, $r9, $r11;
        org.scoutant.blokish.EndGameDialog$1 $r10;
        byte $b2;

        r0 := @this: org.scoutant.blokish.EndGameDialog;
        r1 := @parameter0: android.content.Context;
        z0 := @parameter1: boolean;
        r2 := @parameter2: java.lang.String;
        i0 := @parameter3: int;
        i1 := @parameter4: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21774, 32493, 6);
        z0$sym = a3targs$symargs[2];
        i0$sym = a3targs$symargs[4];
        i1$sym = a3targs$symargs[5];
        _sym_tmp_1 = <org.scoutant.blokish.EndGameDialog: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 501);
        $r3 = <org.scoutant.blokish.EndGameDialog: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45442, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.EndGameDialog: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45442, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 0);
        r4 = $r3[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke r0.<android.app.Dialog: void <init>(android.content.Context)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1626, null, null);
        virtualinvoke r0.<org.scoutant.blokish.EndGameDialog: void setContentView(int)>(2130903040);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1519, null);
        $r7 = virtualinvoke r0.<org.scoutant.blokish.EndGameDialog: android.view.Window getWindow()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6744, null, null, null);
        virtualinvoke $r7.<android.view.Window: void setLayout(int,int)>(-1, -2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r8 = virtualinvoke r0.<org.scoutant.blokish.EndGameDialog: android.view.View findViewById(int)>(2131361793);
        r5 = (android.widget.TextView) $r8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1348, null, null);
        virtualinvoke r5.<android.widget.TextView: void setText(java.lang.CharSequence)>(r2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r9 = virtualinvoke r0.<org.scoutant.blokish.EndGameDialog: android.view.View findViewById(int)>(2131361794);
        r6 = (android.widget.Button) $r9;
        $r10 = new org.scoutant.blokish.EndGameDialog$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21773, null, null);
        specialinvoke $r10.<org.scoutant.blokish.EndGameDialog$1: void <init>(org.scoutant.blokish.EndGameDialog)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1450, null, null);
        virtualinvoke r6.<android.widget.Button: void setOnClickListener(android.view.View$OnClickListener)>($r10);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r11 = virtualinvoke r0.<org.scoutant.blokish.EndGameDialog: android.view.View findViewById(int)>(2131361792);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, null, z0, 0);
        if z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45443, 0);
        $b2$sym = null;
        $b2 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45443, 1);
        goto label3;

     label3:
        $b2$sym = null;
        $b2 = 8;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, $b2$sym);
        virtualinvoke $r11.<android.view.View: void setVisibility(int)>($b2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 3);
        r4[3] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32494, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.EndGameDialog: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 1);
        r1 = $r0[1];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32495, 0);
        $r0 = newmultiarray (boolean)[2][];
        _sym_tmp_1 = <org.scoutant.blokish.EndGameDialog: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 501);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.EndGameDialog: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(501);
        <org.scoutant.blokish.EndGameDialog: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[4];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/EndGameDialog", -6527084673895565106L);
        return $r0;
    }
}
class org.scoutant.blokish.GameView$ShowPiecesListener extends java.lang.Object implements android.view.View$OnClickListener
{
    private int color;
    final org.scoutant.blokish.GameView this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private acteve.symbolic.integer.Expression color$sym;
    private int color$a3tid;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    protected void <init>(org.scoutant.blokish.GameView, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0;
        org.scoutant.blokish.GameView$ShowPiecesListener r0;
        org.scoutant.blokish.GameView r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.GameView$ShowPiecesListener;
        r1 := @parameter0: org.scoutant.blokish.GameView;
        i0 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21775, 32496, 3);
        i0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.GameView$ShowPiecesListener: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 502);
        $r2 = <org.scoutant.blokish.GameView$ShowPiecesListener: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45444, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.GameView$ShowPiecesListener: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45444, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.GameView$ShowPiecesListener: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 503);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView$ShowPiecesListener: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(503);
        r0.<org.scoutant.blokish.GameView$ShowPiecesListener: org.scoutant.blokish.GameView this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.scoutant.blokish.GameView$ShowPiecesListener: acteve.symbolic.integer.Expression color$sym> = i0$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.GameView$ShowPiecesListener: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 504);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView$ShowPiecesListener: int color$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(504);
        r0.<org.scoutant.blokish.GameView$ShowPiecesListener: int color> = i0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0;
        org.scoutant.blokish.GameView$ShowPiecesListener r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.GameView $r4, $r5;

        r0 := @this: org.scoutant.blokish.GameView$ShowPiecesListener;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1399, 32497, 2);
        _sym_tmp_1 = <org.scoutant.blokish.GameView$ShowPiecesListener: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 502);
        $r2 = <org.scoutant.blokish.GameView$ShowPiecesListener: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45445, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.GameView$ShowPiecesListener: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45445, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.GameView$ShowPiecesListener: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 503);
        $r4 = r0.<org.scoutant.blokish.GameView$ShowPiecesListener: org.scoutant.blokish.GameView this$0>;
        $i0$sym = r0.<org.scoutant.blokish.GameView$ShowPiecesListener: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.GameView$ShowPiecesListener: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 504);
        $i0 = r0.<org.scoutant.blokish.GameView$ShowPiecesListener: int color>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21757, null, $i0$sym);
        virtualinvoke $r4.<org.scoutant.blokish.GameView: void showPieces(int)>($i0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.GameView$ShowPiecesListener: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 503);
        $r5 = r0.<org.scoutant.blokish.GameView$ShowPiecesListener: org.scoutant.blokish.GameView this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke $r5.<org.scoutant.blokish.GameView: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32498, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.GameView$ShowPiecesListener: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32499, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.GameView$ShowPiecesListener: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 502);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.GameView$ShowPiecesListener: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(502);
        <org.scoutant.blokish.GameView$ShowPiecesListener: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/GameView$ShowPiecesListener", 4705431557317828183L);
        return $r0;
    }
}
public class org.scoutant.blokish.GameView extends android.widget.FrameLayout
{
    private static java.lang.String tag;
    private android.graphics.Paint paint;
    public int size;
    public org.scoutant.blokish.ButtonsView buttons;
    public org.scoutant.blokish.PieceUI selected;
    public int selectedColor;
    public int swipe;
    public int gone;
    public org.scoutant.blokish.model.Game game;
    public org.scoutant.blokish.model.AI ai;
    public static int[] icons;
    public static int[] labels;
    private android.graphics.drawable.Drawable[] dots;
    public android.widget.TextView[] tabs;
    public org.scoutant.blokish.UI ui;
    public boolean redOver;
    public android.content.SharedPreferences prefs;
    public boolean thinking;
    public boolean singleline;
    public org.scoutant.blokish.BusyIndicator indicator;
    public org.scoutant.blokish.PieceUI[] lasts;
    public float downX;
    public float downY;
    private static final boolean[][] $VRc;
    private static int tag$a3tid;
    private int paint$a3tid;
    public acteve.symbolic.integer.Expression size$sym;
    public int size$a3tid;
    public int buttons$a3tid;
    public int selected$a3tid;
    public acteve.symbolic.integer.Expression selectedColor$sym;
    public int selectedColor$a3tid;
    public acteve.symbolic.integer.Expression swipe$sym;
    public int swipe$a3tid;
    public acteve.symbolic.integer.Expression gone$sym;
    public int gone$a3tid;
    public int game$a3tid;
    public int ai$a3tid;
    public static acteve.symbolic.integer.Expression icons$sym;
    public static int icons$a3tid;
    public static acteve.symbolic.integer.Expression labels$sym;
    public static int labels$a3tid;
    private int dots$a3tid;
    public int tabs$a3tid;
    public int ui$a3tid;
    public acteve.symbolic.integer.Expression redOver$sym;
    public int redOver$a3tid;
    public int prefs$a3tid;
    public acteve.symbolic.integer.Expression thinking$sym;
    public int thinking$a3tid;
    public acteve.symbolic.integer.Expression singleline$sym;
    public int singleline$a3tid;
    public int indicator$a3tid;
    public int lasts$a3tid;
    public acteve.symbolic.integer.Expression downX$sym;
    public int downX$a3tid;
    public acteve.symbolic.integer.Expression downY$sym;
    public int downY$a3tid;
    private static final int $VRc$a3tid;

    public void <init>(android.content.Context)
    {
        acteve.symbolic.integer.Expression _sym_tmp_35, $i12$sym, $r46$sym, $i11$sym, $r41$sym, i10$sym, $r36$sym, $i9$sym, $r32$sym, $z1$sym, $r30$sym, $z0$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i3$sym, $i2$sym, $i1$sym, $r21$sym, i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_34, _sym_tmp_33, _sym_tmp_32, _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12;
        org.scoutant.blokish.GameView r0;
        android.content.Context r1;
        boolean[][] $r2;
        boolean[] r3;
        android.view.Display r4;
        java.util.Iterator r5, r7;
        org.scoutant.blokish.model.Board r6;
        org.scoutant.blokish.model.Piece r8;
        android.graphics.Paint $r9, $r19, $r20;
        org.scoutant.blokish.model.Game $r10, $r12, $r28;
        org.scoutant.blokish.model.AI $r11;
        android.graphics.drawable.Drawable[] $r13, $r39, $r43;
        android.widget.TextView[] $r14, $r45, $r49;
        org.scoutant.blokish.PieceUI[] $r15;
        android.content.SharedPreferences $r16;
        org.scoutant.blokish.UI $r17;
        android.widget.FrameLayout$LayoutParams $r18, $r56;
        java.lang.Object $r21, $r30, $r32, $r36;
        android.view.WindowManager $r22;
        java.lang.String $r23, $r27;
        java.lang.StringBuilder $r24, $r25, $r26;
        java.util.List $r29, $r31;
        boolean $z0, $z1;
        org.scoutant.blokish.PieceUI $r33;
        org.scoutant.blokish.ButtonsView $r34, $r35;
        android.view.LayoutInflater r37;
        android.content.res.Resources $r40;
        int[] $r41, $r46;
        android.graphics.drawable.Drawable $r42, $r44;
        android.view.View $r47, $r54, r55;
        android.widget.TextView $r48, $r50;
        android.view.ViewParent $r51;
        android.view.ViewGroup r52;
        org.scoutant.blokish.GameView$ShowPiecesListener $r53;
        org.scoutant.blokish.BusyIndicator $r57;

        r0 := @this: org.scoutant.blokish.GameView;
        r1 := @parameter0: android.content.Context;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(274, 32500, 2);
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r2 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_35 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45446, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45446, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke r0.<android.widget.FrameLayout: void <init>(android.content.Context)>(r1);
        $r9 = new android.graphics.Paint;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r9.<android.graphics.Paint: void <init>()>();
        _sym_tmp_2 = r0.<org.scoutant.blokish.GameView: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 506);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int paint$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(506);
        r0.<org.scoutant.blokish.GameView: android.graphics.Paint paint> = $r9;
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression swipe$sym> = null;
        _sym_tmp_3 = r0.<org.scoutant.blokish.GameView: int swipe$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 507);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int swipe$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(507);
        r0.<org.scoutant.blokish.GameView: int swipe> = 0;
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression gone$sym> = null;
        _sym_tmp_4 = r0.<org.scoutant.blokish.GameView: int gone$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 508);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int gone$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(508);
        r0.<org.scoutant.blokish.GameView: int gone> = 0;
        $r10 = new org.scoutant.blokish.model.Game;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r10.<org.scoutant.blokish.model.Game: void <init>()>();
        _sym_tmp_5 = r0.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 467);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int game$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(467);
        r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game> = $r10;
        $r11 = new org.scoutant.blokish.model.AI;
        _sym_tmp_6 = r0.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 467);
        $r12 = r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21776, null, null);
        specialinvoke $r11.<org.scoutant.blokish.model.AI: void <init>(org.scoutant.blokish.model.Game)>($r12);
        _sym_tmp_7 = r0.<org.scoutant.blokish.GameView: int ai$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_7, 509);
        _sym_tmp_7 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int ai$a3tid> = _sym_tmp_7;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(509);
        r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.AI ai> = $r11;
        $r13 = newarray (android.graphics.drawable.Drawable)[4];
        _sym_tmp_8 = r0.<org.scoutant.blokish.GameView: int dots$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_8, 510);
        _sym_tmp_8 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int dots$a3tid> = _sym_tmp_8;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(510);
        r0.<org.scoutant.blokish.GameView: android.graphics.drawable.Drawable[] dots> = $r13;
        $r14 = newarray (android.widget.TextView)[4];
        _sym_tmp_9 = r0.<org.scoutant.blokish.GameView: int tabs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_9, 471);
        _sym_tmp_9 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int tabs$a3tid> = _sym_tmp_9;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(471);
        r0.<org.scoutant.blokish.GameView: android.widget.TextView[] tabs> = $r14;
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression redOver$sym> = null;
        _sym_tmp_10 = r0.<org.scoutant.blokish.GameView: int redOver$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_10, 511);
        _sym_tmp_10 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int redOver$a3tid> = _sym_tmp_10;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(511);
        r0.<org.scoutant.blokish.GameView: boolean redOver> = 0;
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression thinking$sym> = null;
        _sym_tmp_11 = r0.<org.scoutant.blokish.GameView: int thinking$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 512);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int thinking$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(512);
        r0.<org.scoutant.blokish.GameView: boolean thinking> = 0;
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression singleline$sym> = null;
        _sym_tmp_12 = r0.<org.scoutant.blokish.GameView: int singleline$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_12, 513);
        _sym_tmp_12 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int singleline$a3tid> = _sym_tmp_12;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(513);
        r0.<org.scoutant.blokish.GameView: boolean singleline> = 0;
        $r15 = newarray (org.scoutant.blokish.PieceUI)[4];
        _sym_tmp_13 = r0.<org.scoutant.blokish.GameView: int lasts$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_13, 469);
        _sym_tmp_13 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int lasts$a3tid> = _sym_tmp_13;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(469);
        r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI[] lasts> = $r15;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(4842, null);
        $r16 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r1);
        _sym_tmp_14 = r0.<org.scoutant.blokish.GameView: int prefs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_14, 514);
        _sym_tmp_14 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int prefs$a3tid> = _sym_tmp_14;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(514);
        r0.<org.scoutant.blokish.GameView: android.content.SharedPreferences prefs> = $r16;
        $r17 = (org.scoutant.blokish.UI) r1;
        _sym_tmp_15 = r0.<org.scoutant.blokish.GameView: int ui$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_15, 475);
        _sym_tmp_15 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int ui$a3tid> = _sym_tmp_15;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(475);
        r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.UI ui> = $r17;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1434, null, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void setWillNotDraw(boolean)>(0);
        $r18 = new android.widget.FrameLayout$LayoutParams;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(990, null, null, null, null);
        specialinvoke $r18.<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>(-1, -1, 48);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1369, null, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>($r18);
        _sym_tmp_16 = r0.<org.scoutant.blokish.GameView: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 506);
        $r19 = r0.<org.scoutant.blokish.GameView: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2139, null, null);
        virtualinvoke $r19.<android.graphics.Paint: void setStrokeWidth(float)>(1.3F);
        _sym_tmp_17 = r0.<org.scoutant.blokish.GameView: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 506);
        $r20 = r0.<org.scoutant.blokish.GameView: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2092, null, null);
        virtualinvoke $r20.<android.graphics.Paint: void setColor(int)>(-1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(102, null, null);
        $r21 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");
        $r21$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(102);
        $r22 = (android.view.WindowManager) $r21;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6534, null);
        r4 = interfaceinvoke $r22.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1376, null);
        $i1 = virtualinvoke r4.<android.view.Display: int getWidth()>();
        $i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1376);
        $i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, null, $i1, 20);
        $i2 = $i1 / 20;
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym> = $i2$sym;
        _sym_tmp_18 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_18, 515);
        _sym_tmp_18 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int size$a3tid> = _sym_tmp_18;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(515);
        r0.<org.scoutant.blokish.GameView: int size> = $i2;
        _sym_tmp_19 = <org.scoutant.blokish.GameView: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 516);
        $r23 = <org.scoutant.blokish.GameView: java.lang.String tag>;
        $r24 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size ");
        $i3$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_20 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 515);
        $i3 = r0.<org.scoutant.blokish.GameView: int size>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i3$sym);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r23, $r27);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2097, null);
        $i5 = virtualinvoke r4.<android.view.Display: int getHeight()>();
        $i5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2097);
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 32);
        $i6 = $i5 / 32;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1376, null);
        $i7 = virtualinvoke r4.<android.view.Display: int getWidth()>();
        $i7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1376);
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, null, $i7, 20);
        $i8 = $i7 / 20;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_35 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i6$sym, $i8$sym, $i6, $i8);
        if $i6 >= $i8 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45447, 0);
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression singleline$sym> = null;
        _sym_tmp_21 = r0.<org.scoutant.blokish.GameView: int singleline$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_21, 513);
        _sym_tmp_21 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int singleline$a3tid> = _sym_tmp_21;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(513);
        r0.<org.scoutant.blokish.GameView: boolean singleline> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45447, 1);
        goto label3;

     label3:
        _sym_tmp_22 = r0.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 467);
        $r28 = r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_23 = $r28.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 473);
        $r29 = $r28.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r5 = interfaceinvoke $r29.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_35 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45448, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r30 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        $r30$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r6 = (org.scoutant.blokish.model.Board) $r30;
        i0$sym = null;
        i0 = 2;
        _sym_tmp_24 = r6.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 517);
        $r31 = r6.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r7 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;

     label5:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        _sym_tmp_35 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45449, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r32 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
        $r32$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r8 = (org.scoutant.blokish.model.Piece) $r32;
        $r33 = new org.scoutant.blokish.PieceUI;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21777, null, null, null, i0$sym, null);
        specialinvoke $r33.<org.scoutant.blokish.PieceUI: void <init>(android.content.Context,org.scoutant.blokish.model.Piece,int,int)>(r1, r8, i0, 22);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1511, null, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void addView(android.view.View)>($r33);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 4);
        i0 = i0 + 4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        goto label5;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45449, 1);
        goto label7;

     label7:
        $i9$sym = r6.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_25 = r6.<org.scoutant.blokish.model.Board: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 518);
        $i9 = r6.<org.scoutant.blokish.model.Board: int color>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21778, null, $i9$sym);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void reorderPieces(int)>($i9);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        goto label4;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45448, 1);
        goto label9;

     label9:
        $r34 = new org.scoutant.blokish.ButtonsView;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke $r34.<org.scoutant.blokish.ButtonsView: void <init>(android.content.Context)>(r1);
        _sym_tmp_26 = r0.<org.scoutant.blokish.GameView: int buttons$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_26, 519);
        _sym_tmp_26 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int buttons$a3tid> = _sym_tmp_26;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(519);
        r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.ButtonsView buttons> = $r34;
        _sym_tmp_27 = r0.<org.scoutant.blokish.GameView: int buttons$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 519);
        $r35 = r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.ButtonsView buttons>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1511, null, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void addView(android.view.View)>($r35);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(102, null, null);
        $r36 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("layout_inflater");
        $r36$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(102);
        r37 = (android.view.LayoutInflater) $r36;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1449, null, null, null);
        virtualinvoke r37.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(2130903044, r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21757, null, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void showPieces(int)>(0);
        i10$sym = null;
        i10 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;

     label10:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        _sym_tmp_35 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i10$sym, null, i10, 4);
        if i10 >= 4 goto label13;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45450, 0);
        _sym_tmp_28 = r0.<org.scoutant.blokish.GameView: int dots$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_28, 510);
        $r39 = r0.<org.scoutant.blokish.GameView: android.graphics.drawable.Drawable[] dots>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1196, null);
        $r40 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();
        $r41$sym = <org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression icons$sym>;
        _sym_tmp_29 = <org.scoutant.blokish.GameView: int icons$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 520);
        $r41 = <org.scoutant.blokish.GameView: int[] icons>;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r41$sym, i10$sym, $r41, i10);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r41, i10);
        $i11 = $r41[i10];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1293, null, $i11$sym);
        $r42 = virtualinvoke $r40.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i11);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r39, i10);
        $r39[i10] = $r42;
        _sym_tmp_30 = r0.<org.scoutant.blokish.GameView: int dots$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 510);
        $r43 = r0.<org.scoutant.blokish.GameView: android.graphics.drawable.Drawable[] dots>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r43, i10);
        $r44 = $r43[i10];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1364, null, null);
        virtualinvoke $r44.<android.graphics.drawable.Drawable: void setAlpha(int)>(191);
        _sym_tmp_31 = r0.<org.scoutant.blokish.GameView: int tabs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_31, 471);
        $r45 = r0.<org.scoutant.blokish.GameView: android.widget.TextView[] tabs>;
        $r46$sym = <org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression labels$sym>;
        _sym_tmp_32 = <org.scoutant.blokish.GameView: int labels$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_32, 521);
        $r46 = <org.scoutant.blokish.GameView: int[] labels>;
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r46$sym, i10$sym, $r46, i10);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r46, i10);
        $i12 = $r46[i10];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, $i12$sym);
        $r47 = virtualinvoke r0.<org.scoutant.blokish.GameView: android.view.View findViewById(int)>($i12);
        $r48 = (android.widget.TextView) $r47;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r45, i10);
        $r45[i10] = $r48;
        _sym_tmp_33 = r0.<org.scoutant.blokish.GameView: int tabs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_33, 471);
        $r49 = r0.<org.scoutant.blokish.GameView: android.widget.TextView[] tabs>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r49, i10);
        $r50 = $r49[i10];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1204, null);
        $r51 = virtualinvoke $r50.<android.widget.TextView: android.view.ViewParent getParent()>();
        r52 = (android.view.ViewGroup) $r51;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        _sym_tmp_35 = null;
        if r52 == null goto label11;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45451, 0);
        $r53 = new org.scoutant.blokish.GameView$ShowPiecesListener;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21775, null, null, i10$sym);
        specialinvoke $r53.<org.scoutant.blokish.GameView$ShowPiecesListener: void <init>(org.scoutant.blokish.GameView,int)>(r0, i10);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1450, null, null);
        virtualinvoke r52.<android.view.ViewGroup: void setOnClickListener(android.view.View$OnClickListener)>($r53);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;
        goto label12;

     label11:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45451, 1);
        goto label12;

     label12:
        i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i10$sym, null, i10, 1);
        i10 = i10 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;
        goto label10;

        goto label14;

     label13:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_35, 45450, 1);
        goto label14;

     label14:
        $r54 = new android.view.View;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke $r54.<android.view.View: void <init>(android.content.Context)>(r1);
        r55 = $r54;
        $r56 = new android.widget.FrameLayout$LayoutParams;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(990, null, null, null, null);
        specialinvoke $r56.<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>(150, 150, 17);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1369, null, null);
        virtualinvoke r55.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>($r56);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1511, null, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void addView(android.view.View)>(r55);
        $r57 = new org.scoutant.blokish.BusyIndicator;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21749, null, null, null);
        specialinvoke $r57.<org.scoutant.blokish.BusyIndicator: void <init>(android.content.Context,android.view.View)>(r1, r55);
        _sym_tmp_34 = r0.<org.scoutant.blokish.GameView: int indicator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_34, 522);
        _sym_tmp_34 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int indicator$a3tid> = _sym_tmp_34;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(522);
        r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.BusyIndicator indicator> = $r57;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 13);
        r3[13] = 1;
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.GameView r0;
        android.view.MotionEvent r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.PieceUI $r4;

        r0 := @this: org.scoutant.blokish.GameView;
        r1 := @parameter0: android.view.MotionEvent;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(2129, 32501, 2);
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r2 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45452, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45452, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 463);
        $r4 = r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_3 = null;
        if $r4 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45453, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(2129, null);
        return 0;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45453, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21779, null, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void doTouch(android.view.MotionEvent)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(2129, null);
        return 1;
    }

    public void doTouch(android.view.MotionEvent)
    {
        acteve.symbolic.integer.Expression _sym_tmp_13, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $f7$sym, $f6$sym, $f5$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $f4$sym, $f3$sym, $f2$sym, $i2$sym, $i1$sym, $f1$sym, $f0$sym, i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.scoutant.blokish.GameView r0;
        android.view.MotionEvent r1;
        boolean[][] $r2;
        boolean[] r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.lang.Float $r4, $r6;

        r0 := @this: org.scoutant.blokish.GameView;
        r1 := @parameter0: android.view.MotionEvent;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21779, 32502, 2);
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r2 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_13 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45454, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45454, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 2);
        r3 = $r2[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1469, null);
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();
        i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1469);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_13 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45455, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(7349, null);
        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getRawX()>();
        $f0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(7349);
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression downX$sym> = $f0$sym;
        _sym_tmp_2 = r0.<org.scoutant.blokish.GameView: int downX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 523);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int downX$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(523);
        r0.<org.scoutant.blokish.GameView: float downX> = $f0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(7350, null);
        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getRawY()>();
        $f1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(7350);
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression downY$sym> = $f1$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.GameView: int downY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 524);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int downY$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(524);
        r0.<org.scoutant.blokish.GameView: float downY> = $f1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45455, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_13 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 2);
        if i0 != 2 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45456, 0);
        $i1$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression selectedColor$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.GameView: int selectedColor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 525);
        $i1 = r0.<org.scoutant.blokish.GameView: int selectedColor>;
        $i2$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression swipe$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.GameView: int swipe$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 507);
        $i2 = r0.<org.scoutant.blokish.GameView: int swipe>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(7349, null);
        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getRawX()>();
        $f2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(7349);
        $f3$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression downX$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.GameView: int downX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 523);
        $f3 = r0.<org.scoutant.blokish.GameView: float downX>;
        $f4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f2$sym, $f3$sym, $f2, $f3);
        $f4 = $f2 - $f3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8332, $f4$sym);
        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        $i3 = virtualinvoke $r4.<java.lang.Float: int intValue()>();
        $i3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, $i3$sym, $i2, $i3);
        $i4 = $i2 + $i3;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i4$sym);
        $i5 = neg $i4;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21780, null, $i1$sym, $i5$sym);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void swipePieces(int,int)>($i1, $i5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45456, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_13 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        if i0 != 1 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45457, 0);
        $i6$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression swipe$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.GameView: int swipe$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 507);
        $i6 = r0.<org.scoutant.blokish.GameView: int swipe>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(7349, null);
        $f5 = virtualinvoke r1.<android.view.MotionEvent: float getRawX()>();
        $f5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(7349);
        $f6$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression downX$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.GameView: int downX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 523);
        $f6 = r0.<org.scoutant.blokish.GameView: float downX>;
        $f7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f5$sym, $f6$sym, $f5, $f6);
        $f7 = $f5 - $f6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8332, $f7$sym);
        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f7);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        $i7 = virtualinvoke $r6.<java.lang.Float: int intValue()>();
        $i7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i6$sym, $i7$sym, $i6, $i7);
        $i8 = $i6 + $i7;
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression swipe$sym> = $i8$sym;
        _sym_tmp_9 = r0.<org.scoutant.blokish.GameView: int swipe$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_9, 507);
        _sym_tmp_9 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int swipe$a3tid> = _sym_tmp_9;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(507);
        r0.<org.scoutant.blokish.GameView: int swipe> = $i8;
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression downX$sym> = null;
        _sym_tmp_10 = r0.<org.scoutant.blokish.GameView: int downX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_10, 523);
        _sym_tmp_10 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int downX$a3tid> = _sym_tmp_10;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(523);
        r0.<org.scoutant.blokish.GameView: float downX> = 0.0F;
        $i9$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression selectedColor$sym>;
        _sym_tmp_11 = r0.<org.scoutant.blokish.GameView: int selectedColor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 525);
        $i9 = r0.<org.scoutant.blokish.GameView: int selectedColor>;
        $i10$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression swipe$sym>;
        _sym_tmp_12 = r0.<org.scoutant.blokish.GameView: int swipe$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 507);
        $i10 = r0.<org.scoutant.blokish.GameView: int swipe>;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i10$sym);
        $i11 = neg $i10;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21780, null, $i9$sym, $i11$sym);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void swipePieces(int,int)>($i9, $i11);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45457, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        acteve.symbolic.integer.Expression _sym_tmp_34, $i52$sym, $i51$sym, $i50$sym, $i49$sym, $i48$sym, $i47$sym, $i46$sym, $i45$sym, $i44$sym, $i43$sym, $i42$sym, $i41$sym, $i40$sym, $i39$sym, $i38$sym, $i37$sym, $i36$sym, $i35$sym, $i34$sym, $i33$sym, $i32$sym, $i31$sym, $i30$sym, $i29$sym, $i28$sym, $i27$sym, $i26$sym, $i25$sym, $r15$sym, $z1$sym, $r11$sym, $i24$sym, $z0$sym, $f8$sym, $i23$sym, $i22$sym, $i21$sym, $f7$sym, $i20$sym, $i19$sym, $f6$sym, $i18$sym, $i17$sym, $i16$sym, i15$sym, $f5$sym, $i14$sym, $i13$sym, $f4$sym, $i12$sym, $i11$sym, $i10$sym, $f3$sym, $i9$sym, $i8$sym, $i7$sym, $f2$sym, $i6$sym, $i5$sym, $f1$sym, $i4$sym, $i3$sym, $f0$sym, $i2$sym, $i1$sym, i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_33, _sym_tmp_32, _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52;
        org.scoutant.blokish.GameView r0;
        android.graphics.Canvas r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.model.Square r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        android.graphics.Paint $r5, $r6, $r7;
        android.content.SharedPreferences $r8;
        boolean $z0, $z1;
        org.scoutant.blokish.model.Game $r9;
        java.util.List $r10, $r13;
        java.lang.Object $r11, $r15;
        org.scoutant.blokish.model.Board $r12;
        java.util.Iterator r14;
        android.graphics.drawable.Drawable[] $r16, $r18;
        android.graphics.drawable.Drawable $r17, $r19;

        r0 := @this: org.scoutant.blokish.GameView;
        r1 := @parameter0: android.graphics.Canvas;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1463, 32503, 2);
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r2 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_34 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_34, 45458, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_34, 45458, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 3);
        r3 = $r2[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1463, null, null);
        specialinvoke r0.<android.widget.FrameLayout: void onDraw(android.graphics.Canvas)>(r1);
        i0$sym = null;
        i0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_34 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 20);
        if i0 >= 20 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_34, 45459, 0);
        $i1$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 515);
        $i1 = r0.<org.scoutant.blokish.GameView: int size>;
        $i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i1$sym, i0, $i1);
        $i2 = i0 * $i1;
        $f0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i2$sym, 6);
        $f0 = (float) $i2;
        $i3$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 515);
        $i3 = r0.<org.scoutant.blokish.GameView: int size>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i3$sym, i0, $i3);
        $i4 = i0 * $i3;
        $f1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i4$sym, 6);
        $f1 = (float) $i4;
        $i5$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 515);
        $i5 = r0.<org.scoutant.blokish.GameView: int size>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i5$sym, 20, $i5);
        $i6 = 20 * $i5;
        $f2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i6$sym, 6);
        $f2 = (float) $i6;
        _sym_tmp_5 = r0.<org.scoutant.blokish.GameView: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 506);
        $r5 = r0.<org.scoutant.blokish.GameView: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2456, null, $f0$sym, null, $f1$sym, $f2$sym, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, 0.0F, $f1, $f2, $r5);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_34, 45459, 1);
        goto label4;

     label4:
        $i7$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 515);
        $i7 = r0.<org.scoutant.blokish.GameView: int size>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i7$sym, 20, $i7);
        $i8 = 20 * $i7;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, null, $i8, 1);
        $i9 = $i8 - 1;
        $f3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i9$sym, 6);
        $f3 = (float) $i9;
        $i10$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 515);
        $i10 = r0.<org.scoutant.blokish.GameView: int size>;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i10$sym, 20, $i10);
        $i11 = 20 * $i10;
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, null, $i11, 1);
        $i12 = $i11 - 1;
        $f4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i12$sym, 6);
        $f4 = (float) $i12;
        $i13$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 515);
        $i13 = r0.<org.scoutant.blokish.GameView: int size>;
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i13$sym, 20, $i13);
        $i14 = 20 * $i13;
        $f5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i14$sym, 6);
        $f5 = (float) $i14;
        _sym_tmp_9 = r0.<org.scoutant.blokish.GameView: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 506);
        $r6 = r0.<org.scoutant.blokish.GameView: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2456, null, $f3$sym, null, $f4$sym, $f5$sym, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f3, 0.0F, $f4, $f5, $r6);
        i15$sym = null;
        i15 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_34 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i15$sym, null, i15, 20);
        if i15 > 20 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_34, 45460, 0);
        $i16$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 515);
        $i16 = r0.<org.scoutant.blokish.GameView: int size>;
        $i17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i15$sym, $i16$sym, i15, $i16);
        $i17 = i15 * $i16;
        $i18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i17$sym, null, $i17, 1);
        $i18 = $i17 + 1;
        $f6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i18$sym, 6);
        $f6 = (float) $i18;
        $i19$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_11 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 515);
        $i19 = r0.<org.scoutant.blokish.GameView: int size>;
        $i20$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i19$sym, 20, $i19);
        $i20 = 20 * $i19;
        $f7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i20$sym, 6);
        $f7 = (float) $i20;
        $i21$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_12 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 515);
        $i21 = r0.<org.scoutant.blokish.GameView: int size>;
        $i22$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i15$sym, $i21$sym, i15, $i21);
        $i22 = i15 * $i21;
        $i23$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i22$sym, null, $i22, 1);
        $i23 = $i22 + 1;
        $f8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i23$sym, 6);
        $f8 = (float) $i23;
        _sym_tmp_13 = r0.<org.scoutant.blokish.GameView: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 506);
        $r7 = r0.<org.scoutant.blokish.GameView: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2456, null, null, $f6$sym, $f7$sym, $f8$sym, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>(0.0F, $f6, $f7, $f8, $r7);
        i15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i15$sym, null, i15, 1);
        i15 = i15 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label5;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_34, 45460, 1);
        goto label7;

     label7:
        _sym_tmp_14 = r0.<org.scoutant.blokish.GameView: int prefs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 514);
        $r8 = r0.<org.scoutant.blokish.GameView: android.content.SharedPreferences prefs>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        $z0 = interfaceinvoke $r8.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("displaySeeds", 1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        _sym_tmp_34 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_34, 45461, 0);
        _sym_tmp_15 = r0.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 467);
        $r9 = r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_16 = $r9.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 473);
        $r10 = $r9.<org.scoutant.blokish.model.Game: java.util.List boards>;
        $i24$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression selectedColor$sym>;
        _sym_tmp_17 = r0.<org.scoutant.blokish.GameView: int selectedColor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 525);
        $i24 = r0.<org.scoutant.blokish.GameView: int selectedColor>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i24$sym);
        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>($i24);
        $r11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r12 = (org.scoutant.blokish.model.Board) $r11;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        $r13 = virtualinvoke $r12.<org.scoutant.blokish.model.Board: java.util.List seeds()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;

     label8:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        _sym_tmp_34 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_34, 45462, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();
        $r15$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r4 = (org.scoutant.blokish.model.Square) $r15;
        _sym_tmp_18 = r0.<org.scoutant.blokish.GameView: int dots$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 510);
        $r16 = r0.<org.scoutant.blokish.GameView: android.graphics.drawable.Drawable[] dots>;
        $i25$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression selectedColor$sym>;
        _sym_tmp_19 = r0.<org.scoutant.blokish.GameView: int selectedColor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 525);
        $i25 = r0.<org.scoutant.blokish.GameView: int selectedColor>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r16, $i25);
        $r17 = $r16[$i25];
        $i26$sym = r4.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_20 = r4.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 526);
        $i26 = r4.<org.scoutant.blokish.model.Square: int i>;
        $i27$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_21 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 515);
        $i27 = r0.<org.scoutant.blokish.GameView: int size>;
        $i28$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i26$sym, $i27$sym, $i26, $i27);
        $i28 = $i26 * $i27;
        $i29$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_22 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 515);
        $i29 = r0.<org.scoutant.blokish.GameView: int size>;
        $i30$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i29$sym, null, $i29, 4);
        $i30 = $i29 / 4;
        $i31$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i28$sym, $i30$sym, $i28, $i30);
        $i31 = $i28 + $i30;
        $i32$sym = r4.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_23 = r4.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 527);
        $i32 = r4.<org.scoutant.blokish.model.Square: int j>;
        $i33$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_24 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 515);
        $i33 = r0.<org.scoutant.blokish.GameView: int size>;
        $i34$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i32$sym, $i33$sym, $i32, $i33);
        $i34 = $i32 * $i33;
        $i35$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_25 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 515);
        $i35 = r0.<org.scoutant.blokish.GameView: int size>;
        $i36$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i35$sym, null, $i35, 4);
        $i36 = $i35 / 4;
        $i37$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i34$sym, $i36$sym, $i34, $i36);
        $i37 = $i34 + $i36;
        $i38$sym = r4.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_26 = r4.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 526);
        $i38 = r4.<org.scoutant.blokish.model.Square: int i>;
        $i39$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_27 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 515);
        $i39 = r0.<org.scoutant.blokish.GameView: int size>;
        $i40$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i38$sym, $i39$sym, $i38, $i39);
        $i40 = $i38 * $i39;
        $i41$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_28 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_28, 515);
        $i41 = r0.<org.scoutant.blokish.GameView: int size>;
        $i42$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i41$sym, 3, $i41);
        $i42 = 3 * $i41;
        $i43$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i42$sym, null, $i42, 4);
        $i43 = $i42 / 4;
        $i44$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i40$sym, $i43$sym, $i40, $i43);
        $i44 = $i40 + $i43;
        $i45$sym = r4.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_29 = r4.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 527);
        $i45 = r4.<org.scoutant.blokish.model.Square: int j>;
        $i46$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_30 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 515);
        $i46 = r0.<org.scoutant.blokish.GameView: int size>;
        $i47$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i45$sym, $i46$sym, $i45, $i46);
        $i47 = $i45 * $i46;
        $i48$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_31 = r0.<org.scoutant.blokish.GameView: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_31, 515);
        $i48 = r0.<org.scoutant.blokish.GameView: int size>;
        $i49$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i48$sym, 3, $i48);
        $i49 = 3 * $i48;
        $i50$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i49$sym, null, $i49, 4);
        $i50 = $i49 / 4;
        $i51$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i47$sym, $i50$sym, $i47, $i50);
        $i51 = $i47 + $i50;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1353, null, $i31$sym, $i37$sym, $i44$sym, $i51$sym);
        virtualinvoke $r17.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i31, $i37, $i44, $i51);
        _sym_tmp_32 = r0.<org.scoutant.blokish.GameView: int dots$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_32, 510);
        $r18 = r0.<org.scoutant.blokish.GameView: android.graphics.drawable.Drawable[] dots>;
        $i52$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression selectedColor$sym>;
        _sym_tmp_33 = r0.<org.scoutant.blokish.GameView: int selectedColor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_33, 525);
        $i52 = r0.<org.scoutant.blokish.GameView: int selectedColor>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r18, $i52);
        $r19 = $r18[$i52];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1462, null, null);
        virtualinvoke $r19.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        goto label8;

        goto label11;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_34, 45461, 1);
        goto label11;

        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_34, 45462, 1);
        goto label11;

     label11:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        return;
    }

    public org.scoutant.blokish.PieceUI findPiece(int, java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $i3$sym, $z0$sym, $i2$sym, i1$sym, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3;
        org.scoutant.blokish.GameView r0;
        java.lang.String r1, $r8;
        boolean[][] $r2;
        boolean[] r3;
        null_type n0;
        android.view.View r4;
        boolean $z0;
        org.scoutant.blokish.PieceUI r5;
        org.scoutant.blokish.model.Piece $r6, $r7;

        r0 := @this: org.scoutant.blokish.GameView;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21782, 32504, 3);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r2 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45463, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45463, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 4);
        r3 = $r2[4];
        n0 = null;
        i1$sym = null;
        i1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1437, null);
        $i2 = virtualinvoke r0.<org.scoutant.blokish.GameView: int getChildCount()>();
        $i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1437);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i2$sym, i1, $i2);
        if i1 >= $i2 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45464, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1443, null, i1$sym);
        r4 = virtualinvoke r0.<org.scoutant.blokish.GameView: android.view.View getChildAt(int)>(i1);
        $z0$sym = null;
        $z0 = r4 instanceof org.scoutant.blokish.PieceUI;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45465, 0);
        r5 = (org.scoutant.blokish.PieceUI) r4;
        _sym_tmp_2 = r5.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 464);
        $r6 = r5.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i3$sym = $r6.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_3 = $r6.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 470);
        $i3 = $r6.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, i0$sym, $i3, i0);
        if $i3 != i0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45466, 0);
        _sym_tmp_4 = r5.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 464);
        $r7 = r5.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        _sym_tmp_5 = $r7.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 528);
        $r8 = $r7.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_6 = null;
        if $r8 != r1 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45467, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        return r5;

        goto label6;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45465, 1);
        goto label6;

        goto label6;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45466, 1);
        goto label6;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45467, 1);
        goto label6;

     label6:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        goto label2;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45464, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        return null;
    }

    public org.scoutant.blokish.PieceUI findPiece(org.scoutant.blokish.model.Piece)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0;
        org.scoutant.blokish.GameView r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        java.lang.String $r4;
        org.scoutant.blokish.PieceUI $r5;

        r0 := @this: org.scoutant.blokish.GameView;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21783, 32505, 2);
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r2 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45468, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45468, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 5);
        r3 = $r2[5];
        $i0$sym = r1.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_2 = r1.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 470);
        $i0 = r1.<org.scoutant.blokish.model.Piece: int color>;
        _sym_tmp_3 = r1.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 528);
        $r4 = r1.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21782, null, $i0$sym, null);
        $r5 = virtualinvoke r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI findPiece(int,java.lang.String)>($i0, $r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return $r5;
    }

    public void play(org.scoutant.blokish.model.Move, boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_17, $i5$sym, $r17$sym, $i4$sym, $i3$sym, $i2$sym, $i1$sym, $i0$sym, z1$sym, r3$sym, z0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3, $i4, $i5;
        org.scoutant.blokish.GameView r0;
        org.scoutant.blokish.model.Move r1;
        boolean z0, z1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.PieceUI r4;
        org.scoutant.blokish.model.Piece $r5, $r8, $r10, $r16;
        org.scoutant.blokish.model.Game $r6, $r14;
        org.scoutant.blokish.PieceUI[] $r7;
        android.widget.TextView[] $r9;
        android.widget.TextView $r11;
        java.lang.StringBuilder $r12, $r13, $r19;
        java.util.List $r15;
        java.lang.Object $r17;
        org.scoutant.blokish.model.Board $r18;
        java.lang.String $r20;

        r0 := @this: org.scoutant.blokish.GameView;
        r1 := @parameter0: org.scoutant.blokish.model.Move;
        z0 := @parameter1: boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21786, 32506, 3);
        z0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r2 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_17 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_17, 45469, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_17, 45469, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 6);
        r3 = $r2[6];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_17 = null;
        if r1 != null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_17, 45470, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        return;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_17, 45470, 1);
        goto label3;

     label3:
        _sym_tmp_2 = r1.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 472);
        $r5 = r1.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21783, null, null);
        r4 = virtualinvoke r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI findPiece(org.scoutant.blokish.model.Piece)>($r5);
        _sym_tmp_3 = r0.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 467);
        $r6 = r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21754, null, null);
        z1 = virtualinvoke $r6.<org.scoutant.blokish.model.Game: boolean play(org.scoutant.blokish.model.Move)>(r1);
        z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21754);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_17 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z1$sym, null, z1, 0);
        if z1 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_17, 45471, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.GameView: int lasts$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 469);
        $r7 = r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI[] lasts>;
        _sym_tmp_5 = r4.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 464);
        $r8 = r4.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i0$sym = $r8.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_6 = $r8.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 470);
        $i0 = $r8.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r7, $i0);
        $r7[$i0] = r4;
        $i1$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_7 = r1.<org.scoutant.blokish.model.Move: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 529);
        $i1 = r1.<org.scoutant.blokish.model.Move: int i>;
        $i2$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_8 = r1.<org.scoutant.blokish.model.Move: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 530);
        $i2 = r1.<org.scoutant.blokish.model.Move: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21784, null, $i1$sym, $i2$sym, z0$sym);
        virtualinvoke r4.<org.scoutant.blokish.PieceUI: void place(int,int,boolean)>($i1, $i2, z0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_17, 45471, 1);
        goto label5;

     label5:
        _sym_tmp_9 = r0.<org.scoutant.blokish.GameView: int tabs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 471);
        $r9 = r0.<org.scoutant.blokish.GameView: android.widget.TextView[] tabs>;
        _sym_tmp_10 = r1.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 472);
        $r10 = r1.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        $i3$sym = $r10.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_11 = $r10.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 470);
        $i3 = $r10.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r9, $i3);
        $r11 = $r9[$i3];
        $r12 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        _sym_tmp_12 = r0.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 467);
        $r14 = r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_13 = $r14.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 473);
        $r15 = $r14.<org.scoutant.blokish.model.Game: java.util.List boards>;
        _sym_tmp_14 = r1.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 472);
        $r16 = r1.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        $i4$sym = $r16.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_15 = $r16.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 470);
        $i4 = $r16.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i4$sym);
        $r17 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>($i4);
        $r17$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r18 = (org.scoutant.blokish.model.Board) $r17;
        $i5$sym = $r18.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression score$sym>;
        _sym_tmp_16 = $r18.<org.scoutant.blokish.model.Board: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 474);
        $i5 = $r18.<org.scoutant.blokish.model.Board: int score>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i5$sym);
        $r19 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1348, null, null);
        virtualinvoke $r11.<android.widget.TextView: void setText(java.lang.CharSequence)>($r20);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21785, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void mayReorderPieces()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        return;
    }

    public void showPieces(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $b2$sym, $i1$sym, $r6$sym, $z0$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1;
        org.scoutant.blokish.GameView r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.Iterator r3;
        org.scoutant.blokish.PieceUI r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.scoutant.blokish.model.Piece $r8;
        byte $b2;

        r0 := @this: org.scoutant.blokish.GameView;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21757, 32507, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r1 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45472, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45472, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 7);
        r2 = $r1[7];
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression selectedColor$sym> = i0$sym;
        _sym_tmp_2 = r0.<org.scoutant.blokish.GameView: int selectedColor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 525);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int selectedColor$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(525);
        r0.<org.scoutant.blokish.GameView: int selectedColor> = i0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21787, null);
        $r5 = specialinvoke r0.<org.scoutant.blokish.GameView: java.util.List piecesInStore()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45473, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        $r6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r4 = (org.scoutant.blokish.PieceUI) $r6;
        _sym_tmp_3 = r4.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 464);
        $r8 = r4.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i1$sym = $r8.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_4 = $r8.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 470);
        $i1 = $r8.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, i0$sym, $i1, i0);
        if $i1 != i0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45474, 0);
        $b2$sym = null;
        $b2 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label5;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45474, 1);
        goto label4;

     label4:
        $b2$sym = null;
        $b2 = 4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;

     label5:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, $b2$sym);
        virtualinvoke r4.<org.scoutant.blokish.PieceUI: void setVisibility(int)>($b2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label2;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45473, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        return;
    }

    public void swipePieces(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $r6$sym, $z0$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1;
        org.scoutant.blokish.GameView r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.Iterator r3;
        org.scoutant.blokish.PieceUI r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: org.scoutant.blokish.GameView;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21780, 32508, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r1 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45475, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45475, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 8);
        r2 = $r1[8];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21788, null, i0$sym);
        $r5 = specialinvoke r0.<org.scoutant.blokish.GameView: java.util.List piecesInStore(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45476, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();
        $r6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r4 = (org.scoutant.blokish.PieceUI) $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21789, null, i1$sym);
        virtualinvoke r4.<org.scoutant.blokish.PieceUI: void swipe(int)>(i1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45476, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return;
    }

    public void mayReorderPieces()
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $i2$sym, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2;
        org.scoutant.blokish.GameView r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.GameView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21785, 32509, 1);
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r1 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45477, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45477, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];
        $i0$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression gone$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.GameView: int gone$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 508);
        $i0 = r0.<org.scoutant.blokish.GameView: int gone>;
        $i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 1);
        $i1 = $i0 + 1;
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression gone$sym> = $i1$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.GameView: int gone$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 508);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int gone$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(508);
        r0.<org.scoutant.blokish.GameView: int gone> = $i1;
        $i2$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression gone$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.GameView: int gone$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 508);
        $i2 = r0.<org.scoutant.blokish.GameView: int gone>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, null, $i2, 8);
        if $i2 < 8 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45478, 0);
        r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression gone$sym> = null;
        _sym_tmp_5 = r0.<org.scoutant.blokish.GameView: int gone$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 508);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.GameView: int gone$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(508);
        r0.<org.scoutant.blokish.GameView: int gone> = 0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21790, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void reorderPieces()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45478, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    public void reorderPieces()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0;
        org.scoutant.blokish.GameView r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.GameView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21790, 32510, 1);
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r1 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45479, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45479, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 10);
        r2 = $r1[10];
        i0$sym = null;
        i0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 4);
        if i0 >= 4 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45480, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21778, null, i0$sym);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void reorderPieces(int)>(i0);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45480, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return;
    }

    public void reorderPieces(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_21, $i18$sym, $i17$sym, $i16$sym, $r18$sym, $i15$sym, $i14$sym, $r16$sym, $i13$sym, $z2$sym, $i12$sym, $b11$sym, $i10$sym, $b9$sym, $i8$sym, $i7$sym, $i6$sym, $r10$sym, $i5$sym, $i4$sym, $r8$sym, $i3$sym, $z1$sym, $z0$sym, $r5$sym, $i2$sym, i1$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.scoutant.blokish.GameView r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.List r3;
        org.scoutant.blokish.PieceUI r4, $r9, $r11, $r17, $r19;
        java.lang.Object $r5, $r8, $r10, $r16, $r18;
        boolean $z0, $z1, $z2;
        org.scoutant.blokish.model.Piece $r6, $r12, $r14, $r20;
        java.lang.String $r7, $r15;
        byte $b9, $b11;

        r0 := @this: org.scoutant.blokish.GameView;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21778, 32511, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r1 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_21 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45481, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45481, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 11);
        r2 = $r1[11];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21788, null, i0$sym);
        r3 = specialinvoke r0.<org.scoutant.blokish.GameView: java.util.List piecesInStore(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(3863, null);
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21791, null);
        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r3);
        i1$sym = null;
        i1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i2 = interfaceinvoke r3.<java.util.List: int size()>();
        $i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i2$sym, i1, $i2);
        if i1 >= $i2 goto label17;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45482, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i1$sym);
        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);
        $r5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r4 = (org.scoutant.blokish.PieceUI) $r5;
        $z0$sym = r0.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression singleline$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.GameView: int singleline$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 513);
        $z0 = r0.<org.scoutant.blokish.GameView: boolean singleline>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45483, 0);
        r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j0$sym> = null;
        _sym_tmp_3 = r4.<org.scoutant.blokish.PieceUI: int j0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 531);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r4.<org.scoutant.blokish.PieceUI: int j0$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(531);
        r4.<org.scoutant.blokish.PieceUI: int j0> = 22;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        if i1 >= 1 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45484, 0);
        _sym_tmp_4 = r4.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 464);
        $r6 = r4.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        _sym_tmp_5 = $r6.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 528);
        $r7 = $r6.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("I5");
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45485, 0);
        r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i0$sym> = null;
        _sym_tmp_6 = r4.<org.scoutant.blokish.PieceUI: int i0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 532);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r4.<org.scoutant.blokish.PieceUI: int i0$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(532);
        r4.<org.scoutant.blokish.PieceUI: int i0> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label16;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45485, 1);
        goto label4;

     label4:
        r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i0$sym> = null;
        _sym_tmp_7 = r4.<org.scoutant.blokish.PieceUI: int i0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_7, 532);
        _sym_tmp_7 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r4.<org.scoutant.blokish.PieceUI: int i0$a3tid> = _sym_tmp_7;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(532);
        r4.<org.scoutant.blokish.PieceUI: int i0> = 2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label16;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45484, 1);
        goto label6;

     label6:
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        $i3 = i1 - 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i3$sym);
        $r8 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i3);
        $r8$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r9 = (org.scoutant.blokish.PieceUI) $r8;
        $i4$sym = $r9.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i0$sym>;
        _sym_tmp_8 = $r9.<org.scoutant.blokish.PieceUI: int i0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 532);
        $i4 = $r9.<org.scoutant.blokish.PieceUI: int i0>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        $i5 = i1 - 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i5$sym);
        $r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i5);
        $r10$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r11 = (org.scoutant.blokish.PieceUI) $r10;
        _sym_tmp_9 = $r11.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 464);
        $r12 = $r11.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i6$sym = $r12.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_10 = $r12.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 533);
        $i6 = $r12.<org.scoutant.blokish.model.Piece: int size>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, $i6$sym, $i4, $i6);
        $i7 = $i4 + $i6;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, null, $i7, 1);
        $i8 = $i7 + 1;
        r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i0$sym> = $i8$sym;
        _sym_tmp_11 = r4.<org.scoutant.blokish.PieceUI: int i0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 532);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r4.<org.scoutant.blokish.PieceUI: int i0$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(532);
        r4.<org.scoutant.blokish.PieceUI: int i0> = $i8;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label16;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45483, 1);
        goto label8;

     label8:
        $b9$sym = null;
        $b9 = 22;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 2);
        $i10 = i1 % 2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, null, $i10, 0);
        if $i10 <= 0 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45486, 0);
        $b11$sym = null;
        $b11 = 5;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        goto label11;

        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45486, 1);
        goto label10;

     label10:
        $b11$sym = null;
        $b11 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 10);
        r2[10] = 1;

     label11:
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($b9$sym, $b11$sym, $b9, $b11);
        $i12 = $b9 + $b11;
        r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j0$sym> = $i12$sym;
        _sym_tmp_12 = r4.<org.scoutant.blokish.PieceUI: int j0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_12, 531);
        _sym_tmp_12 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r4.<org.scoutant.blokish.PieceUI: int j0$a3tid> = _sym_tmp_12;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(531);
        r4.<org.scoutant.blokish.PieceUI: int j0> = $i12;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 11);
        r2[11] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 2);
        if i1 >= 2 goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45487, 0);
        _sym_tmp_13 = r4.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 464);
        $r14 = r4.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        _sym_tmp_14 = $r14.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 528);
        $r15 = $r14.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("I5");
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 12);
        r2[12] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45488, 0);
        r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i0$sym> = null;
        _sym_tmp_15 = r4.<org.scoutant.blokish.PieceUI: int i0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_15, 532);
        _sym_tmp_15 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r4.<org.scoutant.blokish.PieceUI: int i0$a3tid> = _sym_tmp_15;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(532);
        r4.<org.scoutant.blokish.PieceUI: int i0> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 13);
        r2[13] = 1;
        goto label16;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45488, 1);
        goto label13;

     label13:
        r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i0$sym> = null;
        _sym_tmp_16 = r4.<org.scoutant.blokish.PieceUI: int i0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_16, 532);
        _sym_tmp_16 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r4.<org.scoutant.blokish.PieceUI: int i0$a3tid> = _sym_tmp_16;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(532);
        r4.<org.scoutant.blokish.PieceUI: int i0> = 2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 14);
        r2[14] = 1;
        goto label16;

        goto label15;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45487, 1);
        goto label15;

     label15:
        $i13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 2);
        $i13 = i1 - 2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i13$sym);
        $r16 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i13);
        $r16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r17 = (org.scoutant.blokish.PieceUI) $r16;
        $i14$sym = $r17.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i0$sym>;
        _sym_tmp_17 = $r17.<org.scoutant.blokish.PieceUI: int i0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 532);
        $i14 = $r17.<org.scoutant.blokish.PieceUI: int i0>;
        $i15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 2);
        $i15 = i1 - 2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i15$sym);
        $r18 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i15);
        $r18$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r19 = (org.scoutant.blokish.PieceUI) $r18;
        _sym_tmp_18 = $r19.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 464);
        $r20 = $r19.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i16$sym = $r20.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_19 = $r20.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 533);
        $i16 = $r20.<org.scoutant.blokish.model.Piece: int size>;
        $i17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, $i16$sym, $i14, $i16);
        $i17 = $i14 + $i16;
        $i18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i17$sym, null, $i17, 1);
        $i18 = $i17 + 1;
        r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i0$sym> = $i18$sym;
        _sym_tmp_20 = r4.<org.scoutant.blokish.PieceUI: int i0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_20, 532);
        _sym_tmp_20 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r4.<org.scoutant.blokish.PieceUI: int i0$a3tid> = _sym_tmp_20;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(532);
        r4.<org.scoutant.blokish.PieceUI: int i0> = $i18;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 15);
        r2[15] = 1;

     label16:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21758, null);
        virtualinvoke r4.<org.scoutant.blokish.PieceUI: void replace()>();
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 16);
        r2[16] = 1;
        goto label2;

        goto label18;

     label17:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45482, 1);
        goto label18;

     label18:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 17);
        r2[17] = 1;
        return;
    }

    private java.util.List piecesInStore()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $z1$sym, $z0$sym, $i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0, $i1;
        org.scoutant.blokish.GameView r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList r3, $r5;
        org.scoutant.blokish.PieceUI r4;
        android.view.View $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: org.scoutant.blokish.GameView;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21787, 32512, 1);
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r1 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45489, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45489, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 12);
        r2 = $r1[12];
        $r5 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<java.util.ArrayList: void <init>()>();
        r3 = $r5;
        i0$sym = null;
        i0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1437, null);
        $i1 = virtualinvoke r0.<org.scoutant.blokish.GameView: int getChildCount()>();
        $i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1437);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_3 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i1$sym, i0, $i1);
        if i0 >= $i1 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45490, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1443, null, i0$sym);
        $r6 = virtualinvoke r0.<org.scoutant.blokish.GameView: android.view.View getChildAt(int)>(i0);
        $z0$sym = null;
        $z0 = $r6 instanceof org.scoutant.blokish.PieceUI;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_3 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45491, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1443, null, i0$sym);
        $r7 = virtualinvoke r0.<org.scoutant.blokish.GameView: android.view.View getChildAt(int)>(i0);
        r4 = (org.scoutant.blokish.PieceUI) $r7;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_3 = null;
        if r4 == null goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45492, 0);
        $z1$sym = r4.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression movable$sym>;
        _sym_tmp_2 = r4.<org.scoutant.blokish.PieceUI: int movable$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 468);
        $z1 = r4.<org.scoutant.blokish.PieceUI: boolean movable>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_3 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45493, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label6;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45491, 1);
        goto label6;

        goto label6;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45492, 1);
        goto label6;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45493, 1);
        goto label6;

     label6:
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label2;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45490, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        return r3;
    }

    private java.util.List piecesInStore(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i1$sym, $r8$sym, $z0$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1;
        org.scoutant.blokish.GameView r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList r3, $r6;
        java.util.Iterator r4;
        org.scoutant.blokish.PieceUI r5;
        java.util.List $r7;
        boolean $z0;
        java.lang.Object $r8;
        org.scoutant.blokish.model.Piece $r9;

        r0 := @this: org.scoutant.blokish.GameView;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21788, 32513, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r1 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45494, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45494, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 13);
        r2 = $r1[13];
        $r6 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<java.util.ArrayList: void <init>()>();
        r3 = $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21787, null);
        $r7 = specialinvoke r0.<org.scoutant.blokish.GameView: java.util.List piecesInStore()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45495, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r8$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.PieceUI) $r8;
        _sym_tmp_2 = r5.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 464);
        $r9 = r5.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i1$sym = $r9.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_3 = $r9.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 470);
        $i1 = $r9.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, i0$sym, $i1, i0);
        if $i1 != i0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45496, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45496, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        goto label2;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45495, 1);
        goto label6;

     label6:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        return r3;
    }

    public boolean replay(java.util.List)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $r8$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.GameView r0;
        java.util.List r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Iterator r4;
        org.scoutant.blokish.model.Move r5;
        org.scoutant.blokish.model.Piece r6, $r9;
        org.scoutant.blokish.PieceUI r7;
        boolean $z0;
        java.lang.Object $r8;

        r0 := @this: org.scoutant.blokish.GameView;
        r1 := @parameter0: java.util.List;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21793, 32514, 2);
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 505);
        $r2 = <org.scoutant.blokish.GameView: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45497, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45497, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 14);
        r3 = $r2[14];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45498, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r8$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Move) $r8;
        _sym_tmp_2 = r5.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 472);
        r6 = r5.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21783, null, null);
        r7 = virtualinvoke r0.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI findPiece(org.scoutant.blokish.model.Piece)>(r6);
        _sym_tmp_3 = r7.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 464);
        $r9 = r7.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21792, null, null);
        virtualinvoke $r9.<org.scoutant.blokish.model.Piece: void reset(org.scoutant.blokish.model.Piece)>(r6);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21786, null, null, null);
        virtualinvoke r0.<org.scoutant.blokish.GameView: void play(org.scoutant.blokish.model.Move,boolean)>(r5, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45498, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21793, null);
        return 1;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, r1$sym;
        boolean[][] $r0;
        boolean[] r1;
        int[] $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32515, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.GameView: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 15);
        r1 = $r0[15];
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 516);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.GameView: int tag$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(516);
        <org.scoutant.blokish.GameView: java.lang.String tag> = "activity";
        $r2 = newarray (int)[4];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 0, 2130837518);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 0);
        $r2[0] = 2130837518;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 1, 2130837517);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 1);
        $r2[1] = 2130837517;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 2, 2130837515);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 2);
        $r2[2] = 2130837515;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 3, 2130837519);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 3);
        $r2[3] = 2130837519;
        <org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression icons$sym> = $r2$sym;
        _sym_tmp_2 = <org.scoutant.blokish.GameView: int icons$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 520);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.GameView: int icons$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(520);
        <org.scoutant.blokish.GameView: int[] icons> = $r2;
        $r3 = newarray (int)[4];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r3$sym, null, null, $r3, 0, 2131361800);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 0);
        $r3[0] = 2131361800;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r3$sym, null, null, $r3, 1, 2131361801);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 1);
        $r3[1] = 2131361801;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r3$sym, null, null, $r3, 2, 2131361802);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 2);
        $r3[2] = 2131361802;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r3$sym, null, null, $r3, 3, 2131361803);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 3);
        $r3[3] = 2131361803;
        <org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression labels$sym> = $r3$sym;
        _sym_tmp_3 = <org.scoutant.blokish.GameView: int labels$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 521);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.GameView: int labels$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(521);
        <org.scoutant.blokish.GameView: int[] labels> = $r3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r16$sym, $r15$sym, $r14$sym, $r13$sym, $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32516, 0);
        $r0 = newmultiarray (boolean)[16][];
        _sym_tmp_1 = <org.scoutant.blokish.GameView: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 505);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.GameView: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(505);
        <org.scoutant.blokish.GameView: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[14];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[7];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[11];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[8];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[5];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[7];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[4];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[3];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[4];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[18];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        $r13 = newarray (boolean)[8];
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 12);
        $r0[12] = $r13;
        $r14 = newarray (boolean)[6];
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 13);
        $r0[13] = $r14;
        $r15 = newarray (boolean)[4];
        $r15$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 14);
        $r0[14] = $r15;
        $r16 = newarray (boolean)[1];
        $r16$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 15);
        $r0[15] = $r16;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/GameView", -5754781838155045137L);
        return $r0;
    }
}
class org.scoutant.blokish.Help$1 extends java.lang.Object implements android.view.View$OnClickListener
{
    final org.scoutant.blokish.Help this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.Help)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.Help$1 r0;
        org.scoutant.blokish.Help r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.Help$1;
        r1 := @parameter0: org.scoutant.blokish.Help;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21794, 32517, 2);
        _sym_tmp_1 = <org.scoutant.blokish.Help$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 534);
        $r2 = <org.scoutant.blokish.Help$1: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45499, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.Help$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45499, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.Help$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 535);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.Help$1: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(535);
        r0.<org.scoutant.blokish.Help$1: org.scoutant.blokish.Help this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.Help$1 r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.Help $r4;
        android.content.Intent $r5;
        android.net.Uri $r6;

        r0 := @this: org.scoutant.blokish.Help$1;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1399, 32518, 2);
        _sym_tmp_1 = <org.scoutant.blokish.Help$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 534);
        $r2 = <org.scoutant.blokish.Help$1: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45500, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.Help$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45500, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.Help$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 535);
        $r4 = r0.<org.scoutant.blokish.Help$1: org.scoutant.blokish.Help this$0>;
        $r5 = new android.content.Intent;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(287, null);
        $r6 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("vnd.youtube://3Q7ow07uaMw");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5115, null, null, null);
        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.VIEW", $r6);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1404, null, null);
        virtualinvoke $r4.<org.scoutant.blokish.Help: void startActivity(android.content.Intent)>($r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32519, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.Help$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32520, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.Help$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 534);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.Help$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(534);
        <org.scoutant.blokish.Help$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/Help$1", 4320153512840873741L);
        return $r0;
    }
}
public class org.scoutant.blokish.Help extends android.app.Activity
{
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.Help r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.Help;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32521, 1);
        _sym_tmp_1 = <org.scoutant.blokish.Help: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 536);
        $r1 = <org.scoutant.blokish.Help: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45501, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.Help: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45501, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.app.Activity: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    protected void onCreate(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.Help r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;
        android.view.View r4;
        org.scoutant.blokish.Help$1 $r5;

        r0 := @this: org.scoutant.blokish.Help;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1621, 32522, 2);
        _sym_tmp_1 = <org.scoutant.blokish.Help: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 536);
        $r2 = <org.scoutant.blokish.Help: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45502, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.Help: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45502, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1621, null, null);
        specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1626, null, null);
        virtualinvoke r0.<org.scoutant.blokish.Help: void setContentView(int)>(2130903041);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        r4 = virtualinvoke r0.<org.scoutant.blokish.Help: android.view.View findViewById(int)>(2131361795);
        $r5 = new org.scoutant.blokish.Help$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21794, null, null);
        specialinvoke $r5.<org.scoutant.blokish.Help$1: void <init>(org.scoutant.blokish.Help)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1450, null, null);
        virtualinvoke r4.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32523, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.Help: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32524, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.Help: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 536);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.Help: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(536);
        <org.scoutant.blokish.Help: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/Help", 3934875470029452825L);
        return $r0;
    }
}
public class org.scoutant.blokish.PieceUI extends android.widget.FrameLayout implements android.view.View$OnTouchListener, android.view.View$OnLongClickListener, java.lang.Comparable
{
    public static final int PADDING;
    private static final java.lang.String tag;
    private android.content.res.Resources resources;
    private android.graphics.drawable.Drawable square;
    private android.graphics.drawable.Drawable square_bold;
    private android.graphics.Canvas canvas;
    private int size;
    private int footprint;
    private int df;
    public org.scoutant.blokish.model.Piece piece;
    public int i0;
    public int j0;
    public int i;
    public int j;
    private int localX;
    private int localY;
    public static int[] icons;
    public static int[] icons_bold;
    public boolean movable;
    public boolean moving;
    private boolean rotating;
    private android.graphics.Paint paint;
    public int swipeX;
    private int downX;
    private int downY;
    private int angle;
    private int radius;
    private double rDown;
    private float rawX;
    private float rawY;
    private int oo;
    private android.content.Context context;
    private android.os.Vibrator vibrator;
    private android.view.animation.Animation animation;
    private int statusBarHeight;
    private android.graphics.Matrix m;
    private static final boolean[][] $VRc;
    public static final acteve.symbolic.integer.Expression PADDING$sym;
    public static final int PADDING$a3tid;
    private static final int tag$a3tid;
    private int resources$a3tid;
    private int square$a3tid;
    private int square_bold$a3tid;
    private int canvas$a3tid;
    private acteve.symbolic.integer.Expression size$sym;
    private int size$a3tid;
    private acteve.symbolic.integer.Expression footprint$sym;
    private int footprint$a3tid;
    private acteve.symbolic.integer.Expression df$sym;
    private int df$a3tid;
    public int piece$a3tid;
    public acteve.symbolic.integer.Expression i0$sym;
    public int i0$a3tid;
    public acteve.symbolic.integer.Expression j0$sym;
    public int j0$a3tid;
    public acteve.symbolic.integer.Expression i$sym;
    public int i$a3tid;
    public acteve.symbolic.integer.Expression j$sym;
    public int j$a3tid;
    private acteve.symbolic.integer.Expression localX$sym;
    private int localX$a3tid;
    private acteve.symbolic.integer.Expression localY$sym;
    private int localY$a3tid;
    public static acteve.symbolic.integer.Expression icons$sym;
    public static int icons$a3tid;
    public static acteve.symbolic.integer.Expression icons_bold$sym;
    public static int icons_bold$a3tid;
    public acteve.symbolic.integer.Expression movable$sym;
    public int movable$a3tid;
    public acteve.symbolic.integer.Expression moving$sym;
    public int moving$a3tid;
    private acteve.symbolic.integer.Expression rotating$sym;
    private int rotating$a3tid;
    private int paint$a3tid;
    public acteve.symbolic.integer.Expression swipeX$sym;
    public int swipeX$a3tid;
    private acteve.symbolic.integer.Expression downX$sym;
    private int downX$a3tid;
    private acteve.symbolic.integer.Expression downY$sym;
    private int downY$a3tid;
    private acteve.symbolic.integer.Expression angle$sym;
    private int angle$a3tid;
    private acteve.symbolic.integer.Expression radius$sym;
    private int radius$a3tid;
    private acteve.symbolic.integer.Expression rDown$sym;
    private int rDown$a3tid;
    private acteve.symbolic.integer.Expression rawX$sym;
    private int rawX$a3tid;
    private acteve.symbolic.integer.Expression rawY$sym;
    private int rawY$a3tid;
    private acteve.symbolic.integer.Expression oo$sym;
    private int oo$a3tid;
    private int context$a3tid;
    private int vibrator$a3tid;
    private int animation$a3tid;
    private acteve.symbolic.integer.Expression statusBarHeight$sym;
    private int statusBarHeight$a3tid;
    private int m$a3tid;
    private static final int $VRc$a3tid;

    protected void <init>(android.content.Context)
    {
        acteve.symbolic.integer.Expression _sym_tmp_20, $r11$sym, $i1$sym, $i0$sym, $r9$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        org.scoutant.blokish.PieceUI r0;
        android.content.Context r1, $r7;
        boolean[][] $r2;
        boolean[] r3;
        android.view.Display r4;
        android.graphics.Paint $r5, $r14;
        android.graphics.Matrix $r6;
        android.content.res.Resources $r8;
        java.lang.Object $r9, $r11;
        android.view.WindowManager $r10;
        android.os.Vibrator $r12;
        android.view.animation.Animation $r13;

        r0 := @this: org.scoutant.blokish.PieceUI;
        r1 := @parameter0: android.content.Context;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(274, 32525, 2);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r2 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_20 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45503, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_20, 45503, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke r0.<android.widget.FrameLayout: void <init>(android.content.Context)>(r1);
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localX$sym> = null;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int localX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 538);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int localX$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(538);
        r0.<org.scoutant.blokish.PieceUI: int localX> = 0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localY$sym> = null;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int localY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 539);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int localY$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(539);
        r0.<org.scoutant.blokish.PieceUI: int localY> = 0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression movable$sym> = null;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int movable$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 468);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int movable$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(468);
        r0.<org.scoutant.blokish.PieceUI: boolean movable> = 1;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression moving$sym> = null;
        _sym_tmp_5 = r0.<org.scoutant.blokish.PieceUI: int moving$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 540);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int moving$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(540);
        r0.<org.scoutant.blokish.PieceUI: boolean moving> = 0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rotating$sym> = null;
        _sym_tmp_6 = r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 541);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(541);
        r0.<org.scoutant.blokish.PieceUI: boolean rotating> = 0;
        $r5 = new android.graphics.Paint;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<android.graphics.Paint: void <init>()>();
        _sym_tmp_7 = r0.<org.scoutant.blokish.PieceUI: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_7, 542);
        _sym_tmp_7 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int paint$a3tid> = _sym_tmp_7;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(542);
        r0.<org.scoutant.blokish.PieceUI: android.graphics.Paint paint> = $r5;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression swipeX$sym> = null;
        _sym_tmp_8 = r0.<org.scoutant.blokish.PieceUI: int swipeX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_8, 543);
        _sym_tmp_8 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int swipeX$a3tid> = _sym_tmp_8;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(543);
        r0.<org.scoutant.blokish.PieceUI: int swipeX> = 0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression angle$sym> = null;
        _sym_tmp_9 = r0.<org.scoutant.blokish.PieceUI: int angle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_9, 544);
        _sym_tmp_9 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int angle$a3tid> = _sym_tmp_9;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(544);
        r0.<org.scoutant.blokish.PieceUI: int angle> = 0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym> = null;
        _sym_tmp_10 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_10, 545);
        _sym_tmp_10 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int radius$a3tid> = _sym_tmp_10;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(545);
        r0.<org.scoutant.blokish.PieceUI: int radius> = 0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rDown$sym> = null;
        _sym_tmp_11 = r0.<org.scoutant.blokish.PieceUI: int rDown$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 546);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int rDown$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(546);
        r0.<org.scoutant.blokish.PieceUI: double rDown> = 0.0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression statusBarHeight$sym> = null;
        _sym_tmp_12 = r0.<org.scoutant.blokish.PieceUI: int statusBarHeight$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_12, 547);
        _sym_tmp_12 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int statusBarHeight$a3tid> = _sym_tmp_12;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(547);
        r0.<org.scoutant.blokish.PieceUI: int statusBarHeight> = -1;
        $r6 = new android.graphics.Matrix;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<android.graphics.Matrix: void <init>()>();
        _sym_tmp_13 = r0.<org.scoutant.blokish.PieceUI: int m$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_13, 548);
        _sym_tmp_13 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int m$a3tid> = _sym_tmp_13;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(548);
        r0.<org.scoutant.blokish.PieceUI: android.graphics.Matrix m> = $r6;
        _sym_tmp_14 = r0.<org.scoutant.blokish.PieceUI: int context$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_14, 549);
        _sym_tmp_14 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int context$a3tid> = _sym_tmp_14;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(549);
        r0.<org.scoutant.blokish.PieceUI: android.content.Context context> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1434, null, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void setWillNotDraw(boolean)>(0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6416, null, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void setOnLongClickListener(android.view.View$OnLongClickListener)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6425, null, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void setOnTouchListener(android.view.View$OnTouchListener)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8525, null);
        $r7 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1196, null);
        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();
        _sym_tmp_15 = r0.<org.scoutant.blokish.PieceUI: int resources$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_15, 550);
        _sym_tmp_15 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int resources$a3tid> = _sym_tmp_15;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(550);
        r0.<org.scoutant.blokish.PieceUI: android.content.res.Resources resources> = $r8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(102, null, null);
        $r9 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");
        $r9$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(102);
        $r10 = (android.view.WindowManager) $r9;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6534, null);
        r4 = interfaceinvoke $r10.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1376, null);
        $i0 = virtualinvoke r4.<android.view.Display: int getWidth()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1376);
        $i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 20);
        $i1 = $i0 / 20;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym> = $i1$sym;
        _sym_tmp_16 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_16, 551);
        _sym_tmp_16 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int size$a3tid> = _sym_tmp_16;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(551);
        r0.<org.scoutant.blokish.PieceUI: int size> = $i1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(102, null, null);
        $r11 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");
        $r11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(102);
        $r12 = (android.os.Vibrator) $r11;
        _sym_tmp_17 = r0.<org.scoutant.blokish.PieceUI: int vibrator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_17, 552);
        _sym_tmp_17 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int vibrator$a3tid> = _sym_tmp_17;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(552);
        r0.<org.scoutant.blokish.PieceUI: android.os.Vibrator vibrator> = $r12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6767, null, null);
        $r13 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>(r1, 2130968576);
        _sym_tmp_18 = r0.<org.scoutant.blokish.PieceUI: int animation$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_18, 553);
        _sym_tmp_18 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int animation$a3tid> = _sym_tmp_18;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(553);
        r0.<org.scoutant.blokish.PieceUI: android.view.animation.Animation animation> = $r13;
        _sym_tmp_19 = r0.<org.scoutant.blokish.PieceUI: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 542);
        $r14 = r0.<org.scoutant.blokish.PieceUI: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2092, null, null);
        virtualinvoke $r14.<android.graphics.Paint: void setColor(int)>(-1717986919);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void <init>(android.content.Context, org.scoutant.blokish.model.Piece)
    {
        acteve.symbolic.integer.Expression _sym_tmp_23, $i16$sym, $i15$sym, $r10$sym, $i14$sym, $i13$sym, $r7$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $b4$sym, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        org.scoutant.blokish.PieceUI r0;
        android.content.Context r1;
        org.scoutant.blokish.model.Piece r2;
        boolean[][] $r3;
        boolean[] r4;
        byte $b4;
        android.content.res.Resources $r6, $r9;
        int[] $r7, $r10;
        android.graphics.drawable.Drawable $r8, $r11;

        r0 := @this: org.scoutant.blokish.PieceUI;
        r1 := @parameter0: android.content.Context;
        r2 := @parameter1: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21796, 32526, 3);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r3 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_23 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_23, 45504, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_23, 45504, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 1);
        r4 = $r3[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: void <init>(android.content.Context)>(r1);
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 464);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int piece$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(464);
        r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece> = r2;
        $i0$sym = r2.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_3 = r2.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 533);
        $i0 = r2.<org.scoutant.blokish.model.Piece: int size>;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym> = $i0$sym;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 554);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(554);
        r0.<org.scoutant.blokish.PieceUI: int footprint> = $i0;
        $i1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 554);
        $i1 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(892, $i1$sym, null);
        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 3);
        $i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(892);
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression df$sym> = $i2$sym;
        _sym_tmp_6 = r0.<org.scoutant.blokish.PieceUI: int df$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 555);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int df$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(555);
        r0.<org.scoutant.blokish.PieceUI: int df> = $i2;
        $i3$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 554);
        $i3 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_23 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 2);
        if $i3 <= 2 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_23, 45505, 0);
        $b4$sym = null;
        $b4 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_23, 45505, 1);
        goto label3;

     label3:
        $b4$sym = null;
        $b4 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;

     label4:
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym> = $b4$sym;
        _sym_tmp_8 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_8, 556);
        _sym_tmp_8 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int oo$a3tid> = _sym_tmp_8;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(556);
        r0.<org.scoutant.blokish.PieceUI: int oo> = $b4;
        $i5$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 554);
        $i5 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 3);
        r4[3] = 1;
        _sym_tmp_23 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 5);
        if $i5 != 5 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_23, 45506, 0);
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym> = null;
        _sym_tmp_10 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_10, 556);
        _sym_tmp_10 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int oo$a3tid> = _sym_tmp_10;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(556);
        r0.<org.scoutant.blokish.PieceUI: int oo> = 2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 4);
        r4[4] = 1;
        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_23, 45506, 1);
        goto label6;

     label6:
        $i6$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_11 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 551);
        $i6 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i6$sym, 4, $i6);
        $i7 = 4 * $i6;
        $i8$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_12 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 554);
        $i8 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        $i9$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_13 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 551);
        $i9 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, $i9$sym, $i8, $i9);
        $i10 = $i8 * $i9;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, null, $i10, 2);
        $i11 = $i10 / 2;
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, $i11$sym, $i7, $i11);
        $i12 = $i7 + $i11;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym> = $i12$sym;
        _sym_tmp_14 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_14, 545);
        _sym_tmp_14 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int radius$a3tid> = _sym_tmp_14;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(545);
        r0.<org.scoutant.blokish.PieceUI: int radius> = $i12;
        _sym_tmp_15 = r0.<org.scoutant.blokish.PieceUI: int resources$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 550);
        $r6 = r0.<org.scoutant.blokish.PieceUI: android.content.res.Resources resources>;
        $r7$sym = <org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression icons$sym>;
        _sym_tmp_16 = <org.scoutant.blokish.PieceUI: int icons$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 557);
        $r7 = <org.scoutant.blokish.PieceUI: int[] icons>;
        $i13$sym = r2.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_17 = r2.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 470);
        $i13 = r2.<org.scoutant.blokish.model.Piece: int color>;
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r7$sym, $i13$sym, $r7, $i13);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r7, $i13);
        $i14 = $r7[$i13];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1293, null, $i14$sym);
        $r8 = virtualinvoke $r6.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i14);
        _sym_tmp_18 = r0.<org.scoutant.blokish.PieceUI: int square$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_18, 558);
        _sym_tmp_18 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int square$a3tid> = _sym_tmp_18;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(558);
        r0.<org.scoutant.blokish.PieceUI: android.graphics.drawable.Drawable square> = $r8;
        _sym_tmp_19 = r0.<org.scoutant.blokish.PieceUI: int resources$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 550);
        $r9 = r0.<org.scoutant.blokish.PieceUI: android.content.res.Resources resources>;
        $r10$sym = <org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression icons_bold$sym>;
        _sym_tmp_20 = <org.scoutant.blokish.PieceUI: int icons_bold$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 559);
        $r10 = <org.scoutant.blokish.PieceUI: int[] icons_bold>;
        $i15$sym = r2.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_21 = r2.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 470);
        $i15 = r2.<org.scoutant.blokish.model.Piece: int color>;
        $i16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r10$sym, $i15$sym, $r10, $i15);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r10, $i15);
        $i16 = $r10[$i15];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1293, null, $i16$sym);
        $r11 = virtualinvoke $r9.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i16);
        _sym_tmp_22 = r0.<org.scoutant.blokish.PieceUI: int square_bold$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_22, 560);
        _sym_tmp_22 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int square_bold$a3tid> = _sym_tmp_22;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(560);
        r0.<org.scoutant.blokish.PieceUI: android.graphics.drawable.Drawable square_bold> = $r11;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21795, null);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: void resetLocalXY()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 5);
        r4[5] = 1;
        return;
    }

    public void <init>(android.content.Context, org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r4$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1;
        org.scoutant.blokish.PieceUI r0;
        android.content.Context r1;
        org.scoutant.blokish.model.Piece r2;
        boolean[][] $r3;
        boolean[] r4;

        r0 := @this: org.scoutant.blokish.PieceUI;
        r1 := @parameter0: android.content.Context;
        r2 := @parameter1: org.scoutant.blokish.model.Piece;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21777, 32527, 5);
        i0$sym = a3targs$symargs[3];
        i1$sym = a3targs$symargs[4];
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r3 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45507, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45507, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 2);
        r4 = $r3[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21796, null, null, null);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: void <init>(android.content.Context,org.scoutant.blokish.model.Piece)>(r1, r2);
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i0$sym> = i0$sym;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int i0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 532);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int i0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(532);
        r0.<org.scoutant.blokish.PieceUI: int i0> = i0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j0$sym> = i1$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int j0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 531);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int j0$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(531);
        r0.<org.scoutant.blokish.PieceUI: int j0> = i1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21758, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void replace()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void setVisibility(int)>(4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        return;
    }

    private void place(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.PieceUI;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21799, 32528, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45508, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45508, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21797, null, i0$sym, i1$sym);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void move(int,int)>(i0, i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21798, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void place()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void place(int, int, boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym, z0$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0, i1;
        org.scoutant.blokish.PieceUI r0;
        boolean z0;
        boolean[][] $r1;
        boolean[] r2;
        android.view.animation.Animation $r3;

        r0 := @this: org.scoutant.blokish.PieceUI;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        z0 := @parameter2: boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21784, 32529, 4);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        z0$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45509, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45509, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21799, null, i0$sym, i1$sym);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: void place(int,int)>(i0, i1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_3 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, null, z0, 0);
        if z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45510, 0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int animation$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 553);
        $r3 = r0.<org.scoutant.blokish.PieceUI: android.view.animation.Animation animation>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2209, null, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void startAnimation(android.view.animation.Animation)>($r3);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45510, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    public void place()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.PieceUI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21798, 32530, 1);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45511, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45511, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 5);
        r2 = $r1[5];
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression movable$sym> = null;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int movable$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 468);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int movable$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(468);
        r0.<org.scoutant.blokish.PieceUI: boolean movable> = 0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void setVisibility(int)>(0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void replace()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.PieceUI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21758, 32531, 1);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45512, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45512, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 6);
        r2 = $r1[6];
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rotating$sym> = null;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 541);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(541);
        r0.<org.scoutant.blokish.PieceUI: boolean rotating> = 0;
        $i0$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i0$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int i0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 532);
        $i0 = r0.<org.scoutant.blokish.PieceUI: int i0>;
        $i1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j0$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int j0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 531);
        $i1 = r0.<org.scoutant.blokish.PieceUI: int j0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21797, null, $i0$sym, $i1$sym);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void move(int,int)>($i0, $i1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void move(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.PieceUI;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21797, 32532, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45513, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45513, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 7);
        r2 = $r1[7];
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i$sym> = i0$sym;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 465);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int i$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(465);
        r0.<org.scoutant.blokish.PieceUI: int i> = i0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym> = i1$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 466);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int j$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(466);
        r0.<org.scoutant.blokish.PieceUI: int j> = i1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21800, null);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: void doLayout()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private void resetLocalXY()
    {
        acteve.symbolic.integer.Expression _sym_tmp_17, $i21$sym, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.PieceUI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21795, 32533, 1);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_17 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_17, 45514, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_17, 45514, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 8);
        r2 = $r1[8];
        $i0$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 551);
        $i0 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i0$sym, 4, $i0);
        $i1 = 4 * $i0;
        $i2$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 554);
        $i2 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        $i3$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 551);
        $i3 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, $i3$sym, $i2, $i3);
        $i4 = $i2 * $i3;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, null, $i4, 2);
        $i5 = $i4 / 2;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, $i5$sym, $i1, $i5);
        $i6 = $i1 + $i5;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localX$sym> = $i6$sym;
        _sym_tmp_5 = r0.<org.scoutant.blokish.PieceUI: int localX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 538);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int localX$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(538);
        r0.<org.scoutant.blokish.PieceUI: int localX> = $i6;
        $i7$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 551);
        $i7 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i7$sym, 4, $i7);
        $i8 = 4 * $i7;
        $i9$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 554);
        $i9 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        $i10$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 551);
        $i10 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, $i10$sym, $i9, $i10);
        $i11 = $i9 * $i10;
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, null, $i11, 2);
        $i12 = $i11 / 2;
        $i13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, $i12$sym, $i8, $i12);
        $i13 = $i8 + $i12;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localY$sym> = $i13$sym;
        _sym_tmp_9 = r0.<org.scoutant.blokish.PieceUI: int localY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_9, 539);
        _sym_tmp_9 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int localY$a3tid> = _sym_tmp_9;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(539);
        r0.<org.scoutant.blokish.PieceUI: int localY> = $i13;
        $i14$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 554);
        $i14 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_17 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, null, $i14, 4);
        if $i14 != 4 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_17, 45515, 0);
        $i15$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localX$sym>;
        _sym_tmp_11 = r0.<org.scoutant.blokish.PieceUI: int localX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 538);
        $i15 = r0.<org.scoutant.blokish.PieceUI: int localX>;
        $i16$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_12 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 551);
        $i16 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i15$sym, $i16$sym, $i15, $i16);
        $i17 = $i15 + $i16;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localX$sym> = $i17$sym;
        _sym_tmp_13 = r0.<org.scoutant.blokish.PieceUI: int localX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_13, 538);
        _sym_tmp_13 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int localX$a3tid> = _sym_tmp_13;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(538);
        r0.<org.scoutant.blokish.PieceUI: int localX> = $i17;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_17, 45515, 1);
        goto label3;

     label3:
        $i18$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localY$sym>;
        _sym_tmp_14 = r0.<org.scoutant.blokish.PieceUI: int localY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 539);
        $i18 = r0.<org.scoutant.blokish.PieceUI: int localY>;
        $i19$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_15 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 551);
        $i19 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i20$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i19$sym, 2, $i19);
        $i20 = 2 * $i19;
        $i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i18$sym, $i20$sym, $i18, $i20);
        $i21 = $i18 + $i20;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localY$sym> = $i21$sym;
        _sym_tmp_16 = r0.<org.scoutant.blokish.PieceUI: int localY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_16, 539);
        _sym_tmp_16 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int localY$a3tid> = _sym_tmp_16;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(539);
        r0.<org.scoutant.blokish.PieceUI: int localY> = $i21;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    public void swipe(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i5$sym, $i4$sym, $i3$sym, $i2$sym, $i1$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2, $i3, $i4, $i5;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.PieceUI;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21789, 32534, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45516, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45516, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];
        $i1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 551);
        $i1 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, null, $i1, 2);
        $i2 = $i1 / 2;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i2$sym, i0, $i2);
        $i3 = i0 + $i2;
        $i4$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 551);
        $i4 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, $i4$sym, $i3, $i4);
        $i5 = $i3 / $i4;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression swipeX$sym> = $i5$sym;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int swipeX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 543);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int swipeX$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(543);
        r0.<org.scoutant.blokish.PieceUI: int swipeX> = $i5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6559, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void bringToFront()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21800, null);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: void doLayout()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private void doLayout()
    {
        acteve.symbolic.integer.Expression _sym_tmp_30, $i53$sym, $i52$sym, $i51$sym, $i50$sym, $i49$sym, $i48$sym, $i47$sym, $i46$sym, $i45$sym, $i44$sym, $i43$sym, $i42$sym, $i41$sym, $i40$sym, $i39$sym, $i38$sym, $i37$sym, $i36$sym, $i35$sym, $i34$sym, $i33$sym, $i32$sym, $i31$sym, $i30$sym, $i29$sym, $i28$sym, $i27$sym, $i26$sym, $i25$sym, $i24$sym, $i23$sym, $i22$sym, $i21$sym, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $z0$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;
        android.widget.FrameLayout$LayoutParams r3, $r4, $r6;
        boolean $z0;

        r0 := @this: org.scoutant.blokish.PieceUI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21800, 32535, 1);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_30 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_30, 45517, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_30, 45517, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 10);
        r2 = $r1[10];
        $i0$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 466);
        $i0 = r0.<org.scoutant.blokish.PieceUI: int j>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_30 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 20);
        if $i0 <= 20 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_30, 45518, 0);
        $r4 = new android.widget.FrameLayout$LayoutParams;
        $i1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression df$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int df$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 555);
        $i1 = r0.<org.scoutant.blokish.PieceUI: int df>;
        $i2$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 551);
        $i2 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, $i2$sym, $i1, $i2);
        $i3 = $i1 * $i2;
        $i4$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression df$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.PieceUI: int df$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 555);
        $i4 = r0.<org.scoutant.blokish.PieceUI: int df>;
        $i5$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 551);
        $i5 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, $i5$sym, $i4, $i5);
        $i6 = $i4 * $i5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(990, null, $i3$sym, $i6$sym, null);
        specialinvoke $r4.<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>($i3, $i6, 48);
        r3 = $r4;
        $i7$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.PieceUI: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 465);
        $i7 = r0.<org.scoutant.blokish.PieceUI: int i>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, null, $i7, 1);
        $i8 = $i7 - 1;
        $i9$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 551);
        $i9 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, $i9$sym, $i8, $i9);
        $i10 = $i8 * $i9;
        r3.<android.widget.FrameLayout$LayoutParams: int leftMargin> = $i10;
        $z0$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression moving$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.PieceUI: int moving$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 540);
        $z0 = r0.<org.scoutant.blokish.PieceUI: boolean moving>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_30 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_30, 45519, 0);
        $i11$sym = null;
        $i11 = r3.<android.widget.FrameLayout$LayoutParams: int leftMargin>;
        $i12$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression swipeX$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.PieceUI: int swipeX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 543);
        $i12 = r0.<org.scoutant.blokish.PieceUI: int swipeX>;
        $i13$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_11 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 551);
        $i13 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i12$sym, $i13$sym, $i12, $i13);
        $i14 = $i12 * $i13;
        $i15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, $i14$sym, $i11, $i14);
        $i15 = $i11 - $i14;
        r3.<android.widget.FrameLayout$LayoutParams: int leftMargin> = $i15;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_30, 45519, 1);
        goto label3;

     label3:
        $i16$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_12 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 466);
        $i16 = r0.<org.scoutant.blokish.PieceUI: int j>;
        $i17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i16$sym, null, $i16, 1);
        $i17 = $i16 - 1;
        $i18$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_13 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 551);
        $i18 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i19$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i17$sym, $i18$sym, $i17, $i18);
        $i19 = $i17 * $i18;
        r3.<android.widget.FrameLayout$LayoutParams: int topMargin> = $i19;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label9;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_30, 45518, 1);
        goto label5;

     label5:
        $r6 = new android.widget.FrameLayout$LayoutParams;
        $i20$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_14 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 545);
        $i20 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i20$sym, 2, $i20);
        $i21 = 2 * $i20;
        $i22$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_15 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 545);
        $i22 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $i23$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i22$sym, 2, $i22);
        $i23 = 2 * $i22;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(990, null, $i21$sym, $i23$sym, null);
        specialinvoke $r6.<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>($i21, $i23, 48);
        r3 = $r6;
        $i24$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_16 = r0.<org.scoutant.blokish.PieceUI: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 465);
        $i24 = r0.<org.scoutant.blokish.PieceUI: int i>;
        $i25$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i24$sym, null, $i24, 4);
        $i25 = $i24 - 4;
        $i26$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i25$sym, null, $i25, 1);
        $i26 = $i25 - 1;
        $i27$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_17 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 551);
        $i27 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i28$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i26$sym, $i27$sym, $i26, $i27);
        $i28 = $i26 * $i27;
        r3.<android.widget.FrameLayout$LayoutParams: int leftMargin> = $i28;
        $i29$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_18 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 466);
        $i29 = r0.<org.scoutant.blokish.PieceUI: int j>;
        $i30$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i29$sym, null, $i29, 4);
        $i30 = $i29 - 4;
        $i31$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i30$sym, null, $i30, 1);
        $i31 = $i30 - 1;
        $i32$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_19 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 551);
        $i32 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i33$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i31$sym, $i32$sym, $i31, $i32);
        $i33 = $i31 * $i32;
        r3.<android.widget.FrameLayout$LayoutParams: int topMargin> = $i33;
        $i34$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_20 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 554);
        $i34 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_30 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i34$sym, null, $i34, 2);
        if $i34 > 2 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_30, 45520, 0);
        $i35$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_21 = r0.<org.scoutant.blokish.PieceUI: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 465);
        $i35 = r0.<org.scoutant.blokish.PieceUI: int i>;
        $i36$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i35$sym, null, $i35, 4);
        $i36 = $i35 - 4;
        $i37$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_22 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 551);
        $i37 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i38$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i36$sym, $i37$sym, $i36, $i37);
        $i38 = $i36 * $i37;
        r3.<android.widget.FrameLayout$LayoutParams: int leftMargin> = $i38;
        $i39$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_23 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 466);
        $i39 = r0.<org.scoutant.blokish.PieceUI: int j>;
        $i40$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i39$sym, null, $i39, 4);
        $i40 = $i39 - 4;
        $i41$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_24 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 551);
        $i41 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i42$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i40$sym, $i41$sym, $i40, $i41);
        $i42 = $i40 * $i41;
        r3.<android.widget.FrameLayout$LayoutParams: int topMargin> = $i42;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_30, 45520, 1);
        goto label7;

     label7:
        $i43$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_25 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 554);
        $i43 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        _sym_tmp_30 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i43$sym, null, $i43, 5);
        if $i43 != 5 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_30, 45521, 0);
        $i44$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_26 = r0.<org.scoutant.blokish.PieceUI: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 465);
        $i44 = r0.<org.scoutant.blokish.PieceUI: int i>;
        $i45$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i44$sym, null, $i44, 4);
        $i45 = $i44 - 4;
        $i46$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i45$sym, null, $i45, 2);
        $i46 = $i45 - 2;
        $i47$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_27 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 551);
        $i47 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i48$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i46$sym, $i47$sym, $i46, $i47);
        $i48 = $i46 * $i47;
        r3.<android.widget.FrameLayout$LayoutParams: int leftMargin> = $i48;
        $i49$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_28 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_28, 466);
        $i49 = r0.<org.scoutant.blokish.PieceUI: int j>;
        $i50$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i49$sym, null, $i49, 4);
        $i50 = $i49 - 4;
        $i51$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i50$sym, null, $i50, 2);
        $i51 = $i50 - 2;
        $i52$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_29 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 551);
        $i52 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i53$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i51$sym, $i52$sym, $i51, $i52);
        $i53 = $i51 * $i52;
        r3.<android.widget.FrameLayout$LayoutParams: int topMargin> = $i53;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_30, 45521, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1369, null, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r3);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        acteve.symbolic.integer.Expression _sym_tmp_40, $i32$sym, $i31$sym, $r20$sym, $z3$sym, $i30$sym, $i29$sym, $i28$sym, $i27$sym, $r15$sym, $z2$sym, $i26$sym, $i25$sym, $f17$sym, $i24$sym, $f16$sym, $i23$sym, $f15$sym, $i22$sym, $i21$sym, $i20$sym, $i19$sym, $f14$sym, $i18$sym, $f13$sym, $i17$sym, $f12$sym, $i16$sym, $f11$sym, $i15$sym, $f10$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $f9$sym, $i10$sym, $f8$sym, $i9$sym, $f7$sym, $i8$sym, $f6$sym, $i7$sym, $f5$sym, $i6$sym, $f4$sym, $i5$sym, $f3$sym, $i4$sym, $i3$sym, $z1$sym, $f2$sym, $i2$sym, $f1$sym, $i1$sym, $f0$sym, $i0$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_39, _sym_tmp_38, _sym_tmp_37, _sym_tmp_36, _sym_tmp_35, _sym_tmp_34, _sym_tmp_33, _sym_tmp_32, _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        org.scoutant.blokish.PieceUI r0;
        android.graphics.Canvas r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Iterator r4, r19;
        org.scoutant.blokish.model.Square r5, r21;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.Matrix $r6, $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        android.graphics.Paint $r8, $r9, $r10, $r11, $r12;
        org.scoutant.blokish.model.Piece $r13, $r17;
        java.util.List $r14, $r18;
        java.lang.Object $r15, $r20;

        r0 := @this: org.scoutant.blokish.PieceUI;
        r1 := @parameter0: android.graphics.Canvas;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1463, 32536, 2);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r2 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_40 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45522, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45522, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 11);
        r3 = $r2[11];
        $z0$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rotating$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 541);
        $z0 = r0.<org.scoutant.blokish.PieceUI: boolean rotating>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_40 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45523, 0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int m$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 548);
        $r6 = r0.<org.scoutant.blokish.PieceUI: android.graphics.Matrix m>;
        $i0$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression angle$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int angle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 544);
        $i0 = r0.<org.scoutant.blokish.PieceUI: int angle>;
        $f0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i0$sym, 6);
        $f0 = (float) $i0;
        $i1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 545);
        $i1 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i1$sym, 6);
        $f1 = (float) $i1;
        $i2$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 545);
        $i2 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i2$sym, 6);
        $f2 = (float) $i2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6868, null, $f0$sym, $f1$sym, $f2$sym);
        virtualinvoke $r6.<android.graphics.Matrix: void setRotate(float,float,float)>($f0, $f1, $f2);
        _sym_tmp_7 = r0.<org.scoutant.blokish.PieceUI: int m$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 548);
        $r7 = r0.<org.scoutant.blokish.PieceUI: android.graphics.Matrix m>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7247, null, null);
        virtualinvoke r1.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r7);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45523, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21800, null);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: void doLayout()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21801, null, null);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: void gotCanvas(android.graphics.Canvas)>(r1);
        $z1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression movable$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.PieceUI: int movable$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 468);
        $z1 = r0.<org.scoutant.blokish.PieceUI: boolean movable>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_40 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45524, 0);
        $i3$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 466);
        $i3 = r0.<org.scoutant.blokish.PieceUI: int j>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_40 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 20);
        if $i3 >= 20 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45525, 0);
        $i4$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 545);
        $i4 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i4$sym, 6);
        $f3 = (float) $i4;
        $i5$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_11 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 545);
        $i5 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i5$sym, 6);
        $f4 = (float) $i5;
        $i6$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_12 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 545);
        $i6 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i6$sym, 6);
        $f5 = (float) $i6;
        _sym_tmp_13 = r0.<org.scoutant.blokish.PieceUI: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 542);
        $r8 = r0.<org.scoutant.blokish.PieceUI: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(17371, null, $f3$sym, $f4$sym, $f5$sym, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f3, $f4, $f5, $r8);
        $i7$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_14 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 545);
        $i7 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i7$sym, 6);
        $f6 = (float) $i7;
        $i8$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_15 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 551);
        $i8 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $f7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i8$sym, 6);
        $f7 = (float) $i8;
        $i9$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_16 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 551);
        $i9 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $f8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i9$sym, 6);
        $f8 = (float) $i9;
        _sym_tmp_17 = r0.<org.scoutant.blokish.PieceUI: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 542);
        $r9 = r0.<org.scoutant.blokish.PieceUI: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(17371, null, $f6$sym, $f7$sym, $f8$sym, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f6, $f7, $f8, $r9);
        $i10$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_18 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 545);
        $i10 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i10$sym, 6);
        $f9 = (float) $i10;
        $i11$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_19 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 545);
        $i11 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i11$sym, 2, $i11);
        $i12 = 2 * $i11;
        $i13$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_20 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 551);
        $i13 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i12$sym, $i13$sym, $i12, $i13);
        $i14 = $i12 - $i13;
        $f10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i14$sym, 6);
        $f10 = (float) $i14;
        $i15$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_21 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 551);
        $i15 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $f11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i15$sym, 6);
        $f11 = (float) $i15;
        _sym_tmp_22 = r0.<org.scoutant.blokish.PieceUI: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 542);
        $r10 = r0.<org.scoutant.blokish.PieceUI: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(17371, null, $f9$sym, $f10$sym, $f11$sym, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f9, $f10, $f11, $r10);
        $i16$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_23 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 551);
        $i16 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $f12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i16$sym, 6);
        $f12 = (float) $i16;
        $i17$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_24 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 545);
        $i17 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i17$sym, 6);
        $f13 = (float) $i17;
        $i18$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_25 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 551);
        $i18 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $f14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i18$sym, 6);
        $f14 = (float) $i18;
        _sym_tmp_26 = r0.<org.scoutant.blokish.PieceUI: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 542);
        $r11 = r0.<org.scoutant.blokish.PieceUI: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(17371, null, $f12$sym, $f13$sym, $f14$sym, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f12, $f13, $f14, $r11);
        $i19$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_27 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 545);
        $i19 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $i20$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i19$sym, 2, $i19);
        $i20 = 2 * $i19;
        $i21$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_28 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_28, 551);
        $i21 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i22$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i20$sym, $i21$sym, $i20, $i21);
        $i22 = $i20 - $i21;
        $f15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i22$sym, 6);
        $f15 = (float) $i22;
        $i23$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_29 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 545);
        $i23 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i23$sym, 6);
        $f16 = (float) $i23;
        $i24$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_30 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 551);
        $i24 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $f17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i24$sym, 6);
        $f17 = (float) $i24;
        _sym_tmp_31 = r0.<org.scoutant.blokish.PieceUI: int paint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_31, 542);
        $r12 = r0.<org.scoutant.blokish.PieceUI: android.graphics.Paint paint>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(17371, null, $f15$sym, $f16$sym, $f17$sym, null);
        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f15, $f16, $f17, $r12);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label7;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45524, 1);
        goto label7;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45525, 1);
        goto label7;

     label7:
        $i25$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_32 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_32, 466);
        $i25 = r0.<org.scoutant.blokish.PieceUI: int j>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        _sym_tmp_40 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i25$sym, null, $i25, 20);
        if $i25 <= 20 goto label11;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45526, 0);
        $i26$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_33 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_33, 554);
        $i26 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        _sym_tmp_40 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i26$sym, null, $i26, 1);
        if $i26 != 1 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45527, 0);
        _sym_tmp_34 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_34, 464);
        $r13 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r14 = virtualinvoke $r13.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;

     label8:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        _sym_tmp_40 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45528, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r15$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Square) $r15;
        $i27$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_35 = r5.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_35, 526);
        $i27 = r5.<org.scoutant.blokish.model.Square: int i>;
        $i28$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i27$sym, null, $i27, 1);
        $i28 = $i27 + 1;
        $i29$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_36 = r5.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_36, 527);
        $i29 = r5.<org.scoutant.blokish.model.Square: int j>;
        $i30$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i29$sym, null, $i29, 1);
        $i30 = $i29 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21803, null, $i28$sym, $i30$sym);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.PieceUI add(int,int)>($i28, $i30);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        goto label8;

        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45528, 1);
        goto label10;

     label10:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;
        goto label16;

        goto label13;

     label11:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45526, 1);
        goto label13;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45527, 1);
        goto label13;

     label13:
        _sym_tmp_37 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_37, 464);
        $r17 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r18 = virtualinvoke $r17.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;

     label14:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z3 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();
        $z3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 13);
        r3[13] = 1;
        _sym_tmp_40 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 == 0 goto label15;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45529, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r20 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();
        $r20$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r21 = (org.scoutant.blokish.model.Square) $r20;
        $i31$sym = r21.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_38 = r21.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_38, 526);
        $i31 = r21.<org.scoutant.blokish.model.Square: int i>;
        $i32$sym = r21.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_39 = r21.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_39, 527);
        $i32 = r21.<org.scoutant.blokish.model.Square: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21803, null, $i31$sym, $i32$sym);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.PieceUI add(int,int)>($i31, $i32);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 14);
        r3[14] = 1;
        goto label14;

        goto label16;

     label15:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_40, 45529, 1);
        goto label16;

     label16:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 15);
        r3[15] = 1;
        return;
    }

    private void gotCanvas(android.graphics.Canvas)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.PieceUI r0;
        android.graphics.Canvas r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.PieceUI;
        r1 := @parameter0: android.graphics.Canvas;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21801, 32537, 2);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r2 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45530, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45530, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 12);
        r3 = $r2[12];
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int canvas$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 561);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int canvas$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(561);
        r0.<org.scoutant.blokish.PieceUI: android.graphics.Canvas canvas> = r1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private org.scoutant.blokish.PieceUI add(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_38, $i72$sym, $i71$sym, $i70$sym, $i69$sym, $i68$sym, $i67$sym, $i66$sym, $i65$sym, $i64$sym, $i63$sym, $i62$sym, $i61$sym, $i60$sym, $i59$sym, $i58$sym, $i57$sym, $i56$sym, $i55$sym, $i54$sym, $i53$sym, $i52$sym, $i51$sym, $i50$sym, $i49$sym, $i48$sym, $i47$sym, $i46$sym, $i45$sym, $i44$sym, $i43$sym, $i42$sym, $i41$sym, $i40$sym, $i39$sym, $i38$sym, $i37$sym, $i36$sym, $i35$sym, $i34$sym, $i33$sym, $i32$sym, $i31$sym, $i30$sym, $i29$sym, $i28$sym, $i27$sym, $i26$sym, $i25$sym, $i24$sym, $i23$sym, $i22$sym, $i21$sym, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_37, _sym_tmp_36, _sym_tmp_35, _sym_tmp_34, _sym_tmp_33, _sym_tmp_32, _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72;
        org.scoutant.blokish.PieceUI r0, $r7;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.GameView r3;
        android.view.ViewParent $r4;
        org.scoutant.blokish.PieceUI[] $r5;
        org.scoutant.blokish.model.Piece $r6;
        android.graphics.drawable.Drawable $r8, $r10, $r12, $r14, $r16;
        android.graphics.Rect $r9, $r13, $r15;
        android.graphics.Canvas $r11, $r17;

        r0 := @this: org.scoutant.blokish.PieceUI;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21803, 32538, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_38 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_38, 45531, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_38, 45531, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 13);
        r2 = $r1[13];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1204, null);
        $r4 = virtualinvoke r0.<org.scoutant.blokish.PieceUI: android.view.ViewParent getParent()>();
        r3 = (org.scoutant.blokish.GameView) $r4;
        _sym_tmp_2 = r3.<org.scoutant.blokish.GameView: int lasts$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 469);
        $r5 = r3.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI[] lasts>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 464);
        $r6 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i2$sym = $r6.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_4 = $r6.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 470);
        $i2 = $r6.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r5, $i2);
        $r7 = $r5[$i2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_38 = null;
        if $r7 != r0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_38, 45532, 0);
        $i3$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 466);
        $i3 = r0.<org.scoutant.blokish.PieceUI: int j>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_38 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 20);
        if $i3 > 20 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_38, 45533, 0);
        _sym_tmp_6 = r0.<org.scoutant.blokish.PieceUI: int square_bold$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 560);
        $r8 = r0.<org.scoutant.blokish.PieceUI: android.graphics.drawable.Drawable square_bold>;
        $r9 = new android.graphics.Rect;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 4);
        $i4 = i0 + 4;
        $i5$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 556);
        $i5 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, $i5$sym, $i4, $i5);
        $i6 = $i4 + $i5;
        $i7$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 551);
        $i7 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i6$sym, $i7$sym, $i6, $i7);
        $i8 = $i6 * $i7;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 4);
        $i9 = i1 + 4;
        $i10$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 556);
        $i10 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, $i10$sym, $i9, $i10);
        $i11 = $i9 + $i10;
        $i12$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 551);
        $i12 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, $i12$sym, $i11, $i12);
        $i13 = $i11 * $i12;
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 4);
        $i14 = i0 + 4;
        $i15$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_11 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 556);
        $i15 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, $i15$sym, $i14, $i15);
        $i16 = $i14 + $i15;
        $i17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i16$sym, null, $i16, 1);
        $i17 = $i16 + 1;
        $i18$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_12 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 551);
        $i18 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i19$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i17$sym, $i18$sym, $i17, $i18);
        $i19 = $i17 * $i18;
        $i20$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i19$sym, null, $i19, 1);
        $i20 = $i19 + 1;
        $i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 4);
        $i21 = i1 + 4;
        $i22$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_13 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 556);
        $i22 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i23$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i21$sym, $i22$sym, $i21, $i22);
        $i23 = $i21 + $i22;
        $i24$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i23$sym, null, $i23, 1);
        $i24 = $i23 + 1;
        $i25$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_14 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 551);
        $i25 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i26$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i24$sym, $i25$sym, $i24, $i25);
        $i26 = $i24 * $i25;
        $i27$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i26$sym, null, $i26, 1);
        $i27 = $i26 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1455, null, $i8$sym, $i13$sym, $i20$sym, $i27$sym);
        specialinvoke $r9.<android.graphics.Rect: void <init>(int,int,int,int)>($i8, $i13, $i20, $i27);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1379, null, null);
        virtualinvoke $r8.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($r9);
        _sym_tmp_15 = r0.<org.scoutant.blokish.PieceUI: int square_bold$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 560);
        $r10 = r0.<org.scoutant.blokish.PieceUI: android.graphics.drawable.Drawable square_bold>;
        _sym_tmp_16 = r0.<org.scoutant.blokish.PieceUI: int canvas$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 561);
        $r11 = r0.<org.scoutant.blokish.PieceUI: android.graphics.Canvas canvas>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1462, null, null);
        virtualinvoke $r10.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r11);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return r0;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_38, 45532, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_38, 45533, 1);
        goto label4;

     label4:
        $i28$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_17 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 466);
        $i28 = r0.<org.scoutant.blokish.PieceUI: int j>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_38 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i28$sym, null, $i28, 20);
        if $i28 > 20 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_38, 45534, 0);
        _sym_tmp_18 = r0.<org.scoutant.blokish.PieceUI: int square$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 558);
        $r12 = r0.<org.scoutant.blokish.PieceUI: android.graphics.drawable.Drawable square>;
        $r13 = new android.graphics.Rect;
        $i29$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 4);
        $i29 = i0 + 4;
        $i30$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_19 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 556);
        $i30 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i31$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i29$sym, $i30$sym, $i29, $i30);
        $i31 = $i29 + $i30;
        $i32$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_20 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 551);
        $i32 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i33$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i31$sym, $i32$sym, $i31, $i32);
        $i33 = $i31 * $i32;
        $i34$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i33$sym, null, $i33, 1);
        $i34 = $i33 + 1;
        $i35$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 4);
        $i35 = i1 + 4;
        $i36$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_21 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 556);
        $i36 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i37$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i35$sym, $i36$sym, $i35, $i36);
        $i37 = $i35 + $i36;
        $i38$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_22 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 551);
        $i38 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i39$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i37$sym, $i38$sym, $i37, $i38);
        $i39 = $i37 * $i38;
        $i40$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i39$sym, null, $i39, 1);
        $i40 = $i39 + 1;
        $i41$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 4);
        $i41 = i0 + 4;
        $i42$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_23 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 556);
        $i42 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i43$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i41$sym, $i42$sym, $i41, $i42);
        $i43 = $i41 + $i42;
        $i44$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i43$sym, null, $i43, 1);
        $i44 = $i43 + 1;
        $i45$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_24 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 551);
        $i45 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i46$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i44$sym, $i45$sym, $i44, $i45);
        $i46 = $i44 * $i45;
        $i47$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 4);
        $i47 = i1 + 4;
        $i48$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_25 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 556);
        $i48 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i49$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i47$sym, $i48$sym, $i47, $i48);
        $i49 = $i47 + $i48;
        $i50$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i49$sym, null, $i49, 1);
        $i50 = $i49 + 1;
        $i51$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_26 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 551);
        $i51 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i52$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i50$sym, $i51$sym, $i50, $i51);
        $i52 = $i50 * $i51;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1455, null, $i34$sym, $i40$sym, $i46$sym, $i52$sym);
        specialinvoke $r13.<android.graphics.Rect: void <init>(int,int,int,int)>($i34, $i40, $i46, $i52);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1379, null, null);
        virtualinvoke $r12.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($r13);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        goto label7;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_38, 45534, 1);
        goto label6;

     label6:
        _sym_tmp_27 = r0.<org.scoutant.blokish.PieceUI: int square$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 558);
        $r14 = r0.<org.scoutant.blokish.PieceUI: android.graphics.drawable.Drawable square>;
        $r15 = new android.graphics.Rect;
        $i53$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_28 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_28, 556);
        $i53 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i54$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i53$sym, i0, $i53);
        $i54 = i0 + $i53;
        $i55$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_29 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 551);
        $i55 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i56$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i54$sym, $i55$sym, $i54, $i55);
        $i56 = $i54 * $i55;
        $i57$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i56$sym, null, $i56, 1);
        $i57 = $i56 + 1;
        $i58$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_30 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 556);
        $i58 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i59$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i58$sym, i1, $i58);
        $i59 = i1 + $i58;
        $i60$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_31 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_31, 551);
        $i60 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i61$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i59$sym, $i60$sym, $i59, $i60);
        $i61 = $i59 * $i60;
        $i62$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i61$sym, null, $i61, 1);
        $i62 = $i61 + 1;
        $i63$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_32 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_32, 556);
        $i63 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i64$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i63$sym, i0, $i63);
        $i64 = i0 + $i63;
        $i65$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i64$sym, null, $i64, 1);
        $i65 = $i64 + 1;
        $i66$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_33 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_33, 551);
        $i66 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i67$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i65$sym, $i66$sym, $i65, $i66);
        $i67 = $i65 * $i66;
        $i68$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression oo$sym>;
        _sym_tmp_34 = r0.<org.scoutant.blokish.PieceUI: int oo$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_34, 556);
        $i68 = r0.<org.scoutant.blokish.PieceUI: int oo>;
        $i69$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i68$sym, i1, $i68);
        $i69 = i1 + $i68;
        $i70$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i69$sym, null, $i69, 1);
        $i70 = $i69 + 1;
        $i71$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_35 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_35, 551);
        $i71 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i72$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i70$sym, $i71$sym, $i70, $i71);
        $i72 = $i70 * $i71;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1455, null, $i57$sym, $i62$sym, $i67$sym, $i72$sym);
        specialinvoke $r15.<android.graphics.Rect: void <init>(int,int,int,int)>($i57, $i62, $i67, $i72);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1379, null, null);
        virtualinvoke $r14.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>($r15);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;

     label7:
        _sym_tmp_36 = r0.<org.scoutant.blokish.PieceUI: int square$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_36, 558);
        $r16 = r0.<org.scoutant.blokish.PieceUI: android.graphics.drawable.Drawable square>;
        _sym_tmp_37 = r0.<org.scoutant.blokish.PieceUI: int canvas$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_37, 561);
        $r17 = r0.<org.scoutant.blokish.PieceUI: android.graphics.Canvas canvas>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1462, null, null);
        virtualinvoke $r16.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r17);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        return r0;
    }

    public boolean onLongClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, $z2$sym, $z1$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.PieceUI r0, $r6;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.GameView r4;
        boolean $z0, $z1, $z2;
        android.view.ViewParent $r5;

        r0 := @this: org.scoutant.blokish.PieceUI;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(6419, 32539, 2);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r2 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45535, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45535, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 14);
        r3 = $r2[14];
        $z0$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression movable$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int movable$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 468);
        $z0 = r0.<org.scoutant.blokish.PieceUI: boolean movable>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_7 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45536, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6419, null);
        return 0;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45536, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1204, null);
        $r5 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();
        r4 = (org.scoutant.blokish.GameView) $r5;
        _sym_tmp_3 = r4.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 463);
        $r6 = r4.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_7 = null;
        if $r6 != null goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45537, 0);
        _sym_tmp_4 = r4.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 463);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r4.<org.scoutant.blokish.GameView: int selected$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(463);
        r4.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected> = r0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6419, null);
        return 1;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45537, 1);
        goto label5;

     label5:
        $z1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression moving$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.PieceUI: int moving$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 540);
        $z1 = r0.<org.scoutant.blokish.PieceUI: boolean moving>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_7 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 != 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45538, 0);
        $z2$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rotating$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 541);
        $z2 = r0.<org.scoutant.blokish.PieceUI: boolean rotating>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        _sym_tmp_7 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 != 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45539, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21804, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void flip()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        goto label8;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45538, 1);
        goto label8;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45539, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6419, null);
        return 0;
    }

    public boolean onTouch(android.view.View, android.view.MotionEvent)
    {
        acteve.symbolic.integer.Expression _sym_tmp_71, z7$sym, $z6$sym, $z5$sym, $z4$sym, $i50$sym, $i49$sym, $i48$sym, $i47$sym, $i46$sym, i45$sym, $i44$sym, $i43$sym, $i42$sym, $i41$sym, $i40$sym, $i39$sym, $i38$sym, $f23$sym, i37$sym, $i36$sym, $i35$sym, $i34$sym, $i33$sym, $i32$sym, $f22$sym, i31$sym, $i30$sym, $i29$sym, $i28$sym, $i27$sym, $i26$sym, $i25$sym, $i24$sym, $d9$sym, $d8$sym, d7$sym, $d6$sym, $d5$sym, $f21$sym, $f20$sym, $f19$sym, $i23$sym, $d4$sym, $f18$sym, $f17$sym, $i22$sym, $f16$sym, $z3$sym, $d3$sym, $d2$sym, $d1$sym, $f15$sym, $f14$sym, $f13$sym, $i21$sym, $d0$sym, $f12$sym, $f11$sym, $i20$sym, $f10$sym, $z2$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $f9$sym, $i12$sym, $f8$sym, $i11$sym, $i10$sym, $z1$sym, $f7$sym, $f6$sym, $f5$sym, $f4$sym, $f3$sym, $f2$sym, $f1$sym, $f0$sym, $i9$sym, $i8$sym, $z0$sym, $i6$sym, $i5$sym, $i4$sym, i3$sym, i2$sym, i1$sym, i0$sym, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_70, _sym_tmp_69, _sym_tmp_68, _sym_tmp_67, _sym_tmp_66, _sym_tmp_65, _sym_tmp_64, _sym_tmp_63, _sym_tmp_62, _sym_tmp_61, _sym_tmp_60, _sym_tmp_59, _sym_tmp_58, _sym_tmp_57, _sym_tmp_56, _sym_tmp_55, _sym_tmp_54, _sym_tmp_53, _sym_tmp_52, _sym_tmp_51, _sym_tmp_50, _sym_tmp_49, _sym_tmp_48, _sym_tmp_47, _sym_tmp_46, _sym_tmp_45, _sym_tmp_44, _sym_tmp_43, _sym_tmp_42, _sym_tmp_41, _sym_tmp_40, _sym_tmp_39, _sym_tmp_38, _sym_tmp_37, _sym_tmp_36, _sym_tmp_35, _sym_tmp_34, _sym_tmp_33, _sym_tmp_32, _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, $i32, $i33, $i34, $i35, $i36, i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, i45, $i46, $i47, $i48, $i49, $i50;
        org.scoutant.blokish.PieceUI r0, $r17, $r22, $r25;
        android.view.View r1, $r10;
        android.view.MotionEvent r2;
        boolean[][] $r3;
        boolean[] r4;
        android.graphics.Rect r5, $r6;
        android.content.Context $r7, $r18;
        android.app.Activity $r8;
        android.view.Window $r9;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14;
        android.view.ViewParent $r15;
        org.scoutant.blokish.GameView r16;
        android.content.SharedPreferences $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        org.scoutant.blokish.model.Piece $r20, $r31;
        org.scoutant.blokish.UI $r21;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;
        java.lang.Float $r23, $r24;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, d7, $d8, $d9;
        java.lang.Double $r26;
        org.scoutant.blokish.ButtonsView $r27, $r28, $r29, $r32;
        org.scoutant.blokish.model.Game $r30;
        android.os.Vibrator $r33, $r34;

        r0 := @this: org.scoutant.blokish.PieceUI;
        r1 := @parameter0: android.view.View;
        r2 := @parameter1: android.view.MotionEvent;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(6521, 32540, 3);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r3 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_71 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45540, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45540, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 15);
        r4 = $r3[15];
        $i4$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression statusBarHeight$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int statusBarHeight$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 547);
        $i4 = r0.<org.scoutant.blokish.PieceUI: int statusBarHeight>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, null, $i4, 0);
        if $i4 >= 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45541, 0);
        $r6 = new android.graphics.Rect;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<android.graphics.Rect: void <init>()>();
        r5 = $r6;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int context$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 549);
        $r7 = r0.<org.scoutant.blokish.PieceUI: android.content.Context context>;
        $r8 = (android.app.Activity) $r7;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1519, null);
        $r9 = virtualinvoke $r8.<android.app.Activity: android.view.Window getWindow()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1521, null);
        $r10 = virtualinvoke $r9.<android.view.Window: android.view.View getDecorView()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6535, null, null);
        virtualinvoke $r10.<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>(r5);
        $i5$sym = null;
        $i5 = r5.<android.graphics.Rect: int top>;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression statusBarHeight$sym> = $i5$sym;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int statusBarHeight$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 547);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int statusBarHeight$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(547);
        r0.<org.scoutant.blokish.PieceUI: int statusBarHeight> = $i5;
        $r11 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("status bar height is : ");
        $i6$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression statusBarHeight$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.PieceUI: int statusBarHeight$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 547);
        $i6 = r0.<org.scoutant.blokish.PieceUI: int statusBarHeight>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i6$sym);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1536, null, null);
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("activity", $r14);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45541, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1204, null);
        $r15 = virtualinvoke r0.<org.scoutant.blokish.PieceUI: android.view.ViewParent getParent()>();
        r16 = (org.scoutant.blokish.GameView) $r15;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1469, null);
        i0 = virtualinvoke r2.<android.view.MotionEvent: int getAction()>();
        i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1469);
        _sym_tmp_6 = r16.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 463);
        $r17 = r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;
        _sym_tmp_71 = null;
        if $r17 != null goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45542, 0);
        _sym_tmp_7 = r0.<org.scoutant.blokish.PieceUI: int context$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 549);
        $r18 = r0.<org.scoutant.blokish.PieceUI: android.content.Context context>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(4842, null);
        $r19 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r18);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        $z0 = interfaceinvoke $r19.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("ai", 1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 3);
        r4[3] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45543, 0);
        _sym_tmp_8 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 464);
        $r20 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i8$sym = $r20.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_9 = $r20.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 470);
        $i8 = $r20.<org.scoutant.blokish.model.Piece: int color>;
        _sym_tmp_10 = r16.<org.scoutant.blokish.GameView: int ui$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 475);
        $r21 = r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.UI ui>;
        $i9$sym = $r21.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_11 = $r21.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 476);
        $i9 = $r21.<org.scoutant.blokish.UI: int turn>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 4);
        r4[4] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, $i9$sym, $i8, $i9);
        if $i8 == $i9 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45544, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21779, null, null);
        virtualinvoke r16.<org.scoutant.blokish.GameView: void doTouch(android.view.MotionEvent)>(r2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 5);
        r4[5] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6521, null);
        return 0;

        goto label7;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45542, 1);
        goto label7;

        goto label7;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45543, 1);
        goto label7;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45544, 1);
        goto label7;

     label7:
        _sym_tmp_12 = r16.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 463);
        $r22 = r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 6);
        r4[6] = 1;
        _sym_tmp_71 = null;
        if $r22 != null goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45545, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 7);
        r4[7] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 != 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45546, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(7349, null);
        $f0 = virtualinvoke r2.<android.view.MotionEvent: float getRawX()>();
        $f0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(7349);
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rawX$sym> = $f0$sym;
        _sym_tmp_13 = r0.<org.scoutant.blokish.PieceUI: int rawX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_13, 562);
        _sym_tmp_13 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int rawX$a3tid> = _sym_tmp_13;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(562);
        r0.<org.scoutant.blokish.PieceUI: float rawX> = $f0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(7350, null);
        $f1 = virtualinvoke r2.<android.view.MotionEvent: float getRawY()>();
        $f1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(7350);
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rawY$sym> = $f1$sym;
        _sym_tmp_14 = r0.<org.scoutant.blokish.PieceUI: int rawY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_14, 563);
        _sym_tmp_14 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int rawY$a3tid> = _sym_tmp_14;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(563);
        r0.<org.scoutant.blokish.PieceUI: float rawY> = $f1;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rotating$sym> = null;
        _sym_tmp_15 = r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_15, 541);
        _sym_tmp_15 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid> = _sym_tmp_15;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(541);
        r0.<org.scoutant.blokish.PieceUI: boolean rotating> = 0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21779, null, null);
        virtualinvoke r16.<org.scoutant.blokish.GameView: void doTouch(android.view.MotionEvent)>(r2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 8);
        r4[8] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6521, null);
        return 0;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45546, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(7349, null);
        $f2 = virtualinvoke r2.<android.view.MotionEvent: float getRawX()>();
        $f2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(7349);
        $f3$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rawX$sym>;
        _sym_tmp_16 = r0.<org.scoutant.blokish.PieceUI: int rawX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 562);
        $f3 = r0.<org.scoutant.blokish.PieceUI: float rawX>;
        $f4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f2$sym, $f3$sym, $f2, $f3);
        $f4 = $f2 - $f3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8332, $f4$sym);
        $r23 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        i1 = virtualinvoke $r23.<java.lang.Float: int intValue()>();
        i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(7350, null);
        $f5 = virtualinvoke r2.<android.view.MotionEvent: float getRawY()>();
        $f5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(7350);
        $f6$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rawY$sym>;
        _sym_tmp_17 = r0.<org.scoutant.blokish.PieceUI: int rawY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 563);
        $f6 = r0.<org.scoutant.blokish.PieceUI: float rawY>;
        $f7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f5$sym, $f6$sym, $f5, $f6);
        $f7 = $f5 - $f6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8332, $f7$sym);
        $r24 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f7);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        i2 = virtualinvoke $r24.<java.lang.Float: int intValue()>();
        i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        $z1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression movable$sym>;
        _sym_tmp_18 = r0.<org.scoutant.blokish.PieceUI: int movable$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 468);
        $z1 = r0.<org.scoutant.blokish.PieceUI: boolean movable>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 9);
        r4[9] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45547, 0);
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>(i2$sym);
        $i10 = neg i2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2121, i1$sym);
        $i11 = staticinvoke <java.lang.Math: int abs(int)>(i1);
        $i11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2121);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 10);
        r4[10] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, $i11$sym, $i10, $i11);
        if $i10 >= $i11 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45548, 0);
        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45547, 1);
        goto label11;

     label11:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21779, null, null);
        virtualinvoke r16.<org.scoutant.blokish.GameView: void doTouch(android.view.MotionEvent)>(r2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 11);
        r4[11] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6521, null);
        return 0;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45548, 1);
        goto label13;

     label13:
        _sym_tmp_19 = r16.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_19, 463);
        _sym_tmp_19 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r16.<org.scoutant.blokish.GameView: int selected$a3tid> = _sym_tmp_19;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(463);
        r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected> = r0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression moving$sym> = null;
        _sym_tmp_20 = r0.<org.scoutant.blokish.PieceUI: int moving$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_20, 540);
        _sym_tmp_20 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int moving$a3tid> = _sym_tmp_20;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(540);
        r0.<org.scoutant.blokish.PieceUI: boolean moving> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 12);
        r4[12] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6521, null);
        return 0;

        goto label15;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45545, 1);
        goto label15;

     label15:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 13);
        r4[13] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 != 0 goto label19;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45549, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2130, null);
        $f8 = virtualinvoke r2.<android.view.MotionEvent: float getX()>();
        $f8$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2130);
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f8$sym, 4);
        $i12 = (int) $f8;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localX$sym> = $i12$sym;
        _sym_tmp_21 = r0.<org.scoutant.blokish.PieceUI: int localX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_21, 538);
        _sym_tmp_21 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int localX$a3tid> = _sym_tmp_21;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(538);
        r0.<org.scoutant.blokish.PieceUI: int localX> = $i12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2131, null);
        $f9 = virtualinvoke r2.<android.view.MotionEvent: float getY()>();
        $f9$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2131);
        $i13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f9$sym, 4);
        $i13 = (int) $f9;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localY$sym> = $i13$sym;
        _sym_tmp_22 = r0.<org.scoutant.blokish.PieceUI: int localY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_22, 539);
        _sym_tmp_22 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int localY$a3tid> = _sym_tmp_22;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(539);
        r0.<org.scoutant.blokish.PieceUI: int localY> = $i13;
        $i14$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localX$sym>;
        _sym_tmp_23 = r0.<org.scoutant.blokish.PieceUI: int localX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 538);
        $i14 = r0.<org.scoutant.blokish.PieceUI: int localX>;
        $i15$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_24 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 551);
        $i15 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, $i15$sym, $i14, $i15);
        $i16 = $i14 / $i15;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression downX$sym> = $i16$sym;
        _sym_tmp_25 = r0.<org.scoutant.blokish.PieceUI: int downX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_25, 564);
        _sym_tmp_25 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int downX$a3tid> = _sym_tmp_25;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(564);
        r0.<org.scoutant.blokish.PieceUI: int downX> = $i16;
        $i17$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localY$sym>;
        _sym_tmp_26 = r0.<org.scoutant.blokish.PieceUI: int localY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 539);
        $i17 = r0.<org.scoutant.blokish.PieceUI: int localY>;
        $i18$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_27 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 551);
        $i18 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i19$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i17$sym, $i18$sym, $i17, $i18);
        $i19 = $i17 / $i18;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression downY$sym> = $i19$sym;
        _sym_tmp_28 = r0.<org.scoutant.blokish.PieceUI: int downY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_28, 565);
        _sym_tmp_28 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int downY$a3tid> = _sym_tmp_28;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(565);
        r0.<org.scoutant.blokish.PieceUI: int downY> = $i19;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21805, null);
        $z2 = specialinvoke r0.<org.scoutant.blokish.PieceUI: boolean willRotate()>();
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21805);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 14);
        r4[14] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label16;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45550, 0);
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rotating$sym> = null;
        _sym_tmp_29 = r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_29, 541);
        _sym_tmp_29 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid> = _sym_tmp_29;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(541);
        r0.<org.scoutant.blokish.PieceUI: boolean rotating> = 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2130, null);
        $f10 = virtualinvoke r2.<android.view.MotionEvent: float getX()>();
        $f10$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2130);
        $i20$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_30 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 545);
        $i20 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i20$sym, 6);
        $f11 = (float) $i20;
        $f12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f10$sym, $f11$sym, $f10, $f11);
        $f12 = $f10 - $f11;
        $d0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f12$sym, 7);
        $d0 = (double) $f12;
        $i21$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_31 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_31, 545);
        $i21 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i21$sym, 6);
        $f13 = (float) $i21;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2131, null);
        $f14 = virtualinvoke r2.<android.view.MotionEvent: float getY()>();
        $f14$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2131);
        $f15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f13$sym, $f14$sym, $f13, $f14);
        $f15 = $f13 - $f14;
        $d1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f15$sym, 7);
        $d1 = (double) $f15;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2148, $d0$sym, $d1$sym);
        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);
        $d2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2148);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2149, $d2$sym);
        $d3 = staticinvoke <java.lang.Math: double toDegrees(double)>($d2);
        $d3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2149);
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rDown$sym> = $d3$sym;
        _sym_tmp_32 = r0.<org.scoutant.blokish.PieceUI: int rDown$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_32, 546);
        _sym_tmp_32 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int rDown$a3tid> = _sym_tmp_32;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(546);
        r0.<org.scoutant.blokish.PieceUI: double rDown> = $d3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 15);
        r4[15] = 1;
        goto label18;

        goto label17;

     label16:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45550, 1);
        goto label17;

     label17:
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rotating$sym> = null;
        _sym_tmp_33 = r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_33, 541);
        _sym_tmp_33 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid> = _sym_tmp_33;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(541);
        r0.<org.scoutant.blokish.PieceUI: boolean rotating> = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 16);
        r4[16] = 1;

     label18:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6559, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void bringToFront()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 17);
        r4[17] = 1;
        goto label20;

     label19:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45549, 1);
        goto label20;

     label20:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 18, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 18);
        r4[18] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 2);
        if i0 != 2 goto label35;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45551, 0);
        _sym_tmp_34 = r16.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_34, 463);
        $r25 = r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 19, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 19);
        r4[19] = 1;
        _sym_tmp_71 = null;
        if $r25 != r0 goto label36;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45552, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6559, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void bringToFront()>();
        $z3$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rotating$sym>;
        _sym_tmp_35 = r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_35, 541);
        $z3 = r0.<org.scoutant.blokish.PieceUI: boolean rotating>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 20, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 20);
        r4[20] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 == 0 goto label27;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45553, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2130, null);
        $f16 = virtualinvoke r2.<android.view.MotionEvent: float getX()>();
        $f16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2130);
        $i22$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_36 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_36, 545);
        $i22 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i22$sym, 6);
        $f17 = (float) $i22;
        $f18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f16$sym, $f17$sym, $f16, $f17);
        $f18 = $f16 - $f17;
        $d4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f18$sym, 7);
        $d4 = (double) $f18;
        $i23$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_37 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_37, 545);
        $i23 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $f19$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($i23$sym, 6);
        $f19 = (float) $i23;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2131, null);
        $f20 = virtualinvoke r2.<android.view.MotionEvent: float getY()>();
        $f20$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2131);
        $f21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,float,float)>($f19$sym, $f20$sym, $f19, $f20);
        $f21 = $f19 - $f20;
        $d5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f21$sym, 7);
        $d5 = (double) $f21;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2148, $d4$sym, $d5$sym);
        $d6 = staticinvoke <java.lang.Math: double atan2(double,double)>($d4, $d5);
        $d6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2148);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2149, $d6$sym);
        d7 = staticinvoke <java.lang.Math: double toDegrees(double)>($d6);
        d7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2149);
        $d8$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rDown$sym>;
        _sym_tmp_38 = r0.<org.scoutant.blokish.PieceUI: int rDown$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_38, 546);
        $d8 = r0.<org.scoutant.blokish.PieceUI: double rDown>;
        $d9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,double,double)>(d7$sym, $d8$sym, d7, $d8);
        $d9 = d7 - $d8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2943, $d9$sym);
        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        i3 = virtualinvoke $r26.<java.lang.Double: int intValue()>();
        i3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 21, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 21);
        r4[21] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 180);
        if i3 <= 180 goto label21;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45554, 0);
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, -360);
        i3 = i3 + -360;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 22, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 22);
        r4[22] = 1;
        goto label22;

     label21:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45554, 1);
        goto label22;

     label22:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 23, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 23);
        r4[23] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, -180);
        if i3 >= -180 goto label23;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45555, 0);
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 360);
        i3 = i3 + 360;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 24, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 24);
        r4[24] = 1;
        goto label24;

     label23:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45555, 1);
        goto label24;

     label24:
        $i24$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression angle$sym>;
        _sym_tmp_39 = r0.<org.scoutant.blokish.PieceUI: int angle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_39, 544);
        $i24 = r0.<org.scoutant.blokish.PieceUI: int angle>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 25, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 25);
        r4[25] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i24$sym, i3$sym, $i24, i3);
        if $i24 != i3 goto label25;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45556, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 26, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 26);
        r4[26] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6521, null);
        return 0;

        goto label26;

     label25:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45556, 1);
        goto label26;

     label26:
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression angle$sym> = i3$sym;
        _sym_tmp_40 = r0.<org.scoutant.blokish.PieceUI: int angle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_40, 544);
        _sym_tmp_40 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int angle$a3tid> = _sym_tmp_40;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(544);
        r0.<org.scoutant.blokish.PieceUI: int angle> = i3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 27, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 27);
        r4[27] = 1;
        goto label37;

        goto label28;

     label27:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45553, 1);
        goto label28;

     label28:
        $i25$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression footprint$sym>;
        _sym_tmp_41 = r0.<org.scoutant.blokish.PieceUI: int footprint$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_41, 554);
        $i25 = r0.<org.scoutant.blokish.PieceUI: int footprint>;
        $i26$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i25$sym, null, $i25, 2);
        $i26 = $i25 % 2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 28, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 28);
        r4[28] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i26$sym, null, $i26, 0);
        if $i26 != 0 goto label29;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45557, 0);
        $i27$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_42 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_42, 545);
        $i27 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $i28$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_43 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_43, 551);
        $i28 = r0.<org.scoutant.blokish.PieceUI: int size>;
        $i29$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i28$sym, null, $i28, 2);
        $i29 = $i28 / 2;
        $i30$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i27$sym, $i29$sym, $i27, $i29);
        $i30 = $i27 - $i29;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 29, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 29);
        r4[29] = 1;
        goto label31;

        goto label30;

     label29:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45557, 1);
        goto label30;

     label30:
        $i30$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_44 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_44, 545);
        $i30 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 30, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 30);
        r4[30] = 1;

     label31:
        i31$sym = $i30$sym;
        i31 = $i30;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(7349, null);
        $f22 = virtualinvoke r2.<android.view.MotionEvent: float getRawX()>();
        $f22$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(7349);
        $i32$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f22$sym, 4);
        $i32 = (int) $f22;
        $i33$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localX$sym>;
        _sym_tmp_45 = r0.<org.scoutant.blokish.PieceUI: int localX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_45, 538);
        $i33 = r0.<org.scoutant.blokish.PieceUI: int localX>;
        $i34$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i32$sym, $i33$sym, $i32, $i33);
        $i34 = $i32 - $i33;
        $i35$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i34$sym, i31$sym, $i34, i31);
        $i35 = $i34 + i31;
        $i36$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_46 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_46, 551);
        $i36 = r0.<org.scoutant.blokish.PieceUI: int size>;
        i37$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i35$sym, $i36$sym, $i35, $i36);
        i37 = $i35 / $i36;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(7350, null);
        $f23 = virtualinvoke r2.<android.view.MotionEvent: float getRawY()>();
        $f23$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(7350);
        $i38$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression,int)>($f23$sym, 4);
        $i38 = (int) $f23;
        $i39$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression statusBarHeight$sym>;
        _sym_tmp_47 = r0.<org.scoutant.blokish.PieceUI: int statusBarHeight$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_47, 547);
        $i39 = r0.<org.scoutant.blokish.PieceUI: int statusBarHeight>;
        $i40$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i38$sym, $i39$sym, $i38, $i39);
        $i40 = $i38 - $i39;
        $i41$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression localY$sym>;
        _sym_tmp_48 = r0.<org.scoutant.blokish.PieceUI: int localY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_48, 539);
        $i41 = r0.<org.scoutant.blokish.PieceUI: int localY>;
        $i42$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i40$sym, $i41$sym, $i40, $i41);
        $i42 = $i40 - $i41;
        $i43$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i42$sym, i31$sym, $i42, i31);
        $i43 = $i42 + i31;
        $i44$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_49 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_49, 551);
        $i44 = r0.<org.scoutant.blokish.PieceUI: int size>;
        i45$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i43$sym, $i44$sym, $i43, $i44);
        i45 = $i43 / $i44;
        $i46$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_50 = r0.<org.scoutant.blokish.PieceUI: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_50, 465);
        $i46 = r0.<org.scoutant.blokish.PieceUI: int i>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 31, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 31);
        r4[31] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i46$sym, i37$sym, $i46, i37);
        if $i46 != i37 goto label32;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45558, 0);
        $i47$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_51 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_51, 466);
        $i47 = r0.<org.scoutant.blokish.PieceUI: int j>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 32, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 32);
        r4[32] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i47$sym, i45$sym, $i47, i45);
        if $i47 != i45 goto label33;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45559, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 33, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 33);
        r4[33] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6521, null);
        return 0;

        goto label34;

     label32:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45558, 1);
        goto label34;

        goto label34;

     label33:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45559, 1);
        goto label34;

     label34:
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i$sym> = i37$sym;
        _sym_tmp_52 = r0.<org.scoutant.blokish.PieceUI: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_52, 465);
        _sym_tmp_52 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int i$a3tid> = _sym_tmp_52;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(465);
        r0.<org.scoutant.blokish.PieceUI: int i> = i37;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym> = i45$sym;
        _sym_tmp_53 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_53, 466);
        _sym_tmp_53 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int j$a3tid> = _sym_tmp_53;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(466);
        r0.<org.scoutant.blokish.PieceUI: int j> = i45;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression moving$sym> = null;
        _sym_tmp_54 = r0.<org.scoutant.blokish.PieceUI: int moving$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_54, 540);
        _sym_tmp_54 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int moving$a3tid> = _sym_tmp_54;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(540);
        r0.<org.scoutant.blokish.PieceUI: boolean moving> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 34, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 34);
        r4[34] = 1;
        goto label37;

     label35:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45551, 1);
        goto label37;

        goto label37;

     label36:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45552, 1);
        goto label37;

     label37:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 35, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 35);
        r4[35] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        if i0 != 1 goto label44;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45560, 0);
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression moving$sym> = null;
        _sym_tmp_55 = r0.<org.scoutant.blokish.PieceUI: int moving$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_55, 540);
        _sym_tmp_55 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int moving$a3tid> = _sym_tmp_55;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(540);
        r0.<org.scoutant.blokish.PieceUI: boolean moving> = 0;
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression rotating$sym> = null;
        _sym_tmp_56 = r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_56, 541);
        _sym_tmp_56 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int rotating$a3tid> = _sym_tmp_56;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(541);
        r0.<org.scoutant.blokish.PieceUI: boolean rotating> = 0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21806, null);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: void rotateAgainstGrid()>();
        r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression angle$sym> = null;
        _sym_tmp_57 = r0.<org.scoutant.blokish.PieceUI: int angle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_57, 544);
        _sym_tmp_57 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.PieceUI: int angle$a3tid> = _sym_tmp_57;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(544);
        r0.<org.scoutant.blokish.PieceUI: int angle> = 0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21795, null);
        specialinvoke r0.<org.scoutant.blokish.PieceUI: void resetLocalXY()>();
        $i48$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_58 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_58, 466);
        $i48 = r0.<org.scoutant.blokish.PieceUI: int j>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 36, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 36);
        r4[36] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i48$sym, null, $i48, 20);
        if $i48 <= 20 goto label38;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45561, 0);
        _sym_tmp_59 = r16.<org.scoutant.blokish.GameView: int buttons$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_59, 519);
        $r27 = r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.ButtonsView buttons>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, null);
        virtualinvoke $r27.<org.scoutant.blokish.ButtonsView: void setVisibility(int)>(4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21758, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void replace()>();
        _sym_tmp_60 = r16.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_60, 463);
        _sym_tmp_60 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r16.<org.scoutant.blokish.GameView: int selected$a3tid> = _sym_tmp_60;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(463);
        r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected> = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 37, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 37);
        r4[37] = 1;
        goto label47;

        goto label39;

     label38:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45561, 1);
        goto label39;

     label39:
        _sym_tmp_61 = r16.<org.scoutant.blokish.GameView: int buttons$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_61, 519);
        $r28 = r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.ButtonsView buttons>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1341, null, null);
        virtualinvoke $r28.<org.scoutant.blokish.ButtonsView: void setVisibility(int)>(0);
        _sym_tmp_62 = r16.<org.scoutant.blokish.GameView: int buttons$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_62, 519);
        $r29 = r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.ButtonsView buttons>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(6559, null);
        virtualinvoke $r29.<org.scoutant.blokish.ButtonsView: void bringToFront()>();
        _sym_tmp_63 = r16.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_63, 467);
        $r30 = r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_64 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_64, 464);
        $r31 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i49$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_65 = r0.<org.scoutant.blokish.PieceUI: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_65, 465);
        $i49 = r0.<org.scoutant.blokish.PieceUI: int i>;
        $i50$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_66 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_66, 466);
        $i50 = r0.<org.scoutant.blokish.PieceUI: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21807, null, null, $i49$sym, $i50$sym);
        $z4 = virtualinvoke $r30.<org.scoutant.blokish.model.Game: boolean valid(org.scoutant.blokish.model.Piece,int,int)>($r31, $i49, $i50);
        $z4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21807);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 38, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 38);
        r4[38] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z4$sym, null, $z4, 0);
        if $z4 == 0 goto label40;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45562, 0);
        $z5$sym = r16.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression thinking$sym>;
        _sym_tmp_67 = r16.<org.scoutant.blokish.GameView: int thinking$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_67, 512);
        $z5 = r16.<org.scoutant.blokish.GameView: boolean thinking>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 39, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 39);
        r4[39] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z5$sym, null, $z5, 0);
        if $z5 != 0 goto label41;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45563, 0);
        $z6$sym = null;
        $z6 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 40, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 40);
        r4[40] = 1;
        goto label43;

        goto label42;

     label40:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45562, 1);
        goto label42;

        goto label42;

     label41:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45563, 1);
        goto label42;

     label42:
        $z6$sym = null;
        $z6 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 41, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 41);
        r4[41] = 1;

     label43:
        z7$sym = $z6$sym;
        z7 = $z6;
        _sym_tmp_68 = r16.<org.scoutant.blokish.GameView: int buttons$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_68, 519);
        $r32 = r16.<org.scoutant.blokish.GameView: org.scoutant.blokish.ButtonsView buttons>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21760, null, z7$sym);
        virtualinvoke $r32.<org.scoutant.blokish.ButtonsView: void setOkState(boolean)>(z7);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 42, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 42);
        r4[42] = 1;
        _sym_tmp_71 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z7$sym, null, z7, 0);
        if z7 == 0 goto label45;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45564, 0);
        _sym_tmp_69 = r0.<org.scoutant.blokish.PieceUI: int vibrator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_69, 552);
        $r33 = r0.<org.scoutant.blokish.PieceUI: android.os.Vibrator vibrator>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 43, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 43);
        r4[43] = 1;
        _sym_tmp_71 = null;
        if $r33 == null goto label46;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45565, 0);
        _sym_tmp_70 = r0.<org.scoutant.blokish.PieceUI: int vibrator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_70, 552);
        $r34 = r0.<org.scoutant.blokish.PieceUI: android.os.Vibrator vibrator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1824, null, null);
        virtualinvoke $r34.<android.os.Vibrator: void vibrate(long)>(20L);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 44, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 44);
        r4[44] = 1;
        goto label47;

     label44:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45560, 1);
        goto label47;

        goto label47;

     label45:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45564, 1);
        goto label47;

        goto label47;

     label46:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_71, 45565, 1);
        goto label47;

     label47:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 45, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 45);
        r4[45] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(6521, null);
        return 0;
    }

    private void rotateAgainstGrid()
    {
        acteve.symbolic.integer.Expression _sym_tmp_10, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.model.Piece $r3, $r5, $r7, $r9;

        r0 := @this: org.scoutant.blokish.PieceUI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21806, 32541, 1);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_10 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45566, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45566, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 16);
        r2 = $r1[16];
        $i0$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression angle$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int angle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 544);
        $i0 = r0.<org.scoutant.blokish.PieceUI: int angle>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 45);
        if $i0 <= 45 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45567, 0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 464);
        $r3 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21808, null, null);
        virtualinvoke $r3.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece rotate(int)>(1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45567, 1);
        goto label3;

     label3:
        $i1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression angle$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int angle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 544);
        $i1 = r0.<org.scoutant.blokish.PieceUI: int angle>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, null, $i1, 135);
        if $i1 <= 135 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45568, 0);
        _sym_tmp_5 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 464);
        $r5 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21808, null, null);
        virtualinvoke $r5.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece rotate(int)>(1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45568, 1);
        goto label5;

     label5:
        $i2$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression angle$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.PieceUI: int angle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 544);
        $i2 = r0.<org.scoutant.blokish.PieceUI: int angle>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, null, $i2, -45);
        if $i2 >= -45 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45569, 0);
        _sym_tmp_7 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 464);
        $r7 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21808, null, null);
        virtualinvoke $r7.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece rotate(int)>(-1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45569, 1);
        goto label7;

     label7:
        $i3$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression angle$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.PieceUI: int angle$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 544);
        $i3 = r0.<org.scoutant.blokish.PieceUI: int angle>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, -135);
        if $i3 >= -135 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45570, 0);
        _sym_tmp_9 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 464);
        $r9 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21808, null, null);
        virtualinvoke $r9.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece rotate(int)>(-1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45570, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return;
    }

    public void rotate(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.model.Piece $r3;

        r0 := @this: org.scoutant.blokish.PieceUI;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21809, 32542, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45571, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45571, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 17);
        r2 = $r1[17];
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 464);
        $r3 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21808, null, i0$sym);
        virtualinvoke $r3.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece rotate(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void flip()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.model.Piece $r3;

        r0 := @this: org.scoutant.blokish.PieceUI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21804, 32543, 1);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45572, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45572, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 18);
        r2 = $r1[18];
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 464);
        $r3 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21810, null);
        virtualinvoke $r3.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece flip()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke r0.<org.scoutant.blokish.PieceUI: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private boolean willRotate()
    {
        acteve.symbolic.integer.Expression _sym_tmp_10, $i22$sym, $i21$sym, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, $i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.PieceUI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21805, 32544, 1);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_10 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45573, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45573, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 19);
        r2 = $r1[19];
        $i1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression radius$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int radius$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 545);
        $i1 = r0.<org.scoutant.blokish.PieceUI: int radius>;
        $i2$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 551);
        $i2 = r0.<org.scoutant.blokish.PieceUI: int size>;
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, $i2$sym, $i1, $i2);
        i0 = $i1 / $i2;
        $i3$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression downX$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int downX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 564);
        $i3 = r0.<org.scoutant.blokish.PieceUI: int downX>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, i0$sym, $i3, i0);
        $i4 = $i3 - i0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2121, $i4$sym);
        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i4);
        $i5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2121);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 1);
        if $i5 > 1 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45574, 0);
        $i6$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression downY$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.PieceUI: int downY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 565);
        $i6 = r0.<org.scoutant.blokish.PieceUI: int downY>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i6$sym, null, $i6, 1);
        $i7 = $i6 - 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2121, $i7$sym);
        $i8 = staticinvoke <java.lang.Math: int abs(int)>($i7);
        $i8$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2121);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, null, $i8, 1);
        if $i8 > 1 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45575, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21805, null);
        return 1;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45574, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45575, 1);
        goto label4;

     label4:
        $i9$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression downX$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.PieceUI: int downX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 564);
        $i9 = r0.<org.scoutant.blokish.PieceUI: int downX>;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, null, $i9, 1);
        $i10 = $i9 - 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2121, $i10$sym);
        $i11 = staticinvoke <java.lang.Math: int abs(int)>($i10);
        $i11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2121);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, null, $i11, 1);
        if $i11 > 1 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45576, 0);
        $i12$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression downY$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.PieceUI: int downY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 565);
        $i12 = r0.<org.scoutant.blokish.PieceUI: int downY>;
        $i13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i12$sym, i0$sym, $i12, i0);
        $i13 = $i12 - i0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2121, $i13$sym);
        $i14 = staticinvoke <java.lang.Math: int abs(int)>($i13);
        $i14$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2121);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, null, $i14, 1);
        if $i14 > 1 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45577, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21805, null);
        return 1;

        goto label7;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45576, 1);
        goto label7;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45577, 1);
        goto label7;

     label7:
        $i15$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression downX$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.PieceUI: int downX$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 564);
        $i15 = r0.<org.scoutant.blokish.PieceUI: int downX>;
        $i16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, i0$sym, 2, i0);
        $i16 = 2 * i0;
        $i17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i15$sym, $i16$sym, $i15, $i16);
        $i17 = $i15 - $i16;
        $i18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i17$sym, null, $i17, 1);
        $i18 = $i17 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2121, $i18$sym);
        $i19 = staticinvoke <java.lang.Math: int abs(int)>($i18);
        $i19$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2121);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i19$sym, null, $i19, 1);
        if $i19 > 1 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45578, 0);
        $i20$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression downY$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.PieceUI: int downY$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 565);
        $i20 = r0.<org.scoutant.blokish.PieceUI: int downY>;
        $i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i20$sym, i0$sym, $i20, i0);
        $i21 = $i20 - i0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2121, $i21$sym);
        $i22 = staticinvoke <java.lang.Math: int abs(int)>($i21);
        $i22$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2121);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i22$sym, null, $i22, 1);
        if $i22 > 1 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45579, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21805, null);
        return 1;

        goto label10;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45578, 1);
        goto label10;

        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45579, 1);
        goto label10;

     label10:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21805, null);
        return 0;
    }

    public java.lang.String toString()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        org.scoutant.blokish.PieceUI r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        org.scoutant.blokish.model.Piece $r9;
        java.lang.String $r11;

        r0 := @this: org.scoutant.blokish.PieceUI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(148, 32545, 1);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r1 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45580, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45580, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 20);
        r2 = $r1[20];
        $r3 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<PieceUI> : (");
        $i0$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 465);
        $i0 = r0.<org.scoutant.blokish.PieceUI: int i>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i0$sym);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        $i1$sym = r0.<org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.PieceUI: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 466);
        $i1 = r0.<org.scoutant.blokish.PieceUI: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i1$sym);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ; ");
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 464);
        $r9 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r11;
    }

    public int compareTo(org.scoutant.blokish.PieceUI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_10, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.scoutant.blokish.PieceUI r0, r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.model.Piece $r4, $r5, $r6, $r7;

        r0 := @this: org.scoutant.blokish.PieceUI;
        r1 := @parameter0: org.scoutant.blokish.PieceUI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21811, 32546, 2);
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 537);
        $r2 = <org.scoutant.blokish.PieceUI: boolean[][] $VRc>;
        _sym_tmp_10 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45581, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45581, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 21);
        r3 = $r2[21];
        _sym_tmp_2 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 464);
        $r4 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i0$sym = $r4.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym>;
        _sym_tmp_3 = $r4.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 566);
        $i0 = $r4.<org.scoutant.blokish.model.Piece: int count>;
        $i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i0$sym, 2, $i0);
        $i1 = 2 * $i0;
        _sym_tmp_4 = r0.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 464);
        $r5 = r0.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i2$sym = $r5.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_5 = $r5.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 533);
        $i2 = $r5.<org.scoutant.blokish.model.Piece: int size>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, $i2$sym, $i1, $i2);
        $i3 = $i1 + $i2;
        _sym_tmp_6 = r1.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 464);
        $r6 = r1.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i4$sym = $r6.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym>;
        _sym_tmp_7 = $r6.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 566);
        $i4 = $r6.<org.scoutant.blokish.model.Piece: int count>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i4$sym, 2, $i4);
        $i5 = 2 * $i4;
        _sym_tmp_8 = r1.<org.scoutant.blokish.PieceUI: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 464);
        $r7 = r1.<org.scoutant.blokish.PieceUI: org.scoutant.blokish.model.Piece piece>;
        $i6$sym = $r7.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_9 = $r7.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 533);
        $i6 = $r7.<org.scoutant.blokish.model.Piece: int size>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, $i6$sym, $i5, $i6);
        $i7 = $i5 + $i6;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, $i7$sym, $i3, $i7);
        $i8 = $i3 - $i7;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21811, $i8$sym);
        return $i8;
    }

    public volatile int compareTo(java.lang.Object)
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression $i0$sym, r1$sym;
        org.scoutant.blokish.PieceUI r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.scoutant.blokish.PieceUI;
        r1 := @parameter0: java.lang.Object;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(5212, 32547, 2);
        r1$sym = a3targs$symargs[1];
        $r2 = (org.scoutant.blokish.PieceUI) r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21811, null, null);
        $i0 = virtualinvoke r0.<org.scoutant.blokish.PieceUI: int compareTo(org.scoutant.blokish.PieceUI)>($r2);
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21811);
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(5212, $i0$sym);
        return $i0;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, r1$sym;
        boolean[][] $r0;
        boolean[] r1;
        int[] $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32548, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.PieceUI: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 23);
        r1 = $r0[23];
        $r2 = newarray (int)[4];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 0, 2130837530);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 0);
        $r2[0] = 2130837530;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 1, 2130837523);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 1);
        $r2[1] = 2130837523;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 2, 2130837513);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 2);
        $r2[2] = 2130837513;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r2$sym, null, null, $r2, 3, 2130837527);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r2, 3);
        $r2[3] = 2130837527;
        <org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression icons$sym> = $r2$sym;
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int icons$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 557);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.PieceUI: int icons$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(557);
        <org.scoutant.blokish.PieceUI: int[] icons> = $r2;
        $r3 = newarray (int)[4];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r3$sym, null, null, $r3, 0, 2130837531);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 0);
        $r3[0] = 2130837531;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r3$sym, null, null, $r3, 1, 2130837524);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 1);
        $r3[1] = 2130837524;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r3$sym, null, null, $r3, 2, 2130837514);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 2);
        $r3[2] = 2130837514;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r3$sym, null, null, $r3, 3, 2130837528);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 3);
        $r3[3] = 2130837528;
        <org.scoutant.blokish.PieceUI: acteve.symbolic.integer.Expression icons_bold$sym> = $r3$sym;
        _sym_tmp_2 = <org.scoutant.blokish.PieceUI: int icons_bold$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 559);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.PieceUI: int icons_bold$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(559);
        <org.scoutant.blokish.PieceUI: int[] icons_bold> = $r3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r23$sym, $r22$sym, $r21$sym, $r20$sym, $r19$sym, $r18$sym, $r17$sym, $r16$sym, $r15$sym, $r14$sym, $r13$sym, $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32549, 0);
        $r0 = newmultiarray (boolean)[24][];
        _sym_tmp_1 = <org.scoutant.blokish.PieceUI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 537);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.PieceUI: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(537);
        <org.scoutant.blokish.PieceUI: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[6];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[3];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[1];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[1];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[3];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[1];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[9];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[16];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        $r13 = newarray (boolean)[1];
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 12);
        $r0[12] = $r13;
        $r14 = newarray (boolean)[7];
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 13);
        $r0[13] = $r14;
        $r15 = newarray (boolean)[8];
        $r15$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 14);
        $r0[14] = $r15;
        $r16 = newarray (boolean)[46];
        $r16$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 15);
        $r0[15] = $r16;
        $r17 = newarray (boolean)[9];
        $r17$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 16);
        $r0[16] = $r17;
        $r18 = newarray (boolean)[1];
        $r18$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 17);
        $r0[17] = $r18;
        $r19 = newarray (boolean)[1];
        $r19$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 18);
        $r0[18] = $r19;
        $r20 = newarray (boolean)[10];
        $r20$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 19);
        $r0[19] = $r20;
        $r21 = newarray (boolean)[1];
        $r21$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 20);
        $r0[20] = $r21;
        $r22 = newarray (boolean)[1];
        $r22$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 21);
        $r0[21] = $r22;
        $r23 = newarray (boolean)[1];
        $r23$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 23);
        $r0[23] = $r23;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/PieceUI", -8714640218515558032L);
        return $r0;
    }
}
public final class org.scoutant.blokish.R$anim extends java.lang.Object
{
    public static final int wave_scale;
    public static final acteve.symbolic.integer.Expression wave_scale$sym;
    public static final int wave_scale$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R$anim r0;

        r0 := @this: org.scoutant.blokish.R$anim;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32550, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class org.scoutant.blokish.R$array extends java.lang.Object
{
    public static final int aiLevelNames;
    public static final int aiLevelValues;
    public static final acteve.symbolic.integer.Expression aiLevelNames$sym;
    public static final int aiLevelNames$a3tid;
    public static final acteve.symbolic.integer.Expression aiLevelValues$sym;
    public static final int aiLevelValues$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R$array r0;

        r0 := @this: org.scoutant.blokish.R$array;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32551, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class org.scoutant.blokish.R$attr extends java.lang.Object
{

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R$attr r0;

        r0 := @this: org.scoutant.blokish.R$attr;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32552, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class org.scoutant.blokish.R$color extends java.lang.Object
{
    public static final int black;
    public static final int grey;
    public static final int orange;
    public static final int white;
    public static final acteve.symbolic.integer.Expression black$sym;
    public static final int black$a3tid;
    public static final acteve.symbolic.integer.Expression grey$sym;
    public static final int grey$a3tid;
    public static final acteve.symbolic.integer.Expression orange$sym;
    public static final int orange$a3tid;
    public static final acteve.symbolic.integer.Expression white$sym;
    public static final int white$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R$color r0;

        r0 := @this: org.scoutant.blokish.R$color;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32553, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class org.scoutant.blokish.R$drawable extends java.lang.Object
{
    public static final int blokish;
    public static final int blokish2;
    public static final int blokish_21_1;
    public static final int blokish_21_youtube_arrow;
    public static final int blokish_2_pieces;
    public static final int blokish_dragging;
    public static final int blokish_rotating;
    public static final int blokish_scroll;
    public static final int blokish_title;
    public static final int blue;
    public static final int blue_bold;
    public static final int bol_blauw;
    public static final int bol_geel;
    public static final int bol_groen;
    public static final int bol_rood;
    public static final int bullet_ball_glass_yellow;
    public static final int cancel;
    public static final int checkmark;
    public static final int checkmark_48;
    public static final int green;
    public static final int green_bold;
    public static final int help_48;
    public static final int left_48;
    public static final int orange;
    public static final int orange_bold;
    public static final int preferences_48;
    public static final int red;
    public static final int red_bold;
    public static final int restart_48;
    public static final int spinner_blue_76;
    public static final acteve.symbolic.integer.Expression blokish$sym;
    public static final int blokish$a3tid;
    public static final acteve.symbolic.integer.Expression blokish2$sym;
    public static final int blokish2$a3tid;
    public static final acteve.symbolic.integer.Expression blokish_21_1$sym;
    public static final int blokish_21_1$a3tid;
    public static final acteve.symbolic.integer.Expression blokish_21_youtube_arrow$sym;
    public static final int blokish_21_youtube_arrow$a3tid;
    public static final acteve.symbolic.integer.Expression blokish_2_pieces$sym;
    public static final int blokish_2_pieces$a3tid;
    public static final acteve.symbolic.integer.Expression blokish_dragging$sym;
    public static final int blokish_dragging$a3tid;
    public static final acteve.symbolic.integer.Expression blokish_rotating$sym;
    public static final int blokish_rotating$a3tid;
    public static final acteve.symbolic.integer.Expression blokish_scroll$sym;
    public static final int blokish_scroll$a3tid;
    public static final acteve.symbolic.integer.Expression blokish_title$sym;
    public static final int blokish_title$a3tid;
    public static final acteve.symbolic.integer.Expression blue$sym;
    public static final int blue$a3tid;
    public static final acteve.symbolic.integer.Expression blue_bold$sym;
    public static final int blue_bold$a3tid;
    public static final acteve.symbolic.integer.Expression bol_blauw$sym;
    public static final int bol_blauw$a3tid;
    public static final acteve.symbolic.integer.Expression bol_geel$sym;
    public static final int bol_geel$a3tid;
    public static final acteve.symbolic.integer.Expression bol_groen$sym;
    public static final int bol_groen$a3tid;
    public static final acteve.symbolic.integer.Expression bol_rood$sym;
    public static final int bol_rood$a3tid;
    public static final acteve.symbolic.integer.Expression bullet_ball_glass_yellow$sym;
    public static final int bullet_ball_glass_yellow$a3tid;
    public static final acteve.symbolic.integer.Expression cancel$sym;
    public static final int cancel$a3tid;
    public static final acteve.symbolic.integer.Expression checkmark$sym;
    public static final int checkmark$a3tid;
    public static final acteve.symbolic.integer.Expression checkmark_48$sym;
    public static final int checkmark_48$a3tid;
    public static final acteve.symbolic.integer.Expression green$sym;
    public static final int green$a3tid;
    public static final acteve.symbolic.integer.Expression green_bold$sym;
    public static final int green_bold$a3tid;
    public static final acteve.symbolic.integer.Expression help_48$sym;
    public static final int help_48$a3tid;
    public static final acteve.symbolic.integer.Expression left_48$sym;
    public static final int left_48$a3tid;
    public static final acteve.symbolic.integer.Expression orange$sym;
    public static final int orange$a3tid;
    public static final acteve.symbolic.integer.Expression orange_bold$sym;
    public static final int orange_bold$a3tid;
    public static final acteve.symbolic.integer.Expression preferences_48$sym;
    public static final int preferences_48$a3tid;
    public static final acteve.symbolic.integer.Expression red$sym;
    public static final int red$a3tid;
    public static final acteve.symbolic.integer.Expression red_bold$sym;
    public static final int red_bold$a3tid;
    public static final acteve.symbolic.integer.Expression restart_48$sym;
    public static final int restart_48$a3tid;
    public static final acteve.symbolic.integer.Expression spinner_blue_76$sym;
    public static final int spinner_blue_76$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R$drawable r0;

        r0 := @this: org.scoutant.blokish.R$drawable;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32554, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class org.scoutant.blokish.R$id extends java.lang.Object
{
    public static final int blue;
    public static final int green;
    public static final int icons;
    public static final int later;
    public static final int message;
    public static final int never;
    public static final int now;
    public static final int ok;
    public static final int orange;
    public static final int red;
    public static final int red_button;
    public static final int video;
    public static final acteve.symbolic.integer.Expression blue$sym;
    public static final int blue$a3tid;
    public static final acteve.symbolic.integer.Expression green$sym;
    public static final int green$a3tid;
    public static final acteve.symbolic.integer.Expression icons$sym;
    public static final int icons$a3tid;
    public static final acteve.symbolic.integer.Expression later$sym;
    public static final int later$a3tid;
    public static final acteve.symbolic.integer.Expression message$sym;
    public static final int message$a3tid;
    public static final acteve.symbolic.integer.Expression never$sym;
    public static final int never$a3tid;
    public static final acteve.symbolic.integer.Expression now$sym;
    public static final int now$a3tid;
    public static final acteve.symbolic.integer.Expression ok$sym;
    public static final int ok$a3tid;
    public static final acteve.symbolic.integer.Expression orange$sym;
    public static final int orange$a3tid;
    public static final acteve.symbolic.integer.Expression red$sym;
    public static final int red$a3tid;
    public static final acteve.symbolic.integer.Expression red_button$sym;
    public static final int red_button$a3tid;
    public static final acteve.symbolic.integer.Expression video$sym;
    public static final int video$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R$id r0;

        r0 := @this: org.scoutant.blokish.R$id;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32555, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class org.scoutant.blokish.R$layout extends java.lang.Object
{
    public static final int endgame;
    public static final int help;
    public static final int rate;
    public static final int splashscreen;
    public static final int tabs;
    public static final acteve.symbolic.integer.Expression endgame$sym;
    public static final int endgame$a3tid;
    public static final acteve.symbolic.integer.Expression help$sym;
    public static final int help$a3tid;
    public static final acteve.symbolic.integer.Expression rate$sym;
    public static final int rate$a3tid;
    public static final acteve.symbolic.integer.Expression splashscreen$sym;
    public static final int splashscreen$a3tid;
    public static final acteve.symbolic.integer.Expression tabs$sym;
    public static final int tabs$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R$layout r0;

        r0 := @this: org.scoutant.blokish.R$layout;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32556, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class org.scoutant.blokish.R$string extends java.lang.Object
{
    public static final int Blue;
    public static final int Green;
    public static final int Orange;
    public static final int Red;
    public static final int back;
    public static final int cancel;
    public static final int congratulations;
    public static final int delete;
    public static final int flip;
    public static final int help;
    public static final int i_pass;
    public static final int if_you_enjoy;
    public static final int later;
    public static final int never;
    public static final int new_game;
    public static final int newnew;
    public static final int no;
    public static final int no_thansk;
    public static final int now;
    public static final int preferences;
    public static final int quit;
    public static final int rate;
    public static final int red_ko;
    public static final int remind_me;
    public static final int social;
    public static final int try_next;
    public static final int undo;
    public static final int wins_with_score;
    public static final int yes;
    public static final acteve.symbolic.integer.Expression Blue$sym;
    public static final int Blue$a3tid;
    public static final acteve.symbolic.integer.Expression Green$sym;
    public static final int Green$a3tid;
    public static final acteve.symbolic.integer.Expression Orange$sym;
    public static final int Orange$a3tid;
    public static final acteve.symbolic.integer.Expression Red$sym;
    public static final int Red$a3tid;
    public static final acteve.symbolic.integer.Expression back$sym;
    public static final int back$a3tid;
    public static final acteve.symbolic.integer.Expression cancel$sym;
    public static final int cancel$a3tid;
    public static final acteve.symbolic.integer.Expression congratulations$sym;
    public static final int congratulations$a3tid;
    public static final acteve.symbolic.integer.Expression delete$sym;
    public static final int delete$a3tid;
    public static final acteve.symbolic.integer.Expression flip$sym;
    public static final int flip$a3tid;
    public static final acteve.symbolic.integer.Expression help$sym;
    public static final int help$a3tid;
    public static final acteve.symbolic.integer.Expression i_pass$sym;
    public static final int i_pass$a3tid;
    public static final acteve.symbolic.integer.Expression if_you_enjoy$sym;
    public static final int if_you_enjoy$a3tid;
    public static final acteve.symbolic.integer.Expression later$sym;
    public static final int later$a3tid;
    public static final acteve.symbolic.integer.Expression never$sym;
    public static final int never$a3tid;
    public static final acteve.symbolic.integer.Expression new_game$sym;
    public static final int new_game$a3tid;
    public static final acteve.symbolic.integer.Expression newnew$sym;
    public static final int newnew$a3tid;
    public static final acteve.symbolic.integer.Expression no$sym;
    public static final int no$a3tid;
    public static final acteve.symbolic.integer.Expression no_thansk$sym;
    public static final int no_thansk$a3tid;
    public static final acteve.symbolic.integer.Expression now$sym;
    public static final int now$a3tid;
    public static final acteve.symbolic.integer.Expression preferences$sym;
    public static final int preferences$a3tid;
    public static final acteve.symbolic.integer.Expression quit$sym;
    public static final int quit$a3tid;
    public static final acteve.symbolic.integer.Expression rate$sym;
    public static final int rate$a3tid;
    public static final acteve.symbolic.integer.Expression red_ko$sym;
    public static final int red_ko$a3tid;
    public static final acteve.symbolic.integer.Expression remind_me$sym;
    public static final int remind_me$a3tid;
    public static final acteve.symbolic.integer.Expression social$sym;
    public static final int social$a3tid;
    public static final acteve.symbolic.integer.Expression try_next$sym;
    public static final int try_next$a3tid;
    public static final acteve.symbolic.integer.Expression undo$sym;
    public static final int undo$a3tid;
    public static final acteve.symbolic.integer.Expression wins_with_score$sym;
    public static final int wins_with_score$a3tid;
    public static final acteve.symbolic.integer.Expression yes$sym;
    public static final int yes$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R$string r0;

        r0 := @this: org.scoutant.blokish.R$string;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32557, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class org.scoutant.blokish.R$style extends java.lang.Object
{
    public static final int h1;
    public static final int padding;
    public static final int scoutant;
    public static final acteve.symbolic.integer.Expression h1$sym;
    public static final int h1$a3tid;
    public static final acteve.symbolic.integer.Expression padding$sym;
    public static final int padding$a3tid;
    public static final acteve.symbolic.integer.Expression scoutant$sym;
    public static final int scoutant$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R$style r0;

        r0 := @this: org.scoutant.blokish.R$style;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32558, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class org.scoutant.blokish.R$xml extends java.lang.Object
{
    public static final int preferences;
    public static final acteve.symbolic.integer.Expression preferences$sym;
    public static final int preferences$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R$xml r0;

        r0 := @this: org.scoutant.blokish.R$xml;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32559, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
public final class org.scoutant.blokish.R extends java.lang.Object
{

    public void <init>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.R r0;

        r0 := @this: org.scoutant.blokish.R;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32560, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }
}
class org.scoutant.blokish.RateDialog$1 extends java.lang.Object implements android.view.View$OnClickListener
{
    final android.content.Context val$context;
    final org.scoutant.blokish.RateDialog this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int val$context$a3tid;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.RateDialog, android.content.Context)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.RateDialog$1 r0;
        org.scoutant.blokish.RateDialog r1;
        android.content.Context r2;
        boolean[][] $r3;
        boolean[] r4;

        r0 := @this: org.scoutant.blokish.RateDialog$1;
        r1 := @parameter0: org.scoutant.blokish.RateDialog;
        r2 := @parameter1: android.content.Context;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21812, 32561, 3);
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 567);
        $r3 = <org.scoutant.blokish.RateDialog$1: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45582, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.RateDialog$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45582, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 0);
        r4 = $r3[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.RateDialog$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 568);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.RateDialog$1: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(568);
        r0.<org.scoutant.blokish.RateDialog$1: org.scoutant.blokish.RateDialog this$0> = r1;
        _sym_tmp_3 = r0.<org.scoutant.blokish.RateDialog$1: int val$context$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 569);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.RateDialog$1: int val$context$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(569);
        r0.<org.scoutant.blokish.RateDialog$1: android.content.Context val$context> = r2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        return;
    }

    public void onClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.RateDialog$1 r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        android.content.Context $r4;
        android.content.Intent $r5;
        android.net.Uri $r6;
        org.scoutant.blokish.RateDialog $r7, $r8;

        r0 := @this: org.scoutant.blokish.RateDialog$1;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1399, 32562, 2);
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 567);
        $r2 = <org.scoutant.blokish.RateDialog$1: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45583, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.RateDialog$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45583, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.RateDialog$1: int val$context$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 569);
        $r4 = r0.<org.scoutant.blokish.RateDialog$1: android.content.Context val$context>;
        $r5 = new android.content.Intent;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(287, null);
        $r6 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("market://details?id=org.scoutant.blokish");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5115, null, null, null);
        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.VIEW", $r6);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1404, null, null);
        virtualinvoke $r4.<android.content.Context: void startActivity(android.content.Intent)>($r5);
        _sym_tmp_3 = r0.<org.scoutant.blokish.RateDialog$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 568);
        $r7 = r0.<org.scoutant.blokish.RateDialog$1: org.scoutant.blokish.RateDialog this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21813, null);
        staticinvoke <org.scoutant.blokish.RateDialog: void access$000(org.scoutant.blokish.RateDialog)>($r7);
        _sym_tmp_4 = r0.<org.scoutant.blokish.RateDialog$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 568);
        $r8 = r0.<org.scoutant.blokish.RateDialog$1: org.scoutant.blokish.RateDialog this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1527, null);
        virtualinvoke $r8.<org.scoutant.blokish.RateDialog: void dismiss()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32563, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.RateDialog$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32564, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 567);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.RateDialog$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(567);
        <org.scoutant.blokish.RateDialog$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/RateDialog$1", 4705431562036839840L);
        return $r0;
    }
}
class org.scoutant.blokish.RateDialog$2 extends java.lang.Object implements android.view.View$OnClickListener
{
    final org.scoutant.blokish.RateDialog this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.RateDialog)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.RateDialog$2 r0;
        org.scoutant.blokish.RateDialog r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.RateDialog$2;
        r1 := @parameter0: org.scoutant.blokish.RateDialog;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21814, 32565, 2);
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 570);
        $r2 = <org.scoutant.blokish.RateDialog$2: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45584, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.RateDialog$2: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45584, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.RateDialog$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 571);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.RateDialog$2: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(571);
        r0.<org.scoutant.blokish.RateDialog$2: org.scoutant.blokish.RateDialog this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.RateDialog$2 r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.RateDialog $r4, $r5;

        r0 := @this: org.scoutant.blokish.RateDialog$2;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1399, 32566, 2);
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 570);
        $r2 = <org.scoutant.blokish.RateDialog$2: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45585, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.RateDialog$2: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45585, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.RateDialog$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 571);
        $r4 = r0.<org.scoutant.blokish.RateDialog$2: org.scoutant.blokish.RateDialog this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21813, null);
        staticinvoke <org.scoutant.blokish.RateDialog: void access$000(org.scoutant.blokish.RateDialog)>($r4);
        _sym_tmp_3 = r0.<org.scoutant.blokish.RateDialog$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 571);
        $r5 = r0.<org.scoutant.blokish.RateDialog$2: org.scoutant.blokish.RateDialog this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1527, null);
        virtualinvoke $r5.<org.scoutant.blokish.RateDialog: void dismiss()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32567, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.RateDialog$2: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32568, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 570);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.RateDialog$2: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(570);
        <org.scoutant.blokish.RateDialog$2: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/RateDialog$2", 4320153510897751294L);
        return $r0;
    }
}
class org.scoutant.blokish.RateDialog$3 extends java.lang.Object implements android.view.View$OnClickListener
{
    final org.scoutant.blokish.RateDialog this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.RateDialog)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.RateDialog$3 r0;
        org.scoutant.blokish.RateDialog r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.RateDialog$3;
        r1 := @parameter0: org.scoutant.blokish.RateDialog;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21814, 32569, 2);
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 572);
        $r2 = <org.scoutant.blokish.RateDialog$3: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45586, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.RateDialog$3: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45586, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.RateDialog$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 573);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.RateDialog$3: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(573);
        r0.<org.scoutant.blokish.RateDialog$3: org.scoutant.blokish.RateDialog this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.view.View)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.RateDialog$3 r0;
        android.view.View r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.RateDialog $r4, $r6, $r9;
        android.content.SharedPreferences$Editor $r5, $r7, $r8;

        r0 := @this: org.scoutant.blokish.RateDialog$3;
        r1 := @parameter0: android.view.View;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1399, 32570, 2);
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 572);
        $r2 = <org.scoutant.blokish.RateDialog$3: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45587, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.RateDialog$3: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45587, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.RateDialog$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 573);
        $r4 = r0.<org.scoutant.blokish.RateDialog$3: org.scoutant.blokish.RateDialog this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21815, null);
        $r5 = staticinvoke <org.scoutant.blokish.RateDialog: android.content.SharedPreferences$Editor access$100(org.scoutant.blokish.RateDialog)>($r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_5 = null;
        if $r5 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45588, 0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.RateDialog$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 573);
        $r6 = r0.<org.scoutant.blokish.RateDialog$3: org.scoutant.blokish.RateDialog this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21815, null);
        $r7 = staticinvoke <org.scoutant.blokish.RateDialog: android.content.SharedPreferences$Editor access$100(org.scoutant.blokish.RateDialog)>($r6);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5636, null, null, null);
        $r8 = interfaceinvoke $r7.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("dontshowagain", 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8350, null);
        interfaceinvoke $r8.<android.content.SharedPreferences$Editor: boolean commit()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45588, 1);
        goto label3;

     label3:
        _sym_tmp_4 = r0.<org.scoutant.blokish.RateDialog$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 573);
        $r9 = r0.<org.scoutant.blokish.RateDialog$3: org.scoutant.blokish.RateDialog this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1527, null);
        virtualinvoke $r9.<org.scoutant.blokish.RateDialog: void dismiss()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32571, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.RateDialog$3: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32572, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 572);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.RateDialog$3: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(572);
        <org.scoutant.blokish.RateDialog$3: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/RateDialog$3", -3029881706742115193L);
        return $r0;
    }
}
public class org.scoutant.blokish.RateDialog extends android.app.Dialog
{
    private android.content.SharedPreferences$Editor editor;
    private static final java.lang.String APP_PNAME;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private int editor$a3tid;
    private static final int APP_PNAME$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(android.content.Context)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.RateDialog r0;
        android.content.Context r1;
        boolean[][] $r2;
        boolean[] r3;
        android.widget.Button r4, r5, r6;
        android.content.SharedPreferences $r7;
        android.content.SharedPreferences$Editor $r8;
        android.view.Window $r9;
        android.view.View $r10, $r12, $r14;
        org.scoutant.blokish.RateDialog$1 $r11;
        org.scoutant.blokish.RateDialog$2 $r13;
        org.scoutant.blokish.RateDialog$3 $r15;

        r0 := @this: org.scoutant.blokish.RateDialog;
        r1 := @parameter0: android.content.Context;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(274, 32573, 2);
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 574);
        $r2 = <org.scoutant.blokish.RateDialog: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45589, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.RateDialog: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45589, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke r0.<android.app.Dialog: void <init>(android.content.Context)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8539, null, null, null);
        $r7 = virtualinvoke r1.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>("apprater", 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5321, null);
        $r8 = interfaceinvoke $r7.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();
        _sym_tmp_2 = r0.<org.scoutant.blokish.RateDialog: int editor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 575);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.RateDialog: int editor$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(575);
        r0.<org.scoutant.blokish.RateDialog: android.content.SharedPreferences$Editor editor> = $r8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1626, null, null);
        virtualinvoke r0.<org.scoutant.blokish.RateDialog: void setContentView(int)>(2130903042);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1519, null);
        $r9 = virtualinvoke r0.<org.scoutant.blokish.RateDialog: android.view.Window getWindow()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6744, null, null, null);
        virtualinvoke $r9.<android.view.Window: void setLayout(int,int)>(-1, -2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r10 = virtualinvoke r0.<org.scoutant.blokish.RateDialog: android.view.View findViewById(int)>(2131361796);
        r4 = (android.widget.Button) $r10;
        $r11 = new org.scoutant.blokish.RateDialog$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21812, null, null, null);
        specialinvoke $r11.<org.scoutant.blokish.RateDialog$1: void <init>(org.scoutant.blokish.RateDialog,android.content.Context)>(r0, r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1450, null, null);
        virtualinvoke r4.<android.widget.Button: void setOnClickListener(android.view.View$OnClickListener)>($r11);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r12 = virtualinvoke r0.<org.scoutant.blokish.RateDialog: android.view.View findViewById(int)>(2131361797);
        r5 = (android.widget.Button) $r12;
        $r13 = new org.scoutant.blokish.RateDialog$2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21814, null, null);
        specialinvoke $r13.<org.scoutant.blokish.RateDialog$2: void <init>(org.scoutant.blokish.RateDialog)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1450, null, null);
        virtualinvoke r5.<android.widget.Button: void setOnClickListener(android.view.View$OnClickListener)>($r13);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1504, null, null);
        $r14 = virtualinvoke r0.<org.scoutant.blokish.RateDialog: android.view.View findViewById(int)>(2131361798);
        r6 = (android.widget.Button) $r14;
        $r15 = new org.scoutant.blokish.RateDialog$3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21814, null, null);
        specialinvoke $r15.<org.scoutant.blokish.RateDialog$3: void <init>(org.scoutant.blokish.RateDialog)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1450, null, null);
        virtualinvoke r6.<android.widget.Button: void setOnClickListener(android.view.View$OnClickListener)>($r15);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private void resetCounter()
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.RateDialog r0;
        boolean[][] $r1;
        boolean[] r2;
        android.content.SharedPreferences$Editor $r3, $r4, $r6, $r8;

        r0 := @this: org.scoutant.blokish.RateDialog;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21816, 32574, 1);
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 574);
        $r1 = <org.scoutant.blokish.RateDialog: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45590, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.RateDialog: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45590, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.RateDialog: int editor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 575);
        $r3 = r0.<org.scoutant.blokish.RateDialog: android.content.SharedPreferences$Editor editor>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_6 = null;
        if $r3 != null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45591, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        return;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45591, 1);
        goto label3;

     label3:
        _sym_tmp_3 = r0.<org.scoutant.blokish.RateDialog: int editor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 575);
        $r4 = r0.<org.scoutant.blokish.RateDialog: android.content.SharedPreferences$Editor editor>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8331, null, null, null);
        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("launch_count", 0L);
        _sym_tmp_4 = r0.<org.scoutant.blokish.RateDialog: int editor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 575);
        $r6 = r0.<org.scoutant.blokish.RateDialog: android.content.SharedPreferences$Editor editor>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8331, null, null, null);
        interfaceinvoke $r6.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("date_firstlaunch", 0L);
        _sym_tmp_5 = r0.<org.scoutant.blokish.RateDialog: int editor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 575);
        $r8 = r0.<org.scoutant.blokish.RateDialog: android.content.SharedPreferences$Editor editor>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(8350, null);
        interfaceinvoke $r8.<android.content.SharedPreferences$Editor: boolean commit()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    static void access$000(org.scoutant.blokish.RateDialog)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.RateDialog r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @parameter0: org.scoutant.blokish.RateDialog;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21813, 32575, 1);
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 574);
        $r1 = <org.scoutant.blokish.RateDialog: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45592, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.RateDialog: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45592, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21816, null);
        specialinvoke r0.<org.scoutant.blokish.RateDialog: void resetCounter()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    static android.content.SharedPreferences$Editor access$100(org.scoutant.blokish.RateDialog)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.RateDialog r0;
        boolean[][] $r1;
        boolean[] r2;
        android.content.SharedPreferences$Editor $r3;

        r0 := @parameter0: org.scoutant.blokish.RateDialog;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21815, 32576, 1);
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 574);
        $r1 = <org.scoutant.blokish.RateDialog: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45593, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.RateDialog: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45593, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        _sym_tmp_2 = r0.<org.scoutant.blokish.RateDialog: int editor$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 575);
        $r3 = r0.<org.scoutant.blokish.RateDialog: android.content.SharedPreferences$Editor editor>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32577, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.RateDialog: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 4);
        r1 = $r0[4];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32578, 0);
        $r0 = newmultiarray (boolean)[5][];
        _sym_tmp_1 = <org.scoutant.blokish.RateDialog: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 574);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.RateDialog: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(574);
        <org.scoutant.blokish.RateDialog: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[3];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/RateDialog", 1546448488625679140L);
        return $r0;
    }
}
public class org.scoutant.blokish.Settings extends android.preference.PreferenceActivity
{
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.Settings r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.Settings;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32579, 1);
        _sym_tmp_1 = <org.scoutant.blokish.Settings: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 576);
        $r1 = <org.scoutant.blokish.Settings: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45594, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.Settings: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45594, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.preference.PreferenceActivity: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    protected void onCreate(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.Settings r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.Settings;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1621, 32580, 2);
        _sym_tmp_1 = <org.scoutant.blokish.Settings: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 576);
        $r2 = <org.scoutant.blokish.Settings: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45595, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.Settings: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45595, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1621, null, null);
        specialinvoke r0.<android.preference.PreferenceActivity: void onCreate(android.os.Bundle)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(18567, null, null);
        virtualinvoke r0.<org.scoutant.blokish.Settings: void addPreferencesFromResource(int)>(2131034112);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32581, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.Settings: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32582, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.Settings: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 576);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.Settings: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(576);
        <org.scoutant.blokish.Settings: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/Settings", 3934875464755263326L);
        return $r0;
    }
}
class org.scoutant.blokish.SplashScreen$1 extends android.os.Handler
{
    final org.scoutant.blokish.SplashScreen this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.SplashScreen)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.SplashScreen$1 r0;
        org.scoutant.blokish.SplashScreen r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.SplashScreen$1;
        r1 := @parameter0: org.scoutant.blokish.SplashScreen;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21817, 32583, 2);
        _sym_tmp_1 = <org.scoutant.blokish.SplashScreen$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 577);
        $r2 = <org.scoutant.blokish.SplashScreen$1: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45596, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.SplashScreen$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45596, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.SplashScreen$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 578);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.SplashScreen$1: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(578);
        r0.<org.scoutant.blokish.SplashScreen$1: org.scoutant.blokish.SplashScreen this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.os.Handler: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void handleMessage(android.os.Message)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.SplashScreen$1 r0;
        android.os.Message r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.SplashScreen $r4, $r6;
        android.content.Intent $r5;

        r0 := @this: org.scoutant.blokish.SplashScreen$1;
        r1 := @parameter0: android.os.Message;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(980, 32584, 2);
        _sym_tmp_1 = <org.scoutant.blokish.SplashScreen$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 577);
        $r2 = <org.scoutant.blokish.SplashScreen$1: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45597, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.SplashScreen$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45597, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.SplashScreen$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 578);
        $r4 = r0.<org.scoutant.blokish.SplashScreen$1: org.scoutant.blokish.SplashScreen this$0>;
        $r5 = new android.content.Intent;
        _sym_tmp_3 = r0.<org.scoutant.blokish.SplashScreen$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 578);
        $r6 = r0.<org.scoutant.blokish.SplashScreen$1: org.scoutant.blokish.SplashScreen this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9129, null, null, null);
        specialinvoke $r5.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r6, class "org/scoutant/blokish/UI");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9590, null, null, null);
        virtualinvoke $r4.<org.scoutant.blokish.SplashScreen: void startActivityForResult(android.content.Intent,int)>($r5, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(980, null, null);
        specialinvoke r0.<android.os.Handler: void handleMessage(android.os.Message)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32585, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.SplashScreen$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32586, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.SplashScreen$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 577);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.SplashScreen$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(577);
        <org.scoutant.blokish.SplashScreen$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/SplashScreen$1", 4320153514506407267L);
        return $r0;
    }
}
public class org.scoutant.blokish.SplashScreen extends android.app.Activity
{
    private static final long DELAY;
    private android.os.Handler handler;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    private static final acteve.symbolic.integer.Expression DELAY$sym;
    private static final int DELAY$a3tid;
    private int handler$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.SplashScreen r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.SplashScreen$1 $r3;

        r0 := @this: org.scoutant.blokish.SplashScreen;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32587, 1);
        _sym_tmp_1 = <org.scoutant.blokish.SplashScreen: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 579);
        $r1 = <org.scoutant.blokish.SplashScreen: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45598, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.SplashScreen: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45598, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.app.Activity: void <init>()>();
        $r3 = new org.scoutant.blokish.SplashScreen$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21817, null, null);
        specialinvoke $r3.<org.scoutant.blokish.SplashScreen$1: void <init>(org.scoutant.blokish.SplashScreen)>(r0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.SplashScreen: int handler$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 580);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.SplashScreen: int handler$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(580);
        r0.<org.scoutant.blokish.SplashScreen: android.os.Handler handler> = $r3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    protected void onCreate(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, l0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.SplashScreen r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;
        long l0;
        java.io.FileInputStream r4;
        java.io.InputStreamReader $r5;
        java.io.BufferedReader r6, $r7;
        java.lang.String $r8, $r9;
        java.lang.Exception $r10, r11;
        android.os.Handler $r12;

        r0 := @this: org.scoutant.blokish.SplashScreen;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1621, 32588, 2);
        _sym_tmp_1 = <org.scoutant.blokish.SplashScreen: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 579);
        $r2 = <org.scoutant.blokish.SplashScreen: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45599, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.SplashScreen: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45599, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1621, null, null);
        specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1622, null, null);
        virtualinvoke r0.<org.scoutant.blokish.SplashScreen: boolean requestWindowFeature(int)>(1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1626, null, null);
        virtualinvoke r0.<org.scoutant.blokish.SplashScreen: void setContentView(int)>(2130903043);
        l0$sym = null;
        l0 = 1500L;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8542, null, null);
        r4 = virtualinvoke r0.<org.scoutant.blokish.SplashScreen: java.io.FileInputStream openFileInput(java.lang.String)>("moves.txt");
        $r7 = new java.io.BufferedReader;
        $r5 = new java.io.InputStreamReader;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(3360, null, null);
        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2664, null, null);
        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader)>($r5);
        r6 = $r7;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(3171, null);
        $r8 = virtualinvoke r6.<java.io.BufferedReader: java.lang.String readLine()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_3 = null;
        if $r8 == null goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45600, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(3171, null);
        $r9 = virtualinvoke r6.<java.io.BufferedReader: java.lang.String readLine()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_3 = null;
        if $r9 == null goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45601, 0);
        l0$sym = null;
        l0 = 500L;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label5;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45600, 1);
        goto label5;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45601, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;
        r11 = $r10;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;

     label8:
        _sym_tmp_2 = r0.<org.scoutant.blokish.SplashScreen: int handler$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 580);
        $r12 = r0.<org.scoutant.blokish.SplashScreen: android.os.Handler handler>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5435, null, null, l0$sym);
        virtualinvoke $r12.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(0, l0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        return;

        catch java.lang.Exception from label2 to label6 with label7;
    }

    protected void onActivityResult(int, int, android.content.Intent)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1;
        org.scoutant.blokish.SplashScreen r0;
        android.content.Intent r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.SplashScreen;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: android.content.Intent;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(8684, 32589, 4);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.SplashScreen: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 579);
        $r2 = <org.scoutant.blokish.SplashScreen: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45602, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.SplashScreen: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45602, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 2);
        r3 = $r2[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1658, null);
        virtualinvoke r0.<org.scoutant.blokish.SplashScreen: void finish()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32590, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.SplashScreen: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 3);
        r1 = $r0[3];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32591, 0);
        $r0 = newmultiarray (boolean)[4][];
        _sym_tmp_1 = <org.scoutant.blokish.SplashScreen: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 579);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.SplashScreen: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(579);
        <org.scoutant.blokish.SplashScreen: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[6];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/SplashScreen", -805060135749633205L);
        return $r0;
    }
}
class org.scoutant.blokish.UI$1 extends java.lang.Object implements android.content.DialogInterface$OnClickListener
{
    final org.scoutant.blokish.UI this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI$1 r0;
        org.scoutant.blokish.UI r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.UI$1;
        r1 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21818, 32592, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 581);
        $r2 = <org.scoutant.blokish.UI$1: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45603, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45603, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$1: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 582);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI$1: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(582);
        r0.<org.scoutant.blokish.UI$1: org.scoutant.blokish.UI this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.content.DialogInterface, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0;
        org.scoutant.blokish.UI$1 r0;
        android.content.DialogInterface r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.UI$1;
        r1 := @parameter0: android.content.DialogInterface;
        i0 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1528, 32593, 3);
        i0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.UI$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 581);
        $r2 = <org.scoutant.blokish.UI$1: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45604, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45604, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(540, null);
        interfaceinvoke r1.<android.content.DialogInterface: void cancel()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32594, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.UI$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32595, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.UI$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 581);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.UI$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(581);
        <org.scoutant.blokish.UI$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/UI$1", 4320153508677039926L);
        return $r0;
    }
}
class org.scoutant.blokish.UI$2 extends java.lang.Object implements android.content.DialogInterface$OnClickListener
{
    final org.scoutant.blokish.UI this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI$2 r0;
        org.scoutant.blokish.UI r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.UI$2;
        r1 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21818, 32596, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 583);
        $r2 = <org.scoutant.blokish.UI$2: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45605, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$2: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45605, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 584);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI$2: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(584);
        r0.<org.scoutant.blokish.UI$2: org.scoutant.blokish.UI this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.content.DialogInterface, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0;
        org.scoutant.blokish.UI$2 r0;
        android.content.DialogInterface r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.UI $r4;

        r0 := @this: org.scoutant.blokish.UI$2;
        r1 := @parameter0: android.content.DialogInterface;
        i0 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1528, 32597, 3);
        i0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.UI$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 583);
        $r2 = <org.scoutant.blokish.UI$2: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45606, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$2: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45606, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$2: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 584);
        $r4 = r0.<org.scoutant.blokish.UI$2: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21819, null);
        staticinvoke <org.scoutant.blokish.UI: void access$000(org.scoutant.blokish.UI)>($r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32598, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.UI$2: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32599, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.UI$2: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 583);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.UI$2: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(583);
        <org.scoutant.blokish.UI$2: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/UI$2", 4320153508954628847L);
        return $r0;
    }
}
class org.scoutant.blokish.UI$3 extends java.lang.Object implements android.content.DialogInterface$OnClickListener
{
    final org.scoutant.blokish.UI this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI$3 r0;
        org.scoutant.blokish.UI r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.UI$3;
        r1 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21818, 32600, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 585);
        $r2 = <org.scoutant.blokish.UI$3: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45607, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$3: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45607, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$3: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 586);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI$3: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(586);
        r0.<org.scoutant.blokish.UI$3: org.scoutant.blokish.UI this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.content.DialogInterface, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0;
        org.scoutant.blokish.UI$3 r0;
        android.content.DialogInterface r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.UI$3;
        r1 := @parameter0: android.content.DialogInterface;
        i0 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1528, 32601, 3);
        i0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.UI$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 585);
        $r2 = <org.scoutant.blokish.UI$3: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45608, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$3: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45608, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32602, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.UI$3: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32603, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.UI$3: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 585);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.UI$3: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(585);
        <org.scoutant.blokish.UI$3: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/UI$3", 4320153507011506400L);
        return $r0;
    }
}
class org.scoutant.blokish.UI$4 extends java.lang.Object implements android.content.DialogInterface$OnClickListener
{
    final org.scoutant.blokish.UI this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI$4 r0;
        org.scoutant.blokish.UI r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.UI$4;
        r1 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21818, 32604, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$4: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 587);
        $r2 = <org.scoutant.blokish.UI$4: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45609, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$4: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45609, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$4: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 588);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI$4: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(588);
        r0.<org.scoutant.blokish.UI$4: org.scoutant.blokish.UI this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.content.DialogInterface, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0;
        org.scoutant.blokish.UI$4 r0;
        android.content.DialogInterface r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.UI $r4;

        r0 := @this: org.scoutant.blokish.UI$4;
        r1 := @parameter0: android.content.DialogInterface;
        i0 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1528, 32605, 3);
        i0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.UI$4: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 587);
        $r2 = <org.scoutant.blokish.UI$4: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45610, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$4: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45610, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$4: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 588);
        $r4 = r0.<org.scoutant.blokish.UI$4: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1658, null);
        virtualinvoke $r4.<org.scoutant.blokish.UI: void finish()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32606, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.UI$4: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32607, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.UI$4: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 587);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.UI$4: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(587);
        <org.scoutant.blokish.UI$4: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/UI$4", 4320153508954628847L);
        return $r0;
    }
}
class org.scoutant.blokish.UI$AITask extends android.os.AsyncTask
{
    final org.scoutant.blokish.UI this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    private void <init>(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI$AITask r0;
        org.scoutant.blokish.UI r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.UI$AITask;
        r1 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21818, 32608, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$AITask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 589);
        $r2 = <org.scoutant.blokish.UI$AITask: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45611, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$AITask: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45611, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 590);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(590);
        r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.os.AsyncTask: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    protected transient org.scoutant.blokish.model.Move doInBackground(java.lang.Integer[])
    {
        acteve.symbolic.integer.Expression _sym_tmp_13, $i1$sym, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        org.scoutant.blokish.UI$AITask r0;
        java.lang.Integer[] r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.UI $r4, $r6, $r8, $r11, $r15;
        org.scoutant.blokish.GameView $r7, $r9, $r12;
        org.scoutant.blokish.BusyIndicator $r10;
        org.scoutant.blokish.model.AI $r13;
        java.lang.Integer $r14;
        org.scoutant.blokish.model.Move $r16;

        r0 := @this: org.scoutant.blokish.UI$AITask;
        r1 := @parameter0: java.lang.Integer[];
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21823, 32609, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$AITask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 589);
        $r2 = <org.scoutant.blokish.UI$AITask: boolean[][] $VRc>;
        _sym_tmp_13 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45612, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$AITask: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45612, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 590);
        $r4 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21820, null, null);
        staticinvoke <org.scoutant.blokish.UI: org.scoutant.blokish.UI$AITask access$202(org.scoutant.blokish.UI,org.scoutant.blokish.UI$AITask)>($r4, r0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 590);
        $r6 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_4 = $r6.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 591);
        $r7 = $r6.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        $r7.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression thinking$sym> = null;
        _sym_tmp_5 = $r7.<org.scoutant.blokish.GameView: int thinking$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 512);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r7.<org.scoutant.blokish.GameView: int thinking$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(512);
        $r7.<org.scoutant.blokish.GameView: boolean thinking> = 1;
        _sym_tmp_6 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 590);
        $r8 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_7 = $r8.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 591);
        $r9 = $r8.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_8 = $r9.<org.scoutant.blokish.GameView: int indicator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 522);
        $r10 = $r9.<org.scoutant.blokish.GameView: org.scoutant.blokish.BusyIndicator indicator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(107, null);
        virtualinvoke $r10.<org.scoutant.blokish.BusyIndicator: void show()>();
        _sym_tmp_9 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 590);
        $r11 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_10 = $r11.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 591);
        $r12 = $r11.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_11 = $r12.<org.scoutant.blokish.GameView: int ai$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 509);
        $r13 = $r12.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.AI ai>;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>(r1, 0);
        $r14 = r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        $i0 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        _sym_tmp_12 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 590);
        $r15 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21821, null);
        $i1 = staticinvoke <org.scoutant.blokish.UI: int access$300(org.scoutant.blokish.UI)>($r15);
        $i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21821);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21822, null, $i0$sym, $i1$sym);
        $r16 = virtualinvoke $r13.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Move think(int,int)>($i0, $i1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return $r16;
    }

    protected void onPostExecute(org.scoutant.blokish.model.Move)
    {
        acteve.symbolic.integer.Expression _sym_tmp_54, $i8$sym, $z5$sym, $z4$sym, $z3$sym, $i6$sym, $z2$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, $i1$sym, $i0$sym, $z1$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_53, _sym_tmp_52, _sym_tmp_51, _sym_tmp_50, _sym_tmp_49, _sym_tmp_48, _sym_tmp_47, _sym_tmp_46, _sym_tmp_45, _sym_tmp_44, _sym_tmp_43, _sym_tmp_42, _sym_tmp_41, _sym_tmp_40, _sym_tmp_39, _sym_tmp_38, _sym_tmp_37, _sym_tmp_36, _sym_tmp_35, _sym_tmp_34, _sym_tmp_33, _sym_tmp_32, _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        org.scoutant.blokish.UI$AITask r0, $r17, $r54;
        org.scoutant.blokish.model.Move r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.UI $r4, $r6, $r8, $r10, $r13, $r15, $r16, $r18, $r20, $r23, $r24, $r27, $r28, $r30, $r32, $r33, $r36, $r39, $r40, $r45, $r50, $r53, $r55, $r57;
        android.os.Vibrator $r5, $r9;
        org.scoutant.blokish.GameView $r7, $r11, $r14, $r25, $r29, $r31, $r34, $r41, $r46, $r51;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.scoutant.blokish.model.Game $r12, $r47, $r52;
        java.lang.Integer[] $r19, $r56;
        java.lang.Integer $r21, $r58;
        org.scoutant.blokish.BusyIndicator $r26;
        org.scoutant.blokish.UI$CheckTask $r35;
        java.lang.Void[] $r37;
        java.lang.String $r42, $r49;
        java.lang.StringBuilder $r43, $r44, $r48;

        r0 := @this: org.scoutant.blokish.UI$AITask;
        r1 := @parameter0: org.scoutant.blokish.model.Move;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21828, 32610, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$AITask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 589);
        $r2 = <org.scoutant.blokish.UI$AITask: boolean[][] $VRc>;
        _sym_tmp_54 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45613, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$AITask: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45613, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 2);
        r3 = $r2[2];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 590);
        $r4 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21824, null);
        $r5 = staticinvoke <org.scoutant.blokish.UI: android.os.Vibrator access$400(org.scoutant.blokish.UI)>($r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_54 = null;
        if $r5 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45614, 0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 590);
        $r6 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_4 = $r6.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 591);
        $r7 = $r6.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        $z0$sym = $r7.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression redOver$sym>;
        _sym_tmp_5 = $r7.<org.scoutant.blokish.GameView: int redOver$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 511);
        $z0 = $r7.<org.scoutant.blokish.GameView: boolean redOver>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_54 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45615, 0);
        _sym_tmp_6 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 590);
        $r8 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21824, null);
        $r9 = staticinvoke <org.scoutant.blokish.UI: android.os.Vibrator access$400(org.scoutant.blokish.UI)>($r8);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1824, null, null);
        virtualinvoke $r9.<android.os.Vibrator: void vibrate(long)>(15L);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45614, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45615, 1);
        goto label4;

     label4:
        _sym_tmp_7 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 590);
        $r10 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_8 = $r10.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 591);
        $r11 = $r10.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_9 = $r11.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 467);
        $r12 = $r11.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21825, null);
        $z1 = virtualinvoke $r12.<org.scoutant.blokish.model.Game: boolean over()>();
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21825);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_54 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45616, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21826, null);
        specialinvoke r0.<org.scoutant.blokish.UI$AITask: void displayWinnerDialog()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        return;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45616, 1);
        goto label6;

     label6:
        _sym_tmp_10 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 590);
        $r13 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_11 = $r13.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 591);
        $r14 = $r13.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21786, null, null, null);
        virtualinvoke $r14.<org.scoutant.blokish.GameView: void play(org.scoutant.blokish.model.Move,boolean)>(r1, 1);
        _sym_tmp_12 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 590);
        $r15 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        $i0$sym = $r15.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_13 = $r15.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 476);
        $i0 = $r15.<org.scoutant.blokish.UI: int turn>;
        $i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 1);
        $i1 = $i0 + 1;
        $r15.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym> = $i1$sym;
        _sym_tmp_14 = $r15.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_14, 476);
        _sym_tmp_14 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r15.<org.scoutant.blokish.UI: int turn$a3tid> = _sym_tmp_14;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(476);
        $r15.<org.scoutant.blokish.UI: int turn> = $i1;
        _sym_tmp_15 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 590);
        $r16 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        $i2$sym = $r16.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_16 = $r16.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 476);
        $i2 = $r16.<org.scoutant.blokish.UI: int turn>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        _sym_tmp_54 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, null, $i2, 4);
        if $i2 >= 4 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45617, 0);
        $r17 = new org.scoutant.blokish.UI$AITask;
        _sym_tmp_17 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 590);
        $r18 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21818, null, null);
        specialinvoke $r17.<org.scoutant.blokish.UI$AITask: void <init>(org.scoutant.blokish.UI)>($r18);
        $r19 = newarray (java.lang.Integer)[1];
        _sym_tmp_18 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 590);
        $r20 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        $i3$sym = $r20.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_19 = $r20.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 476);
        $i3 = $r20.<org.scoutant.blokish.UI: int turn>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5, $i3$sym);
        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r19, 0);
        $r19[0] = $r21;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(14710, null, null);
        virtualinvoke $r17.<org.scoutant.blokish.UI$AITask: android.os.AsyncTask execute(java.lang.Object[])>($r19);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45617, 1);
        goto label8;

     label8:
        _sym_tmp_20 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 590);
        $r23 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        $i4$sym = $r23.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_21 = $r23.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 476);
        $i4 = $r23.<org.scoutant.blokish.UI: int turn>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        _sym_tmp_54 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, null, $i4, 4);
        if $i4 != 4 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45618, 0);
        _sym_tmp_22 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 590);
        $r24 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_23 = $r24.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 591);
        $r25 = $r24.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_24 = $r25.<org.scoutant.blokish.GameView: int indicator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 522);
        $r26 = $r25.<org.scoutant.blokish.GameView: org.scoutant.blokish.BusyIndicator indicator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2210, null);
        virtualinvoke $r26.<org.scoutant.blokish.BusyIndicator: void hide()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45618, 1);
        goto label10;

     label10:
        _sym_tmp_25 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 590);
        $r27 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        $i5$sym = $r27.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_26 = $r27.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 476);
        $i5 = $r27.<org.scoutant.blokish.UI: int turn>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        _sym_tmp_54 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 4);
        if $i5 != 4 goto label11;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45619, 0);
        _sym_tmp_27 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 590);
        $r28 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_28 = $r28.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_28, 591);
        $r29 = $r28.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        $z2$sym = $r29.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression redOver$sym>;
        _sym_tmp_29 = $r29.<org.scoutant.blokish.GameView: int redOver$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 511);
        $z2 = $r29.<org.scoutant.blokish.GameView: boolean redOver>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        _sym_tmp_54 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 != 0 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45620, 0);
        _sym_tmp_30 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 590);
        $r30 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_31 = $r30.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_31, 591);
        $r31 = $r30.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        $r31.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression thinking$sym> = null;
        _sym_tmp_32 = $r31.<org.scoutant.blokish.GameView: int thinking$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_32, 512);
        _sym_tmp_32 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r31.<org.scoutant.blokish.GameView: int thinking$a3tid> = _sym_tmp_32;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(512);
        $r31.<org.scoutant.blokish.GameView: boolean thinking> = 0;
        _sym_tmp_33 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_33, 590);
        $r32 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        $r32.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym> = null;
        _sym_tmp_34 = $r32.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_34, 476);
        _sym_tmp_34 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r32.<org.scoutant.blokish.UI: int turn$a3tid> = _sym_tmp_34;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(476);
        $r32.<org.scoutant.blokish.UI: int turn> = 0;
        _sym_tmp_35 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_35, 590);
        $r33 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_36 = $r33.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_36, 591);
        $r34 = $r33.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21757, null, null);
        virtualinvoke $r34.<org.scoutant.blokish.GameView: void showPieces(int)>(0);
        $r35 = new org.scoutant.blokish.UI$CheckTask;
        _sym_tmp_37 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_37, 590);
        $r36 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21827, null, null, null);
        specialinvoke $r35.<org.scoutant.blokish.UI$CheckTask: void <init>(org.scoutant.blokish.UI,org.scoutant.blokish.UI$1)>($r36, null);
        $r37 = newarray (java.lang.Void)[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(14710, null, null);
        virtualinvoke $r35.<org.scoutant.blokish.UI$CheckTask: android.os.AsyncTask execute(java.lang.Object[])>($r37);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;
        goto label13;

     label11:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45619, 1);
        goto label13;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45620, 1);
        goto label13;

     label13:
        _sym_tmp_38 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_38, 590);
        $r39 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        $i6$sym = $r39.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_39 = $r39.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_39, 476);
        $i6 = $r39.<org.scoutant.blokish.UI: int turn>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;
        _sym_tmp_54 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i6$sym, null, $i6, 4);
        if $i6 != 4 goto label16;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45621, 0);
        _sym_tmp_40 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_40, 590);
        $r40 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_41 = $r40.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_41, 591);
        $r41 = $r40.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        $z3$sym = $r41.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression redOver$sym>;
        _sym_tmp_42 = $r41.<org.scoutant.blokish.GameView: int redOver$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_42, 511);
        $z3 = $r41.<org.scoutant.blokish.GameView: boolean redOver>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 13);
        r3[13] = 1;
        _sym_tmp_54 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 == 0 goto label17;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45622, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(15847);
        $r42 = staticinvoke <org.scoutant.blokish.UI: java.lang.String access$600()>();
        $r43 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Red is dead. game.over ? ");
        _sym_tmp_43 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_43, 590);
        $r45 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_44 = $r45.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_44, 591);
        $r46 = $r45.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_45 = $r46.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_45, 467);
        $r47 = $r46.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21825, null);
        $z4 = virtualinvoke $r47.<org.scoutant.blokish.model.Game: boolean over()>();
        $z4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21825);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1993, null, $z4$sym);
        $r48 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r42, $r49);
        _sym_tmp_46 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_46, 590);
        $r50 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_47 = $r50.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_47, 591);
        $r51 = $r50.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_48 = $r51.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_48, 467);
        $r52 = $r51.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21825, null);
        $z5 = virtualinvoke $r52.<org.scoutant.blokish.model.Game: boolean over()>();
        $z5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21825);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 14);
        r3[14] = 1;
        _sym_tmp_54 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z5$sym, null, $z5, 0);
        if $z5 == 0 goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45623, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21826, null);
        specialinvoke r0.<org.scoutant.blokish.UI$AITask: void displayWinnerDialog()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 15);
        r3[15] = 1;
        goto label18;

        goto label15;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45623, 1);
        goto label15;

     label15:
        _sym_tmp_49 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_49, 590);
        $r53 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        $r53.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym> = null;
        _sym_tmp_50 = $r53.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_50, 476);
        _sym_tmp_50 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r53.<org.scoutant.blokish.UI: int turn$a3tid> = _sym_tmp_50;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(476);
        $r53.<org.scoutant.blokish.UI: int turn> = 1;
        $r54 = new org.scoutant.blokish.UI$AITask;
        _sym_tmp_51 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_51, 590);
        $r55 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21818, null, null);
        specialinvoke $r54.<org.scoutant.blokish.UI$AITask: void <init>(org.scoutant.blokish.UI)>($r55);
        $r56 = newarray (java.lang.Integer)[1];
        _sym_tmp_52 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_52, 590);
        $r57 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        $i8$sym = $r57.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_53 = $r57.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_53, 476);
        $i8 = $r57.<org.scoutant.blokish.UI: int turn>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5, $i8$sym);
        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r56, 0);
        $r56[0] = $r58;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(14710, null, null);
        virtualinvoke $r54.<org.scoutant.blokish.UI$AITask: android.os.AsyncTask execute(java.lang.Object[])>($r56);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 16);
        r3[16] = 1;
        goto label18;

     label16:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45621, 1);
        goto label18;

        goto label18;

     label17:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_54, 45622, 1);
        goto label18;

     label18:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 17);
        r3[17] = 1;
        return;
    }

    private void displayWinnerDialog()
    {
        acteve.symbolic.integer.Expression _sym_tmp_25, $i6$sym, $i5$sym, $i4$sym, $r44$sym, $i3$sym, $z2$sym, $z1$sym, $r15$sym, z0$sym, i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i3, $i4, $i5, $i6;
        org.scoutant.blokish.UI$AITask r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String r3, $r7, $r23, r28, $r35, $r45, r47, $r53, r56;
        boolean z0, $z1, $z2;
        org.scoutant.blokish.UI $r4, $r8, $r11, $r17, $r21, $r29, $r33, $r39, $r41, $r51, $r61, $r62;
        org.scoutant.blokish.GameView $r5, $r9, $r12, $r42;
        org.scoutant.blokish.BusyIndicator $r6;
        org.scoutant.blokish.model.Game $r10, $r13, $r43;
        java.util.List $r14;
        java.lang.Object $r15;
        org.scoutant.blokish.model.Board $r16;
        android.content.SharedPreferences $r18;
        java.lang.StringBuilder $r19, $r20, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r36, $r37, $r38, $r46, $r48, $r49, $r50, $r54, $r55, $r57, $r58, $r59;
        android.content.res.Resources $r22, $r34, $r40, $r52;
        int[] $r44;
        org.scoutant.blokish.EndGameDialog $r60;

        r0 := @this: org.scoutant.blokish.UI$AITask;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21826, 32611, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI$AITask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 589);
        $r1 = <org.scoutant.blokish.UI$AITask: boolean[][] $VRc>;
        _sym_tmp_25 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45624, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI$AITask: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45624, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 590);
        $r4 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_3 = $r4.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 591);
        $r5 = $r4.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_4 = $r5.<org.scoutant.blokish.GameView: int indicator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 522);
        $r6 = $r5.<org.scoutant.blokish.GameView: org.scoutant.blokish.BusyIndicator indicator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2210, null);
        virtualinvoke $r6.<org.scoutant.blokish.BusyIndicator: void hide()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(15847);
        $r7 = staticinvoke <org.scoutant.blokish.UI: java.lang.String access$600()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r7, "game over !");
        _sym_tmp_5 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 590);
        $r8 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_6 = $r8.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 591);
        $r9 = $r8.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_7 = $r9.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 467);
        $r10 = $r9.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21829, null);
        i0 = virtualinvoke $r10.<org.scoutant.blokish.model.Game: int winner()>();
        i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21829);
        _sym_tmp_8 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 590);
        $r11 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_9 = $r11.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 591);
        $r12 = $r11.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_10 = $r12.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 467);
        $r13 = $r12.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_11 = $r13.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 473);
        $r14 = $r13.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i0);
        $r15$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r16 = (org.scoutant.blokish.model.Board) $r15;
        i1$sym = $r16.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression score$sym>;
        _sym_tmp_12 = $r16.<org.scoutant.blokish.model.Board: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 474);
        i1 = $r16.<org.scoutant.blokish.model.Board: int score>;
        r3 = "";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45625, 0);
        _sym_tmp_13 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 590);
        $r17 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21830, null);
        $r18 = staticinvoke <org.scoutant.blokish.UI: android.content.SharedPreferences access$700(org.scoutant.blokish.UI)>($r17);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        $z1 = interfaceinvoke $r18.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("ai", 1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45626, 0);
        $z2$sym = null;
        $z2 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label5;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45625, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45626, 1);
        goto label4;

     label4:
        $z2$sym = null;
        $z2 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;

     label5:
        z0$sym = $z2$sym;
        z0 = $z2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, null, z0, 0);
        if z0 == 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45627, 0);
        $r19 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        _sym_tmp_14 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 590);
        $r21 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21831, null);
        $r22 = staticinvoke <org.scoutant.blokish.UI: android.content.res.Resources access$800(org.scoutant.blokish.UI)>($r21);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r23 = virtualinvoke $r22.<android.content.res.Resources: java.lang.String getString(int)>(2131230735);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, i1$sym);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
        _sym_tmp_15 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 590);
        $r29 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21832, null);
        $i3 = staticinvoke <org.scoutant.blokish.UI: int access$900(org.scoutant.blokish.UI)>($r29);
        $i3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21832);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 3);
        if $i3 >= 3 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45628, 0);
        $r30 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        _sym_tmp_16 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 590);
        $r33 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21831, null);
        $r34 = staticinvoke <org.scoutant.blokish.UI: android.content.res.Resources access$800(org.scoutant.blokish.UI)>($r33);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r35 = virtualinvoke $r34.<android.content.res.Resources: java.lang.String getString(int)>(2131230736);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r28 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label9;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45627, 1);
        goto label7;

     label7:
        $r37 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        _sym_tmp_17 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 590);
        $r39 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21831, null);
        $r40 = staticinvoke <org.scoutant.blokish.UI: android.content.res.Resources access$800(org.scoutant.blokish.UI)>($r39);
        _sym_tmp_18 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 590);
        $r41 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_19 = $r41.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 591);
        $r42 = $r41.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_20 = $r42.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 467);
        $r43 = $r42.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        $r44$sym = $r43.<org.scoutant.blokish.model.Game: acteve.symbolic.integer.Expression colors$sym>;
        _sym_tmp_21 = $r43.<org.scoutant.blokish.model.Game: int colors$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 592);
        $r44 = $r43.<org.scoutant.blokish.model.Game: int[] colors>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r44$sym, i0$sym, $r44, i0);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r44, i0);
        $i4 = $r44[i0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, $i4$sym);
        $r45 = virtualinvoke $r40.<android.content.res.Resources: java.lang.String getString(int)>($i4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r46 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();
        $r48 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        _sym_tmp_22 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 590);
        $r51 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21831, null);
        $r52 = staticinvoke <org.scoutant.blokish.UI: android.content.res.Resources access$800(org.scoutant.blokish.UI)>($r51);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r53 = virtualinvoke $r52.<android.content.res.Resources: java.lang.String getString(int)>(2131230737);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r54 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();
        $r57 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r56);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, i1$sym);
        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r28 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45628, 1);
        goto label9;

     label9:
        $r60 = new org.scoutant.blokish.EndGameDialog;
        _sym_tmp_23 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 590);
        $r61 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_24 = r0.<org.scoutant.blokish.UI$AITask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 590);
        $r62 = r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21832, null);
        $i5 = staticinvoke <org.scoutant.blokish.UI: int access$900(org.scoutant.blokish.UI)>($r62);
        $i5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21832);
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 1);
        $i6 = $i5 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21774, null, null, z0$sym, null, $i6$sym, i1$sym);
        specialinvoke $r60.<org.scoutant.blokish.EndGameDialog: void <init>(android.content.Context,boolean,java.lang.String,int,int)>($r61, z0, r28, $i6, i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(107, null);
        virtualinvoke $r60.<org.scoutant.blokish.EndGameDialog: void show()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return;
    }

    protected volatile void onPostExecute(java.lang.Object)
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        org.scoutant.blokish.UI$AITask r0;
        java.lang.Object r1;
        org.scoutant.blokish.model.Move $r2;

        r0 := @this: org.scoutant.blokish.UI$AITask;
        r1 := @parameter0: java.lang.Object;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(14704, 32612, 2);
        r1$sym = a3targs$symargs[1];
        $r2 = (org.scoutant.blokish.model.Move) r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21828, null, null);
        virtualinvoke r0.<org.scoutant.blokish.UI$AITask: void onPostExecute(org.scoutant.blokish.model.Move)>($r2);
        return;
    }

    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.UI$AITask r0;
        java.lang.Object[] r1;
        java.lang.Integer[] $r2;
        org.scoutant.blokish.model.Move $r3;

        r0 := @this: org.scoutant.blokish.UI$AITask;
        r1 := @parameter0: java.lang.Object[];
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(14763, 32613, 2);
        $r2 = (java.lang.Integer[]) r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21823, null, null);
        $r3 = virtualinvoke r0.<org.scoutant.blokish.UI$AITask: org.scoutant.blokish.model.Move doInBackground(java.lang.Integer[])>($r2);
        return $r3;
    }

    void <init>(org.scoutant.blokish.UI, org.scoutant.blokish.UI$1)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.UI$AITask r0;
        org.scoutant.blokish.UI r1;
        org.scoutant.blokish.UI$1 r2;
        boolean[][] $r3;
        boolean[] r4;

        r0 := @this: org.scoutant.blokish.UI$AITask;
        r1 := @parameter0: org.scoutant.blokish.UI;
        r2 := @parameter1: org.scoutant.blokish.UI$1;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21827, 32614, 3);
        _sym_tmp_1 = <org.scoutant.blokish.UI$AITask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 589);
        $r3 = <org.scoutant.blokish.UI$AITask: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45629, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.UI$AITask: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45629, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 6);
        r4 = $r3[6];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21818, null, null);
        specialinvoke r0.<org.scoutant.blokish.UI$AITask: void <init>(org.scoutant.blokish.UI)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32615, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.UI$AITask: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 7);
        r1 = $r0[7];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32616, 0);
        $r0 = newmultiarray (boolean)[8][];
        _sym_tmp_1 = <org.scoutant.blokish.UI$AITask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 589);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.UI$AITask: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(589);
        <org.scoutant.blokish.UI$AITask: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[18];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[9];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/UI$AITask", -8557000150557653862L);
        return $r0;
    }
}
class org.scoutant.blokish.UI$CheckTask$1 extends java.lang.Object implements android.content.DialogInterface$OnClickListener
{
    final org.scoutant.blokish.UI$CheckTask this$1;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$1$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    void <init>(org.scoutant.blokish.UI$CheckTask)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI$CheckTask$1 r0;
        org.scoutant.blokish.UI$CheckTask r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.UI$CheckTask$1;
        r1 := @parameter0: org.scoutant.blokish.UI$CheckTask;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21833, 32617, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$CheckTask$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 593);
        $r2 = <org.scoutant.blokish.UI$CheckTask$1: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45630, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$CheckTask$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45630, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$CheckTask$1: int this$1$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 594);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI$CheckTask$1: int this$1$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(594);
        r0.<org.scoutant.blokish.UI$CheckTask$1: org.scoutant.blokish.UI$CheckTask this$1> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void onClick(android.content.DialogInterface, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_14, $r12$sym, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0;
        org.scoutant.blokish.UI$CheckTask$1 r0;
        android.content.DialogInterface r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.UI$CheckTask $r4, $r7, $r15;
        org.scoutant.blokish.UI $r5, $r8, $r16;
        org.scoutant.blokish.GameView $r6, $r9;
        org.scoutant.blokish.model.Game $r10;
        java.util.List $r11;
        java.lang.Object $r12;
        org.scoutant.blokish.model.Board $r13;
        java.lang.String $r14;

        r0 := @this: org.scoutant.blokish.UI$CheckTask$1;
        r1 := @parameter0: android.content.DialogInterface;
        i0 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1528, 32618, 3);
        i0$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.UI$CheckTask$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 593);
        $r2 = <org.scoutant.blokish.UI$CheckTask$1: boolean[][] $VRc>;
        _sym_tmp_14 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_14, 45631, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$CheckTask$1: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_14, 45631, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$CheckTask$1: int this$1$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 594);
        $r4 = r0.<org.scoutant.blokish.UI$CheckTask$1: org.scoutant.blokish.UI$CheckTask this$1>;
        _sym_tmp_3 = $r4.<org.scoutant.blokish.UI$CheckTask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 595);
        $r5 = $r4.<org.scoutant.blokish.UI$CheckTask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_4 = $r5.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 591);
        $r6 = $r5.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        $r6.<org.scoutant.blokish.GameView: acteve.symbolic.integer.Expression redOver$sym> = null;
        _sym_tmp_5 = $r6.<org.scoutant.blokish.GameView: int redOver$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 511);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r6.<org.scoutant.blokish.GameView: int redOver$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(511);
        $r6.<org.scoutant.blokish.GameView: boolean redOver> = 1;
        _sym_tmp_6 = r0.<org.scoutant.blokish.UI$CheckTask$1: int this$1$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 594);
        $r7 = r0.<org.scoutant.blokish.UI$CheckTask$1: org.scoutant.blokish.UI$CheckTask this$1>;
        _sym_tmp_7 = $r7.<org.scoutant.blokish.UI$CheckTask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 595);
        $r8 = $r7.<org.scoutant.blokish.UI$CheckTask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_8 = $r8.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 591);
        $r9 = $r8.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_9 = $r9.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 467);
        $r10 = $r9.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_10 = $r10.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 473);
        $r11 = $r10.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(0);
        $r12$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r13 = (org.scoutant.blokish.model.Board) $r12;
        $r13.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression over$sym> = null;
        _sym_tmp_11 = $r13.<org.scoutant.blokish.model.Board: int over$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 596);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r13.<org.scoutant.blokish.model.Board: int over$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(596);
        $r13.<org.scoutant.blokish.model.Board: boolean over> = 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(15847);
        $r14 = staticinvoke <org.scoutant.blokish.UI: java.lang.String access$600()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r14, "ok!");
        _sym_tmp_12 = r0.<org.scoutant.blokish.UI$CheckTask$1: int this$1$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 594);
        $r15 = r0.<org.scoutant.blokish.UI$CheckTask$1: org.scoutant.blokish.UI$CheckTask this$1>;
        _sym_tmp_13 = $r15.<org.scoutant.blokish.UI$CheckTask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 595);
        $r16 = $r15.<org.scoutant.blokish.UI$CheckTask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21756, null, null);
        virtualinvoke $r16.<org.scoutant.blokish.UI: void think(int)>(1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32619, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.UI$CheckTask$1: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 2);
        r1 = $r0[2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32620, 0);
        $r0 = newmultiarray (boolean)[3][];
        _sym_tmp_1 = <org.scoutant.blokish.UI$CheckTask$1: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 593);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.UI$CheckTask$1: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(593);
        <org.scoutant.blokish.UI$CheckTask$1: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/UI$CheckTask$1", 4320153524499608423L);
        return $r0;
    }
}
class org.scoutant.blokish.UI$CheckTask extends android.os.AsyncTask
{
    final org.scoutant.blokish.UI this$0;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    final int this$0$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    private void <init>(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI$CheckTask r0;
        org.scoutant.blokish.UI r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.UI$CheckTask;
        r1 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21818, 32621, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$CheckTask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 597);
        $r2 = <org.scoutant.blokish.UI$CheckTask: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45632, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$CheckTask: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45632, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$CheckTask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 595);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI$CheckTask: int this$0$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(595);
        r0.<org.scoutant.blokish.UI$CheckTask: org.scoutant.blokish.UI this$0> = r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.os.AsyncTask: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    protected transient java.lang.Boolean doInBackground(java.lang.Void[])
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $z1$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI$CheckTask r0;
        java.lang.Void[] r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.UI $r4;
        org.scoutant.blokish.GameView $r5;
        org.scoutant.blokish.model.AI $r6;
        boolean $z0, $z1;
        java.lang.Boolean $r7;

        r0 := @this: org.scoutant.blokish.UI$CheckTask;
        r1 := @parameter0: java.lang.Void[];
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21835, 32622, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$CheckTask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 597);
        $r2 = <org.scoutant.blokish.UI$CheckTask: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45633, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$CheckTask: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45633, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$CheckTask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 595);
        $r4 = r0.<org.scoutant.blokish.UI$CheckTask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_3 = $r4.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 591);
        $r5 = $r4.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_4 = $r5.<org.scoutant.blokish.GameView: int ai$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 509);
        $r6 = $r5.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.AI ai>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21834, null, null);
        $z0 = virtualinvoke $r6.<org.scoutant.blokish.model.AI: boolean hasMove(int)>(0);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21834);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45634, 0);
        $z1$sym = null;
        $z1 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45634, 1);
        goto label3;

     label3:
        $z1$sym = null;
        $z1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2654, $z1$sym);
        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return $r7;
    }

    protected void onPostExecute(java.lang.Boolean)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI$CheckTask r0;
        java.lang.Boolean r1;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0;
        org.scoutant.blokish.UI $r4, $r9;
        org.scoutant.blokish.GameView $r5;
        org.scoutant.blokish.BusyIndicator $r6;
        java.lang.String $r7;
        android.app.AlertDialog$Builder $r8, $r10, $r11, $r13;
        org.scoutant.blokish.UI$CheckTask$1 $r12;
        android.app.AlertDialog $r14;

        r0 := @this: org.scoutant.blokish.UI$CheckTask;
        r1 := @parameter0: java.lang.Boolean;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21836, 32623, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI$CheckTask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 597);
        $r2 = <org.scoutant.blokish.UI$CheckTask: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45635, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI$CheckTask: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45635, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 2);
        r3 = $r2[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2659, null);
        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2659);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45636, 0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI$CheckTask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 595);
        $r4 = r0.<org.scoutant.blokish.UI$CheckTask: org.scoutant.blokish.UI this$0>;
        _sym_tmp_3 = $r4.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 591);
        $r5 = $r4.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_4 = $r5.<org.scoutant.blokish.GameView: int indicator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 522);
        $r6 = $r5.<org.scoutant.blokish.GameView: org.scoutant.blokish.BusyIndicator indicator>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2210, null);
        virtualinvoke $r6.<org.scoutant.blokish.BusyIndicator: void hide()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(15847);
        $r7 = staticinvoke <org.scoutant.blokish.UI: java.lang.String access$600()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r7, "red over!");
        $r8 = new android.app.AlertDialog$Builder;
        _sym_tmp_5 = r0.<org.scoutant.blokish.UI$CheckTask: int this$0$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 595);
        $r9 = r0.<org.scoutant.blokish.UI$CheckTask: org.scoutant.blokish.UI this$0>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke $r8.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>($r9);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1796, null, null);
        $r10 = virtualinvoke $r8.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>(2131230734);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9632, null, null);
        $r11 = virtualinvoke $r10.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>(0);
        $r12 = new org.scoutant.blokish.UI$CheckTask$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21833, null, null);
        specialinvoke $r12.<org.scoutant.blokish.UI$CheckTask$1: void <init>(org.scoutant.blokish.UI$CheckTask)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5120, null, null, null);
        $r13 = virtualinvoke $r11.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>("Ok", $r12);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1518, null);
        $r14 = virtualinvoke $r13.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(107, null);
        virtualinvoke $r14.<android.app.AlertDialog: void show()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45636, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        return;
    }

    protected volatile void onPostExecute(java.lang.Object)
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        org.scoutant.blokish.UI$CheckTask r0;
        java.lang.Object r1;
        java.lang.Boolean $r2;

        r0 := @this: org.scoutant.blokish.UI$CheckTask;
        r1 := @parameter0: java.lang.Object;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(14704, 32624, 2);
        r1$sym = a3targs$symargs[1];
        $r2 = (java.lang.Boolean) r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21836, null, null);
        virtualinvoke r0.<org.scoutant.blokish.UI$CheckTask: void onPostExecute(java.lang.Boolean)>($r2);
        return;
    }

    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.UI$CheckTask r0;
        java.lang.Object[] r1;
        java.lang.Void[] $r2;
        java.lang.Boolean $r3;

        r0 := @this: org.scoutant.blokish.UI$CheckTask;
        r1 := @parameter0: java.lang.Object[];
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(14763, 32625, 2);
        $r2 = (java.lang.Void[]) r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21835, null, null);
        $r3 = virtualinvoke r0.<org.scoutant.blokish.UI$CheckTask: java.lang.Boolean doInBackground(java.lang.Void[])>($r2);
        return $r3;
    }

    void <init>(org.scoutant.blokish.UI, org.scoutant.blokish.UI$1)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r4$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.UI$CheckTask r0;
        org.scoutant.blokish.UI r1;
        org.scoutant.blokish.UI$1 r2;
        boolean[][] $r3;
        boolean[] r4;

        r0 := @this: org.scoutant.blokish.UI$CheckTask;
        r1 := @parameter0: org.scoutant.blokish.UI;
        r2 := @parameter1: org.scoutant.blokish.UI$1;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21827, 32626, 3);
        _sym_tmp_1 = <org.scoutant.blokish.UI$CheckTask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 597);
        $r3 = <org.scoutant.blokish.UI$CheckTask: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45637, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.UI$CheckTask: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45637, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 5);
        r4 = $r3[5];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21818, null, null);
        specialinvoke r0.<org.scoutant.blokish.UI$CheckTask: void <init>(org.scoutant.blokish.UI)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32627, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.UI$CheckTask: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 6);
        r1 = $r0[6];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32628, 0);
        $r0 = newmultiarray (boolean)[7][];
        _sym_tmp_1 = <org.scoutant.blokish.UI$CheckTask: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 597);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.UI$CheckTask: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(597);
        <org.scoutant.blokish.UI$CheckTask: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[4];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[3];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/UI$CheckTask", -2875745033685299619L);
        return $r0;
    }
}
public class org.scoutant.blokish.UI extends android.app.Activity
{
    private static final int MENU_ITEM_HISTORY;
    private static final int MENU_ITEM_REPLAY;
    private static final int MENU_ITEM_BACK;
    private static final int MENU_ITEM_NEW;
    private static final int MENU_ITEM_THINK;
    private static final int MENU_ITEM_PREFERENCES;
    private static final int MENU_ITEM_HELP;
    private static final int MENU_ITEM_PASS_TURN;
    private static final int MENU_ITEM_FLIP;
    private static java.lang.String tag;
    public org.scoutant.blokish.GameView game;
    public boolean devmode;
    private android.content.SharedPreferences prefs;
    private android.os.Vibrator vibrator;
    private android.content.res.Resources rs;
    public int turn;
    private org.scoutant.blokish.UI$AITask task;
    private static final boolean[][] $VRc;
    private static final acteve.symbolic.integer.Expression MENU_ITEM_HISTORY$sym;
    private static final int MENU_ITEM_HISTORY$a3tid;
    private static final acteve.symbolic.integer.Expression MENU_ITEM_REPLAY$sym;
    private static final int MENU_ITEM_REPLAY$a3tid;
    private static final acteve.symbolic.integer.Expression MENU_ITEM_BACK$sym;
    private static final int MENU_ITEM_BACK$a3tid;
    private static final acteve.symbolic.integer.Expression MENU_ITEM_NEW$sym;
    private static final int MENU_ITEM_NEW$a3tid;
    private static final acteve.symbolic.integer.Expression MENU_ITEM_THINK$sym;
    private static final int MENU_ITEM_THINK$a3tid;
    private static final acteve.symbolic.integer.Expression MENU_ITEM_PREFERENCES$sym;
    private static final int MENU_ITEM_PREFERENCES$a3tid;
    private static final acteve.symbolic.integer.Expression MENU_ITEM_HELP$sym;
    private static final int MENU_ITEM_HELP$a3tid;
    private static final acteve.symbolic.integer.Expression MENU_ITEM_PASS_TURN$sym;
    private static final int MENU_ITEM_PASS_TURN$a3tid;
    private static final acteve.symbolic.integer.Expression MENU_ITEM_FLIP$sym;
    private static final int MENU_ITEM_FLIP$a3tid;
    private static int tag$a3tid;
    public int game$a3tid;
    public acteve.symbolic.integer.Expression devmode$sym;
    public int devmode$a3tid;
    private int prefs$a3tid;
    private int vibrator$a3tid;
    private int rs$a3tid;
    public acteve.symbolic.integer.Expression turn$sym;
    public int turn$a3tid;
    private int task$a3tid;
    private static final int $VRc$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32629, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45638, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45638, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<android.app.Activity: void <init>()>();
        r0.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression devmode$sym> = null;
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int devmode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 599);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int devmode$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(599);
        r0.<org.scoutant.blokish.UI: boolean devmode> = 0;
        r0.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym> = null;
        _sym_tmp_3 = r0.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 476);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int turn$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(476);
        r0.<org.scoutant.blokish.UI: int turn> = 0;
        _sym_tmp_4 = r0.<org.scoutant.blokish.UI: int task$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 600);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int task$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(600);
        r0.<org.scoutant.blokish.UI: org.scoutant.blokish.UI$AITask task> = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void onCreate(android.os.Bundle)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $r5$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        android.os.Bundle r1;
        boolean[][] $r2;
        boolean[] r3;
        android.content.res.Resources $r4;
        java.lang.Object $r5;
        android.os.Vibrator $r6;
        android.content.SharedPreferences $r7;

        r0 := @this: org.scoutant.blokish.UI;
        r1 := @parameter0: android.os.Bundle;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1621, 32630, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r2 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45639, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45639, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1621, null, null);
        specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1196, null);
        $r4 = virtualinvoke r0.<org.scoutant.blokish.UI: android.content.res.Resources getResources()>();
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int rs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 601);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int rs$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(601);
        r0.<org.scoutant.blokish.UI: android.content.res.Resources rs> = $r4;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1622, null, null);
        virtualinvoke r0.<org.scoutant.blokish.UI: boolean requestWindowFeature(int)>(1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(102, null, null);
        $r5 = virtualinvoke r0.<org.scoutant.blokish.UI: java.lang.Object getSystemService(java.lang.String)>("vibrator");
        $r5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(102);
        $r6 = (android.os.Vibrator) $r5;
        _sym_tmp_3 = r0.<org.scoutant.blokish.UI: int vibrator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 602);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int vibrator$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(602);
        r0.<org.scoutant.blokish.UI: android.os.Vibrator vibrator> = $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21837, null);
        specialinvoke r0.<org.scoutant.blokish.UI: void newgame()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(4842, null);
        $r7 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.UI: int prefs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 603);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int prefs$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(603);
        r0.<org.scoutant.blokish.UI: android.content.SharedPreferences prefs> = $r7;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21838, null);
        specialinvoke r0.<org.scoutant.blokish.UI: void source()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21742, null);
        staticinvoke <org.scoutant.blokish.AppRater: void app_launched(android.content.Context)>(r0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    private void newgame()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.GameView $r3, $r4;

        r0 := @this: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21837, 32631, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45640, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45640, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        $r3 = new org.scoutant.blokish.GameView;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke $r3.<org.scoutant.blokish.GameView: void <init>(android.content.Context)>(r0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 591);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int game$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(591);
        r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game> = $r3;
        _sym_tmp_3 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 591);
        $r4 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1717, null, null);
        virtualinvoke r0.<org.scoutant.blokish.UI: void setContentView(android.view.View)>($r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public boolean onPrepareOptionsMenu(android.view.Menu)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $z1$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        android.view.Menu r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.GameView $r4;
        org.scoutant.blokish.PieceUI $r5;
        android.view.MenuItem $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r21;
        boolean $z0, $z1;
        android.content.SharedPreferences $r20;

        r0 := @this: org.scoutant.blokish.UI;
        r1 := @parameter0: android.view.Menu;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(9556, 32632, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r2 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45641, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45641, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 3);
        r3 = $r2[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(76, null);
        interfaceinvoke r1.<android.view.Menu: void clear()>();
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 591);
        $r4 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_3 = $r4.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 463);
        $r5 = $r4.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_6 = null;
        if $r5 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45642, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1221, null, null, null, null, null);
        $r6 = interfaceinvoke r1.<android.view.Menu: android.view.MenuItem add(int,int,int,int)>(0, 15, 0, 2131230729);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1423, null, null);
        interfaceinvoke $r6.<android.view.MenuItem: android.view.MenuItem setIcon(int)>(17301585);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45642, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1221, null, null, null, null, null);
        $r8 = interfaceinvoke r1.<android.view.Menu: android.view.MenuItem add(int,int,int,int)>(0, 102, 0, 2131230728);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1423, null, null);
        interfaceinvoke $r8.<android.view.MenuItem: android.view.MenuItem setIcon(int)>(2130837526);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1221, null, null, null, null, null);
        $r10 = interfaceinvoke r1.<android.view.Menu: android.view.MenuItem add(int,int,int,int)>(0, 5, 0, 2131230733);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1423, null, null);
        interfaceinvoke $r10.<android.view.MenuItem: android.view.MenuItem setIcon(int)>(2130837532);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1221, null, null, null, null, null);
        $r12 = interfaceinvoke r1.<android.view.Menu: android.view.MenuItem add(int,int,int,int)>(0, 9, 0, 2131230722);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1423, null, null);
        interfaceinvoke $r12.<android.view.MenuItem: android.view.MenuItem setIcon(int)>(2130837525);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1221, null, null, null, null, null);
        $r14 = interfaceinvoke r1.<android.view.Menu: android.view.MenuItem add(int,int,int,int)>(0, -1, 0, 2131230723);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1423, null, null);
        interfaceinvoke $r14.<android.view.MenuItem: android.view.MenuItem setIcon(int)>(2130837529);
        $z0$sym = r0.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression devmode$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.UI: int devmode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 599);
        $z0 = r0.<org.scoutant.blokish.UI: boolean devmode>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45643, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1220, null, null, null, null, null);
        $r16 = interfaceinvoke r1.<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>(0, 10, 0, "AI");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1423, null, null);
        interfaceinvoke $r16.<android.view.MenuItem: android.view.MenuItem setIcon(int)>(17301570);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1220, null, null, null, null, null);
        $r18 = interfaceinvoke r1.<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>(0, 99, 0, "hist");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1423, null, null);
        interfaceinvoke $r18.<android.view.MenuItem: android.view.MenuItem setIcon(int)>(17301578);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45643, 1);
        goto label5;

     label5:
        _sym_tmp_5 = r0.<org.scoutant.blokish.UI: int prefs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 603);
        $r20 = r0.<org.scoutant.blokish.UI: android.content.SharedPreferences prefs>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        $z1 = interfaceinvoke $r20.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("ai", 1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 != 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45644, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1221, null, null, null, null, null);
        $r21 = interfaceinvoke r1.<android.view.Menu: android.view.MenuItem add(int,int,int,int)>(0, 12, 0, 2131230730);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1423, null, null);
        interfaceinvoke $r21.<android.view.MenuItem: android.view.MenuItem setIcon(int)>(2130837522);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45644, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(9556, null);
        return 1;
    }

    public boolean onOptionsItemSelected(android.view.MenuItem)
    {
        acteve.symbolic.integer.Expression _sym_tmp_25, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i8$sym, $i6$sym, $i5$sym, $i3$sym, $i2$sym, $i1$sym, i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2, $i3, $i5, $i6, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.scoutant.blokish.UI r0;
        android.view.MenuItem r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.GameView r4, $r10, $r21, $r24, $r33, $r48, $r49, $r50;
        android.content.Intent $r5, $r6;
        java.lang.String $r7, $r13, $r14, $r20, $r28, $r32, $r37, $r40;
        java.lang.StringBuilder $r8, $r9, $r12, $r15, $r16, $r19, $r29, $r30, $r31, $r35, $r38, $r39;
        org.scoutant.blokish.model.Game $r11, $r17, $r22, $r25;
        java.util.List $r18, $r23, r26, r27;
        android.app.AlertDialog$Builder $r34, $r41, $r42, $r44, $r46;
        android.content.res.Resources $r36;
        org.scoutant.blokish.UI$2 $r43;
        org.scoutant.blokish.UI$1 $r45;
        android.app.AlertDialog $r47;
        org.scoutant.blokish.PieceUI r51;

        r0 := @this: org.scoutant.blokish.UI;
        r1 := @parameter0: android.view.MenuItem;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(9559, 32633, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r2 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_25 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45645, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45645, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 4);
        r3 = $r2[4];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9559, null, null);
        specialinvoke r0.<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1259, null);
        $i1 = interfaceinvoke r1.<android.view.MenuItem: int getItemId()>();
        $i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1259);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, null, $i1, 9);
        if $i1 != 9 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45646, 0);
        $r5 = new android.content.Intent;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9129, null, null, null);
        specialinvoke $r5.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "org/scoutant/blokish/Help");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1404, null, null);
        virtualinvoke r0.<org.scoutant.blokish.UI: void startActivity(android.content.Intent)>($r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45646, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1259, null);
        $i2 = interfaceinvoke r1.<android.view.MenuItem: int getItemId()>();
        $i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1259);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, null, $i2, -1);
        if $i2 != -1 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45647, 0);
        $r6 = new android.content.Intent;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9129, null, null, null);
        specialinvoke $r6.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "org/scoutant/blokish/Settings");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1404, null, null);
        virtualinvoke r0.<org.scoutant.blokish.UI: void startActivity(android.content.Intent)>($r6);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45647, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1259, null);
        $i3 = interfaceinvoke r1.<android.view.MenuItem: int getItemId()>();
        $i3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1259);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 99);
        if $i3 != 99 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45648, 0);
        _sym_tmp_2 = <org.scoutant.blokish.UI: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 604);
        $r7 = <org.scoutant.blokish.UI: java.lang.String tag>;
        $r8 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        _sym_tmp_3 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 591);
        $r10 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_4 = $r10.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 467);
        $r11 = $r10.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r7, $r13);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45648, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1259, null);
        $i5 = interfaceinvoke r1.<android.view.MenuItem: int getItemId()>();
        $i5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1259);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 101);
        if $i5 != 101 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45649, 0);
        _sym_tmp_5 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 591);
        r4 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21837, null);
        specialinvoke r0.<org.scoutant.blokish.UI: void newgame()>();
        _sym_tmp_6 = <org.scoutant.blokish.UI: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 604);
        $r14 = <org.scoutant.blokish.UI: java.lang.String tag>;
        $r15 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("replay # moves : ");
        _sym_tmp_7 = r4.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 467);
        $r17 = r4.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_8 = $r17.<org.scoutant.blokish.model.Game: int moves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 605);
        $r18 = $r17.<org.scoutant.blokish.model.Game: java.util.List moves>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i6 = interfaceinvoke $r18.<java.util.List: int size()>();
        $i6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i6$sym);
        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r14, $r20);
        _sym_tmp_9 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 591);
        $r21 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_10 = r4.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 467);
        $r22 = r4.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_11 = $r22.<org.scoutant.blokish.model.Game: int moves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 605);
        $r23 = $r22.<org.scoutant.blokish.model.Game: java.util.List moves>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21793, null, null);
        virtualinvoke $r21.<org.scoutant.blokish.GameView: boolean replay(java.util.List)>($r23);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45649, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1259, null);
        $i8 = interfaceinvoke r1.<android.view.MenuItem: int getItemId()>();
        $i8$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1259);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, null, $i8, 102);
        if $i8 != 102 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45650, 0);
        _sym_tmp_12 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 591);
        $r24 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_13 = $r24.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 467);
        $r25 = $r24.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_14 = $r25.<org.scoutant.blokish.model.Game: int moves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 605);
        r26 = $r25.<org.scoutant.blokish.model.Game: java.util.List moves>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        i0 = interfaceinvoke r26.<java.util.List: int size()>();
        i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 4);
        if i0 < 4 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45651, 0);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, -4);
        i0 = i0 + -4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45651, 1);
        goto label11;

     label11:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(16820, null, null, i0$sym);
        r27 = interfaceinvoke r26.<java.util.List: java.util.List subList(int,int)>(0, i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21837, null);
        specialinvoke r0.<org.scoutant.blokish.UI: void newgame()>();
        _sym_tmp_15 = <org.scoutant.blokish.UI: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 604);
        $r28 = <org.scoutant.blokish.UI: java.lang.String tag>;
        $r29 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("replay # moves : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, i0$sym);
        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1536, null, null);
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r28, $r32);
        _sym_tmp_16 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 591);
        $r33 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21793, null, null);
        virtualinvoke $r33.<org.scoutant.blokish.GameView: boolean replay(java.util.List)>(r27);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;
        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45650, 1);
        goto label13;

     label13:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1259, null);
        $i10 = interfaceinvoke r1.<android.view.MenuItem: int getItemId()>();
        $i10$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1259);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, null, $i10, 5);
        if $i10 != 5 goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45652, 0);
        $r34 = new android.app.AlertDialog$Builder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke $r34.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>(r0);
        $r35 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();
        _sym_tmp_17 = r0.<org.scoutant.blokish.UI: int rs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 601);
        $r36 = r0.<org.scoutant.blokish.UI: android.content.res.Resources rs>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(276, null, null);
        $r37 = virtualinvoke $r36.<android.content.res.Resources: java.lang.String getString(int)>(2131230733);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5119, null, null);
        $r41 = virtualinvoke $r34.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>($r40);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9632, null, null);
        $r42 = virtualinvoke $r41.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>(0);
        $r43 = new org.scoutant.blokish.UI$2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21818, null, null);
        specialinvoke $r43.<org.scoutant.blokish.UI$2: void <init>(org.scoutant.blokish.UI)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1797, null, null, null);
        $r44 = virtualinvoke $r42.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>(2131230720, $r43);
        $r45 = new org.scoutant.blokish.UI$1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21818, null, null);
        specialinvoke $r45.<org.scoutant.blokish.UI$1: void <init>(org.scoutant.blokish.UI)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1798, null, null, null);
        $r46 = virtualinvoke $r44.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>(2131230721, $r45);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1518, null);
        $r47 = virtualinvoke $r46.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(107, null);
        virtualinvoke $r47.<android.app.AlertDialog: void show()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 13);
        r3[13] = 1;
        goto label15;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45652, 1);
        goto label15;

     label15:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1259, null);
        $i11 = interfaceinvoke r1.<android.view.MenuItem: int getItemId()>();
        $i11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1259);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 14);
        r3[14] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, null, $i11, 10);
        if $i11 != 10 goto label16;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45653, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21756, null, null);
        virtualinvoke r0.<org.scoutant.blokish.UI: void think(int)>(0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 15);
        r3[15] = 1;
        goto label17;

     label16:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45653, 1);
        goto label17;

     label17:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1259, null);
        $i12 = interfaceinvoke r1.<android.view.MenuItem: int getItemId()>();
        $i12$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1259);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 16);
        r3[16] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i12$sym, null, $i12, 12);
        if $i12 != 12 goto label18;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45654, 0);
        $i13$sym = r0.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_18 = r0.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 476);
        $i13 = r0.<org.scoutant.blokish.UI: int turn>;
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i13$sym, null, $i13, 1);
        $i14 = $i13 + 1;
        $i15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, null, $i14, 4);
        $i15 = $i14 % 4;
        r0.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym> = $i15$sym;
        _sym_tmp_19 = r0.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_19, 476);
        _sym_tmp_19 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int turn$a3tid> = _sym_tmp_19;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(476);
        r0.<org.scoutant.blokish.UI: int turn> = $i15;
        _sym_tmp_20 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 591);
        $r48 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        $i16$sym = r0.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym>;
        _sym_tmp_21 = r0.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 476);
        $i16 = r0.<org.scoutant.blokish.UI: int turn>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21757, null, $i16$sym);
        virtualinvoke $r48.<org.scoutant.blokish.GameView: void showPieces(int)>($i16);
        _sym_tmp_22 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 591);
        $r49 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2113, null);
        virtualinvoke $r49.<org.scoutant.blokish.GameView: void invalidate()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 17);
        r3[17] = 1;
        goto label19;

     label18:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45654, 1);
        goto label19;

     label19:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1259, null);
        $i17 = interfaceinvoke r1.<android.view.MenuItem: int getItemId()>();
        $i17$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1259);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 18, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 18);
        r3[18] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i17$sym, null, $i17, 15);
        if $i17 != 15 goto label20;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45655, 0);
        _sym_tmp_23 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 591);
        $r50 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_24 = $r50.<org.scoutant.blokish.GameView: int selected$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 463);
        r51 = $r50.<org.scoutant.blokish.GameView: org.scoutant.blokish.PieceUI selected>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 19, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 19);
        r3[19] = 1;
        _sym_tmp_25 = null;
        if r51 == null goto label21;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45656, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21804, null);
        virtualinvoke r51.<org.scoutant.blokish.PieceUI: void flip()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 20, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 20);
        r3[20] = 1;
        goto label22;

     label20:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45655, 1);
        goto label22;

        goto label22;

     label21:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45656, 1);
        goto label22;

     label22:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 21, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 21);
        r3[21] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(9559, null);
        return 0;
    }

    public void think(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.UI$AITask $r3;
        java.lang.Integer[] $r4;
        java.lang.Integer $r5;

        r0 := @this: org.scoutant.blokish.UI;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21756, 32634, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45657, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45657, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 5);
        r2 = $r1[5];
        r0.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression turn$sym> = i0$sym;
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int turn$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 476);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int turn$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(476);
        r0.<org.scoutant.blokish.UI: int turn> = i0;
        $r3 = new org.scoutant.blokish.UI$AITask;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21827, null, null, null);
        specialinvoke $r3.<org.scoutant.blokish.UI$AITask: void <init>(org.scoutant.blokish.UI,org.scoutant.blokish.UI$1)>(r0, null);
        $r4 = newarray (java.lang.Integer)[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5, i0$sym);
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 0);
        $r4[0] = $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(14710, null, null);
        virtualinvoke $r3.<org.scoutant.blokish.UI$AITask: android.os.AsyncTask execute(java.lang.Object[])>($r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    private int findRequestedLevel()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String r3;
        android.content.SharedPreferences $r4;
        java.lang.Integer $r5;

        r0 := @this: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21839, 32635, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45658, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45658, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 6);
        r2 = $r1[6];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int prefs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 603);
        $r4 = r0.<org.scoutant.blokish.UI: android.content.SharedPreferences prefs>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2699, null, null, null);
        r3 = interfaceinvoke $r4.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("aiLevel", "0");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(9787, null);
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21839, $i0$sym);
        return $i0;
    }

    private int findLevel()
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $i2$sym, $i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String r3;
        android.content.SharedPreferences $r4;
        java.lang.Integer $r5;
        org.scoutant.blokish.GameView $r6;
        org.scoutant.blokish.model.AI $r7;

        r0 := @this: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21840, 32636, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45659, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45659, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 7);
        r2 = $r1[7];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int prefs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 603);
        $r4 = r0.<org.scoutant.blokish.UI: android.content.SharedPreferences prefs>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2699, null, null, null);
        r3 = interfaceinvoke $r4.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("aiLevel", "0");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(9787, null);
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();
        i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 < 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45660, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 3);
        if i0 <= 3 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45661, 0);
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45660, 1);
        goto label3;

     label3:
        i0$sym = null;
        i0 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45661, 1);
        goto label5;

     label5:
        _sym_tmp_3 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 591);
        $r6 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_4 = $r6.<org.scoutant.blokish.GameView: int ai$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 509);
        $r7 = $r6.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.AI ai>;
        $i1$sym = $r7.<org.scoutant.blokish.model.AI: acteve.symbolic.integer.Expression adaptedLevel$sym>;
        _sym_tmp_5 = $r7.<org.scoutant.blokish.model.AI: int adaptedLevel$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 606);
        $i1 = $r7.<org.scoutant.blokish.model.AI: int adaptedLevel>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1439, i0$sym, $i1$sym);
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);
        $i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1439);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21840, $i2$sym);
        return $i2;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $z3$sym, $z2$sym, $z1$sym, $z0$sym, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0;
        org.scoutant.blokish.UI r0;
        android.view.KeyEvent r1;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0, $z1, $z2, $z3;
        android.content.SharedPreferences $r5;
        android.app.AlertDialog$Builder $r6, $r7, $r8, $r10, $r12;
        org.scoutant.blokish.UI$4 $r9;
        org.scoutant.blokish.UI$3 $r11;
        android.app.AlertDialog $r13;

        r0 := @this: org.scoutant.blokish.UI;
        i0 := @parameter0: int;
        r1 := @parameter1: android.view.KeyEvent;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1712, 32637, 3);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r2 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45662, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45662, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 8);
        r3 = $r2[8];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 84);
        if i0 != 84 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45663, 0);
        $z0$sym = r0.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression devmode$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int devmode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 599);
        $z0 = r0.<org.scoutant.blokish.UI: boolean devmode>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45664, 0);
        $z1$sym = null;
        $z1 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45664, 1);
        goto label3;

     label3:
        $z1$sym = null;
        $z1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;

     label4:
        r0.<org.scoutant.blokish.UI: acteve.symbolic.integer.Expression devmode$sym> = $z1$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.UI: int devmode$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 599);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int devmode$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(599);
        r0.<org.scoutant.blokish.UI: boolean devmode> = $z1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(1712, null);
        return 1;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45663, 1);
        goto label6;

     label6:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 4);
        if i0 != 4 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45665, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.UI: int prefs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 603);
        $r5 = r0.<org.scoutant.blokish.UI: android.content.SharedPreferences prefs>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2688, null, null, null);
        $z2 = interfaceinvoke $r5.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("popupOnExit", 1);
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2688);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 != 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45666, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1658, null);
        virtualinvoke r0.<org.scoutant.blokish.UI: void finish()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        goto label10;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45666, 1);
        goto label8;

     label8:
        $r6 = new android.app.AlertDialog$Builder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(274, null, null);
        specialinvoke $r6.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1796, null, null);
        $r7 = virtualinvoke $r6.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>(2131230731);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9632, null, null);
        $r8 = virtualinvoke $r7.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>(0);
        $r9 = new org.scoutant.blokish.UI$4;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21818, null, null);
        specialinvoke $r9.<org.scoutant.blokish.UI$4: void <init>(org.scoutant.blokish.UI)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1797, null, null, null);
        $r10 = virtualinvoke $r8.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>(2131230720, $r9);
        $r11 = new org.scoutant.blokish.UI$3;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21818, null, null);
        specialinvoke $r11.<org.scoutant.blokish.UI$3: void <init>(org.scoutant.blokish.UI)>(r0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1798, null, null, null);
        $r12 = virtualinvoke $r10.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>(2131230721, $r11);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1518, null);
        $r13 = virtualinvoke $r12.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(107, null);
        virtualinvoke $r13.<android.app.AlertDialog: void show()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(1712, null);
        return 1;

        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45665, 1);
        goto label10;

     label10:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1712, null, i0$sym, null);
        $z3 = specialinvoke r0.<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>(i0, r1);
        $z3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1712);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(1712, $z3$sym);
        return $z3;
    }

    private void save()
    {
        acteve.symbolic.integer.Expression _sym_tmp_8, $r10$sym, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;
        java.io.FileOutputStream r3;
        java.io.FileNotFoundException r4, $r11;
        org.scoutant.blokish.GameView $r5, $r7;
        org.scoutant.blokish.model.Game $r6, $r8;
        boolean $z0;
        java.lang.String $r9, $r12, $r15;
        byte[] $r10;
        java.io.IOException $r13, r14;

        r0 := @this: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21841, 32638, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_8 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45667, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45667, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8544, null, null, null);
        r3 = virtualinvoke r0.<org.scoutant.blokish.UI: java.io.FileOutputStream openFileOutput(java.lang.String,int)>("moves.txt", 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_8 = null;
        if r3 != null goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45668, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;

     label3:
        return;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45668, 1);
        goto label5;

     label5:
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 591);
        $r5 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_3 = $r5.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 467);
        $r6 = $r5.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21825, null);
        $z0 = virtualinvoke $r6.<org.scoutant.blokish.model.Game: boolean over()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21825);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45669, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 591);
        $r7 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_5 = $r7.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 467);
        $r8 = $r7.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r9 = virtualinvoke $r8.<org.scoutant.blokish.model.Game: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(150, null);
        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes()>();
        $r10$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(150);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(142, null, $r10$sym);
        virtualinvoke r3.<java.io.FileOutputStream: void write(byte[])>($r10);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45669, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(289, null);
        virtualinvoke r3.<java.io.FileOutputStream: void close()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;

     label8:
        goto label11;

     label9:
        $r11 := @caughtexception;
        r4 = $r11;
        _sym_tmp_6 = <org.scoutant.blokish.UI: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 604);
        $r12 = <org.scoutant.blokish.UI: java.lang.String tag>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(110, null, null, null);
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "not found...", r4);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label11;

     label10:
        $r13 := @caughtexception;
        r14 = $r13;
        _sym_tmp_7 = <org.scoutant.blokish.UI: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 604);
        $r15 = <org.scoutant.blokish.UI: java.lang.String tag>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(110, null, null, null);
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r15, "io...", r14);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;

     label11:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        return;

        catch java.io.FileNotFoundException from label2 to label3 with label9;
        catch java.io.FileNotFoundException from label5 to label8 with label9;
        catch java.io.IOException from label2 to label3 with label10;
        catch java.io.IOException from label5 to label8 with label10;
    }

    private void source()
    {
        acteve.symbolic.integer.Expression _sym_tmp_8, $i6$sym, $r24$sym, i5$sym, i4$sym, i3$sym, i2$sym, i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, i4, i5, $i6;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList r3, $r11;
        java.io.FileInputStream r4;
        java.io.InputStreamReader $r5;
        java.io.BufferedReader r6, $r12;
        java.lang.String r7, $r14, $r15, $r17, $r19, $r26, $r27, $r28, $r30, $r40;
        java.lang.String[] r8, r10;
        org.scoutant.blokish.model.Piece r9;
        java.lang.Integer $r16, $r18, $r20, $r29, $r31;
        org.scoutant.blokish.GameView $r21, $r36, $r37;
        org.scoutant.blokish.model.Game $r22;
        java.util.List $r23;
        java.lang.Object $r24;
        org.scoutant.blokish.model.Board $r25;
        org.scoutant.blokish.model.Square $r32;
        org.scoutant.blokish.model.Move $r34, r35;
        java.lang.Exception $r38, r39;

        r0 := @this: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21838, 32639, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_8 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45670, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45670, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 10);
        r2 = $r1[10];
        $r11 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r11.<java.util.ArrayList: void <init>()>();
        r3 = $r11;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(8542, null, null);
        r4 = virtualinvoke r0.<org.scoutant.blokish.UI: java.io.FileInputStream openFileInput(java.lang.String)>("moves.txt");
        $r12 = new java.io.BufferedReader;
        $r5 = new java.io.InputStreamReader;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(3360, null, null);
        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(2664, null, null);
        specialinvoke $r12.<java.io.BufferedReader: void <init>(java.io.Reader)>($r5);
        r6 = $r12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(3171, null);
        virtualinvoke r6.<java.io.BufferedReader: java.lang.String readLine()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(3171, null);
        $r14 = virtualinvoke r6.<java.io.BufferedReader: java.lang.String readLine()>();
        r7 = $r14;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_8 = null;
        if $r14 == null goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45671, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(149, null, null);
        r8 = virtualinvoke r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>(r8, 0);
        $r15 = r8[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(9787, null);
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r15);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        i0 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();
        i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>(r8, 1);
        $r17 = r8[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(9787, null);
        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r17);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        i1 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();
        i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>(r8, 2);
        $r19 = r8[2];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(9787, null);
        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r19);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        i2 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();
        i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 591);
        $r21 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        _sym_tmp_3 = $r21.<org.scoutant.blokish.GameView: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 467);
        $r22 = $r21.<org.scoutant.blokish.GameView: org.scoutant.blokish.model.Game game>;
        _sym_tmp_4 = $r22.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 473);
        $r23 = $r22.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i2$sym);
        $r24 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(i2);
        $r24$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r25 = (org.scoutant.blokish.model.Board) $r24;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>(r8, 3);
        $r26 = r8[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21842, null, null);
        r9 = virtualinvoke $r25.<org.scoutant.blokish.model.Board: org.scoutant.blokish.model.Piece findPieceByType(java.lang.String)>($r26);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(202, null);
        virtualinvoke r9.<org.scoutant.blokish.model.Piece: void reset()>();
        i3$sym = null;
        i3 = 4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label4:
        $i6$sym = null;
        $i6 = lengthof r8;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, $i6$sym, i3, $i6);
        if i3 >= $i6 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45672, 0);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>(r8, i3);
        $r27 = r8[i3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(149, null, null);
        r10 = virtualinvoke $r27.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>(r10, 0);
        $r28 = r10[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(9787, null);
        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r28);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        i4 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();
        i4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>(r10, 1);
        $r30 = r10[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(9787, null);
        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r30);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(217, null);
        i5 = virtualinvoke $r31.<java.lang.Integer: int intValue()>();
        i5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(217);
        $r32 = new org.scoutant.blokish.model.Square;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, i4$sym, i5$sym);
        specialinvoke $r32.<org.scoutant.blokish.model.Square: void <init>(int,int)>(i4, i5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21843, null, null);
        virtualinvoke r9.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(org.scoutant.blokish.model.Square)>($r32);
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 1);
        i3 = i3 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        goto label4;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45672, 1);
        goto label6;

     label6:
        $r34 = new org.scoutant.blokish.model.Move;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21752, null, null, i0$sym, i1$sym);
        specialinvoke $r34.<org.scoutant.blokish.model.Move: void <init>(org.scoutant.blokish.model.Piece,int,int)>(r9, i0, i1);
        r35 = $r34;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r35);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label3;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45671, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21837, null);
        specialinvoke r0.<org.scoutant.blokish.UI: void newgame()>();
        _sym_tmp_5 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 591);
        $r36 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21793, null, null);
        virtualinvoke $r36.<org.scoutant.blokish.GameView: boolean replay(java.util.List)>(r3);
        _sym_tmp_6 = r0.<org.scoutant.blokish.UI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 591);
        $r37 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.GameView game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21790, null);
        virtualinvoke $r37.<org.scoutant.blokish.GameView: void reorderPieces()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;

     label9:
        goto label11;

     label10:
        $r38 := @caughtexception;
        r39 = $r38;
        _sym_tmp_7 = <org.scoutant.blokish.UI: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 604);
        $r40 = <org.scoutant.blokish.UI: java.lang.String tag>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(110, null, null, null);
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r40, "yep error is :", r39);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;

     label11:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return;

        catch java.lang.Exception from label2 to label9 with label10;
    }

    protected void onStop()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.UI$AITask $r3, $r4;
        java.lang.String $r5;

        r0 := @this: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1667, 32640, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45673, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45673, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 11);
        r2 = $r1[11];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int task$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 600);
        $r3 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.UI$AITask task>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_5 = null;
        if $r3 == null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45674, 0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.UI: int task$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 600);
        $r4 = r0.<org.scoutant.blokish.UI: org.scoutant.blokish.UI$AITask task>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(14708, null, null);
        virtualinvoke $r4.<org.scoutant.blokish.UI$AITask: boolean cancel(boolean)>(1);
        _sym_tmp_4 = <org.scoutant.blokish.UI: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 604);
        $r5 = <org.scoutant.blokish.UI: java.lang.String tag>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, "leaving AI, as activity is brough to background");
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45674, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21841, null);
        specialinvoke r0.<org.scoutant.blokish.UI: void save()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(1667, null);
        specialinvoke r0.<android.app.Activity: void onStop()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        return;
    }

    static void access$000(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21819, 32641, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45675, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45675, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 12);
        r2 = $r1[12];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21837, null);
        specialinvoke r0.<org.scoutant.blokish.UI: void newgame()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    static org.scoutant.blokish.UI$AITask access$202(org.scoutant.blokish.UI, org.scoutant.blokish.UI$AITask)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        org.scoutant.blokish.UI$AITask r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @parameter0: org.scoutant.blokish.UI;
        r1 := @parameter1: org.scoutant.blokish.UI$AITask;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21820, 32642, 2);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r2 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45676, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45676, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 13);
        r3 = $r2[13];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int task$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 600);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.UI: int task$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(600);
        r0.<org.scoutant.blokish.UI: org.scoutant.blokish.UI$AITask task> = r1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return r1;
    }

    static int access$300(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, $i0;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21821, 32643, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45677, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45677, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 14);
        r2 = $r1[14];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21840, null);
        $i0 = specialinvoke r0.<org.scoutant.blokish.UI: int findLevel()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21840);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21821, $i0$sym);
        return $i0;
    }

    static android.os.Vibrator access$400(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;
        android.os.Vibrator $r3;

        r0 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21824, 32644, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45678, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45678, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 15);
        r2 = $r1[15];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int vibrator$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 602);
        $r3 = r0.<org.scoutant.blokish.UI: android.os.Vibrator vibrator>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    static java.lang.String access$600()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r1$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        boolean[][] $r0;
        boolean[] r1;
        java.lang.String $r2;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(15847, 32645, 0);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r0 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r0 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45679, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45679, 1);
        goto label1;

     label1:
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 16);
        r1 = $r0[16];
        _sym_tmp_2 = <org.scoutant.blokish.UI: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 604);
        $r2 = <org.scoutant.blokish.UI: java.lang.String tag>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return $r2;
    }

    static android.content.SharedPreferences access$700(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;
        android.content.SharedPreferences $r3;

        r0 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21830, 32646, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45680, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45680, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 17);
        r2 = $r1[17];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int prefs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 603);
        $r3 = r0.<org.scoutant.blokish.UI: android.content.SharedPreferences prefs>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    static android.content.res.Resources access$800(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;
        android.content.res.Resources $r3;

        r0 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21831, 32647, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45681, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45681, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 18);
        r2 = $r1[18];
        _sym_tmp_2 = r0.<org.scoutant.blokish.UI: int rs$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 601);
        $r3 = r0.<org.scoutant.blokish.UI: android.content.res.Resources rs>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    static int access$900(org.scoutant.blokish.UI)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, $i0;
        org.scoutant.blokish.UI r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @parameter0: org.scoutant.blokish.UI;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21832, 32648, 1);
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 598);
        $r1 = <org.scoutant.blokish.UI: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45682, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45682, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 19);
        r2 = $r1[19];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21839, null);
        $i0 = specialinvoke r0.<org.scoutant.blokish.UI: int findRequestedLevel()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21839);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21832, $i0$sym);
        return $i0;
    }

    static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32649, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.UI: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 20);
        r1 = $r0[20];
        _sym_tmp_1 = <org.scoutant.blokish.UI: int tag$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 604);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.UI: int tag$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(604);
        <org.scoutant.blokish.UI: java.lang.String tag> = "activity";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r21$sym, $r20$sym, $r19$sym, $r18$sym, $r17$sym, $r16$sym, $r15$sym, $r14$sym, $r13$sym, $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32650, 0);
        $r0 = newmultiarray (boolean)[21][];
        _sym_tmp_1 = <org.scoutant.blokish.UI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 598);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.UI: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(598);
        <org.scoutant.blokish.UI: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[7];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[22];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[1];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[4];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[10];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[8];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[9];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[3];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        $r13 = newarray (boolean)[1];
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 12);
        $r0[12] = $r13;
        $r14 = newarray (boolean)[1];
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 13);
        $r0[13] = $r14;
        $r15 = newarray (boolean)[1];
        $r15$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 14);
        $r0[14] = $r15;
        $r16 = newarray (boolean)[1];
        $r16$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 15);
        $r0[15] = $r16;
        $r17 = newarray (boolean)[1];
        $r17$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 16);
        $r0[16] = $r17;
        $r18 = newarray (boolean)[1];
        $r18$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 17);
        $r0[17] = $r18;
        $r19 = newarray (boolean)[1];
        $r19$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 18);
        $r0[18] = $r19;
        $r20 = newarray (boolean)[1];
        $r20$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 19);
        $r0[19] = $r20;
        $r21 = newarray (boolean)[1];
        $r21$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 20);
        $r0[20] = $r21;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/UI", -1101881946821659866L);
        return $r0;
    }
}
public class org.scoutant.blokish.model.AI extends java.lang.Object
{
    public static final java.lang.String tag;
    private static final int SIZE_WEIGHT;
    private static final int CENTER_WEIGHT;
    private static final int SEEDS_WEIGHT;
    private static final int ENEMY_SEEDS_WEIGHT;
    private static final int CHAINING_WEIGHT;
    public org.scoutant.blokish.model.Game game;
    private java.util.Random random;
    private int[] maxMoves;
    public int adaptedLevel;
    private int[][] ij;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    public static final int tag$a3tid;
    private static final acteve.symbolic.integer.Expression SIZE_WEIGHT$sym;
    private static final int SIZE_WEIGHT$a3tid;
    private static final acteve.symbolic.integer.Expression CENTER_WEIGHT$sym;
    private static final int CENTER_WEIGHT$a3tid;
    private static final acteve.symbolic.integer.Expression SEEDS_WEIGHT$sym;
    private static final int SEEDS_WEIGHT$a3tid;
    private static final acteve.symbolic.integer.Expression ENEMY_SEEDS_WEIGHT$sym;
    private static final int ENEMY_SEEDS_WEIGHT$a3tid;
    private static final acteve.symbolic.integer.Expression CHAINING_WEIGHT$sym;
    private static final int CHAINING_WEIGHT$a3tid;
    public int game$a3tid;
    private int random$a3tid;
    private acteve.symbolic.integer.Expression maxMoves$sym;
    private int maxMoves$a3tid;
    public acteve.symbolic.integer.Expression adaptedLevel$sym;
    public int adaptedLevel$a3tid;
    private int ij$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(org.scoutant.blokish.model.Game)
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, $r5$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.model.AI r0;
        org.scoutant.blokish.model.Game r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Random $r4;
        int[] $r5;
        int[][] $r6;

        r0 := @this: org.scoutant.blokish.model.AI;
        r1 := @parameter0: org.scoutant.blokish.model.Game;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21776, 32651, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.AI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 607);
        $r2 = <org.scoutant.blokish.model.AI: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45683, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.AI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45683, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r4 = new java.util.Random;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.util.Random: void <init>()>();
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.AI: int random$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 608);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.AI: int random$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(608);
        r0.<org.scoutant.blokish.model.AI: java.util.Random random> = $r4;
        $r5 = newarray (int)[4];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r5$sym, null, null, $r5, 0, 40);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r5, 0);
        $r5[0] = 40;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r5$sym, null, null, $r5, 1, 100);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r5, 1);
        $r5[1] = 100;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r5$sym, null, null, $r5, 2, 250);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r5, 2);
        $r5[2] = 250;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r5$sym, null, null, $r5, 3, 10000);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r5, 3);
        $r5[3] = 10000;
        r0.<org.scoutant.blokish.model.AI: acteve.symbolic.integer.Expression maxMoves$sym> = $r5$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.AI: int maxMoves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 609);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.AI: int maxMoves$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(609);
        r0.<org.scoutant.blokish.model.AI: int[] maxMoves> = $r5;
        r0.<org.scoutant.blokish.model.AI: acteve.symbolic.integer.Expression adaptedLevel$sym> = null;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.AI: int adaptedLevel$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 606);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.AI: int adaptedLevel$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(606);
        r0.<org.scoutant.blokish.model.AI: int adaptedLevel> = 3;
        $r6 = newmultiarray (int)[20][20];
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.AI: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 610);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.AI: int ij$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(610);
        r0.<org.scoutant.blokish.model.AI: int[][] ij> = $r6;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 611);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.AI: int game$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(611);
        r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game> = r1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public boolean hasMove(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_19, $r33$sym, $r27$sym, $z3$sym, $z2$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $r18$sym, $z1$sym, $i8$sym, $i7$sym, $r16$sym, $i6$sym, $r13$sym, $z0$sym, $r11$sym, i5$sym, i4$sym, i3$sym, i2$sym, i1$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.scoutant.blokish.model.AI r0;
        boolean[][] $r1;
        boolean[] r2;
        org.scoutant.blokish.model.Board r3, $r28, $r34;
        java.util.Iterator r4, r7;
        org.scoutant.blokish.model.Square r5, r8;
        org.scoutant.blokish.model.Piece r6;
        org.scoutant.blokish.model.Game $r9, $r19, $r25, $r31;
        java.util.List $r10, $r12, $r14, $r15, $r17, $r26, $r32;
        java.lang.Object $r11, $r13, $r16, $r18, $r27, $r33;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r20, $r21, $r23;
        org.scoutant.blokish.model.Move $r22;
        java.lang.String $r24;

        r0 := @this: org.scoutant.blokish.model.AI;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21834, 32652, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.model.AI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 607);
        $r1 = <org.scoutant.blokish.model.AI: boolean[][] $VRc>;
        _sym_tmp_19 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45684, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.AI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45684, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 611);
        $r9 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        _sym_tmp_3 = $r9.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 473);
        $r10 = $r9.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i0);
        $r11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r3 = (org.scoutant.blokish.model.Board) $r11;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        $r12 = virtualinvoke r3.<org.scoutant.blokish.model.Board: java.util.List seeds()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_19 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label18;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45685, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r13$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Square) $r13;
        i1$sym = null;
        i1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label3:
        _sym_tmp_4 = r3.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 517);
        $r14 = r3.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i6 = interfaceinvoke $r14.<java.util.List: int size()>();
        $i6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_19 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i6$sym, i1, $i6);
        if i1 >= $i6 goto label16;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45686, 0);
        _sym_tmp_5 = r3.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 517);
        $r15 = r3.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i1$sym);
        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i1);
        $r16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r6 = (org.scoutant.blokish.model.Piece) $r16;
        i2$sym = null;
        i2 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;

     label4:
        $i7$sym = r6.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression flips$sym>;
        _sym_tmp_6 = r6.<org.scoutant.blokish.model.Piece: int flips$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 612);
        $i7 = r6.<org.scoutant.blokish.model.Piece: int flips>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_19 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i7$sym, i2, $i7);
        if i2 >= $i7 goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45687, 0);
        i3$sym = null;
        i3 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;

     label5:
        $i8$sym = r6.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression rotations$sym>;
        _sym_tmp_7 = r6.<org.scoutant.blokish.model.Piece: int rotations$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 613);
        $i8 = r6.<org.scoutant.blokish.model.Piece: int rotations>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        _sym_tmp_19 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, $i8$sym, i3, $i8);
        if i3 >= $i8 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45688, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r17 = virtualinvoke r6.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r7 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;

     label6:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        _sym_tmp_19 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45689, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r18 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
        $r18$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r8 = (org.scoutant.blokish.model.Square) $r18;
        $i9$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_8 = r5.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 526);
        $i9 = r5.<org.scoutant.blokish.model.Square: int i>;
        $i10$sym = r8.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_9 = r8.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 526);
        $i10 = r8.<org.scoutant.blokish.model.Square: int i>;
        i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, $i10$sym, $i9, $i10);
        i4 = $i9 - $i10;
        $i11$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_10 = r5.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 527);
        $i11 = r5.<org.scoutant.blokish.model.Square: int j>;
        $i12$sym = r8.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_11 = r8.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 527);
        $i12 = r8.<org.scoutant.blokish.model.Square: int j>;
        i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, $i12$sym, $i11, $i12);
        i5 = $i11 - $i12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21844, null, null, i4$sym, i5$sym);
        $z2 = virtualinvoke r3.<org.scoutant.blokish.model.Board: boolean outside(org.scoutant.blokish.model.Square,int,int)>(r8, i4, i5);
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21844);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 10);
        r2[10] = 1;
        _sym_tmp_19 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 != 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45690, 0);
        _sym_tmp_12 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 611);
        $r19 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21845, null, null, i4$sym, i5$sym);
        $z3 = virtualinvoke $r19.<org.scoutant.blokish.model.Game: boolean fits(org.scoutant.blokish.model.Piece,int,int)>(r6, i4, i5);
        $z3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21845);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 11);
        r2[11] = 1;
        _sym_tmp_19 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 == 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45691, 0);
        $r20 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("possible move : ");
        $r22 = new org.scoutant.blokish.model.Move;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21752, null, null, i4$sym, i5$sym);
        specialinvoke $r22.<org.scoutant.blokish.model.Move: void <init>(org.scoutant.blokish.model.Piece,int,int)>(r6, i4, i5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r24);
        _sym_tmp_13 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 611);
        $r25 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        _sym_tmp_14 = $r25.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 473);
        $r26 = $r25.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(i0);
        $r27$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r28 = (org.scoutant.blokish.model.Board) $r27;
        $r28.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression over$sym> = null;
        _sym_tmp_15 = $r28.<org.scoutant.blokish.model.Board: int over$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_15, 596);
        _sym_tmp_15 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r28.<org.scoutant.blokish.model.Board: int over$a3tid> = _sym_tmp_15;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(596);
        $r28.<org.scoutant.blokish.model.Board: boolean over> = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 12);
        r2[12] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21834, null);
        return 1;

        goto label9;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45690, 1);
        goto label9;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45691, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 13);
        r2[13] = 1;
        goto label6;

        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45689, 1);
        goto label11;

     label11:
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 1);
        i3 = i3 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21808, null, null);
        virtualinvoke r6.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece rotate(int)>(1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 14);
        r2[14] = 1;
        goto label5;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45688, 1);
        goto label13;

     label13:
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21810, null);
        virtualinvoke r6.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece flip()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 15);
        r2[15] = 1;
        goto label4;

        goto label15;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45687, 1);
        goto label15;

     label15:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 16);
        r2[16] = 1;
        goto label3;

        goto label17;

     label16:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45686, 1);
        goto label17;

     label17:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 17);
        r2[17] = 1;
        goto label2;

        goto label19;

     label18:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_19, 45685, 1);
        goto label19;

     label19:
        _sym_tmp_16 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 611);
        $r31 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        _sym_tmp_17 = $r31.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 473);
        $r32 = $r31.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>(i0);
        $r33$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r34 = (org.scoutant.blokish.model.Board) $r33;
        $r34.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression over$sym> = null;
        _sym_tmp_18 = $r34.<org.scoutant.blokish.model.Board: int over$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_18, 596);
        _sym_tmp_18 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r34.<org.scoutant.blokish.model.Board: int over$a3tid> = _sym_tmp_18;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(596);
        $r34.<org.scoutant.blokish.model.Board: boolean over> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 18, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 18);
        r2[18] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21834, null);
        return 0;
    }

    public org.scoutant.blokish.model.Move think(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_18, $r43$sym, $i17$sym, $i16$sym, $i15$sym, $r38$sym, $i14$sym, $i13$sym, $r33$sym, $r31$sym, $i11$sym, $i9$sym, $i7$sym, $r22$sym, i6$sym, $i5$sym, $r16$sym, $z0$sym, $r7$sym, i2$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, $i5, i6, $i7, $i9, $i11, $i13, $i14, $i15, $i16, $i17;
        org.scoutant.blokish.model.AI r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.List r3, $r6, $r9, $r15, $r30;
        org.scoutant.blokish.model.Move r4, $r39;
        org.scoutant.blokish.model.Game $r5, $r14, $r29;
        java.lang.Object $r7, $r16, $r31, $r33, $r38, $r43;
        org.scoutant.blokish.model.Board $r8, $r17, $r32;
        boolean $z0;
        java.lang.StringBuilder $r10, $r11, $r12, $r18, $r19, $r20, $r21, $r23, $r25, $r26, $r27, $r34, $r35, $r36;
        java.lang.String $r13, $r24, $r28, $r37;
        int[] $r22;
        org.scoutant.blokish.model.Piece $r40, $r44, $r45;
        java.util.Random $r42;

        r0 := @this: org.scoutant.blokish.model.AI;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21822, 32653, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.model.AI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 607);
        $r1 = <org.scoutant.blokish.model.AI: boolean[][] $VRc>;
        _sym_tmp_18 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45692, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.AI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45692, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 611);
        $r5 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        _sym_tmp_3 = $r5.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 473);
        $r6 = $r5.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i0);
        $r7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r8 = (org.scoutant.blokish.model.Board) $r7;
        _sym_tmp_4 = $r8.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 517);
        $r9 = $r8.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(755, null);
        $z0 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(755);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_18 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45693, 0);
        $r10 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no more pieces for player : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, i0$sym);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r13);
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 611);
        $r14 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        _sym_tmp_6 = $r14.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 473);
        $r15 = $r14.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i0);
        $r16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r17 = (org.scoutant.blokish.model.Board) $r16;
        $r17.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression over$sym> = null;
        _sym_tmp_7 = $r17.<org.scoutant.blokish.model.Board: int over$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_7, 596);
        _sym_tmp_7 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r17.<org.scoutant.blokish.model.Board: int over$a3tid> = _sym_tmp_7;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(596);
        $r17.<org.scoutant.blokish.model.Board: boolean over> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        return null;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45693, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", "--------------------------------------------------------------------------------");
        $i5$sym = r0.<org.scoutant.blokish.model.AI: acteve.symbolic.integer.Expression adaptedLevel$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.AI: int adaptedLevel$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 606);
        $i5 = r0.<org.scoutant.blokish.model.AI: int adaptedLevel>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1439, i1$sym, $i5$sym);
        i6 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i5);
        i6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1439);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_18 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i6$sym, null, i6, 1);
        if i6 <= 1 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45694, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_18 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        if i0 == 1 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45695, 0);
        i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i6$sym, null, i6, -1);
        i6 = i6 + -1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        goto label6;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45694, 1);
        goto label6;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45695, 1);
        goto label6;

     label6:
        $r18 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thinking for player : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, i0$sym);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", upto # moves : ");
        $r22$sym = r0.<org.scoutant.blokish.model.AI: acteve.symbolic.integer.Expression maxMoves$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.AI: int maxMoves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 609);
        $r22 = r0.<org.scoutant.blokish.model.AI: int[] maxMoves>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r22$sym, i6$sym, $r22, i6);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r22, i6);
        $i7 = $r22[i6];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i7$sym);
        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r24);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21846, null, i0$sym, i6$sym);
        r3 = virtualinvoke r0.<org.scoutant.blokish.model.AI: java.util.List thinkUpToNMoves(int,int)>(i0, i6);
        $r25 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# moves : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i9 = interfaceinvoke r3.<java.util.List: int size()>();
        $i9$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i9$sym);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r28);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i11 = interfaceinvoke r3.<java.util.List: int size()>();
        $i11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_18 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, null, $i11, 0);
        if $i11 != 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45696, 0);
        _sym_tmp_10 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 611);
        $r29 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        _sym_tmp_11 = $r29.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 473);
        $r30 = $r29.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(i0);
        $r31$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r32 = (org.scoutant.blokish.model.Board) $r31;
        $r32.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression over$sym> = null;
        _sym_tmp_12 = $r32.<org.scoutant.blokish.model.Board: int over$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_12, 596);
        _sym_tmp_12 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        $r32.<org.scoutant.blokish.model.Board: int over$a3tid> = _sym_tmp_12;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(596);
        $r32.<org.scoutant.blokish.model.Board: boolean over> = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        return null;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45696, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(3863, null);
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21791, null);
        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r33 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);
        $r33$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r4 = (org.scoutant.blokish.model.Move) $r33;
        $r34 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("best move actually is : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r37);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i13 = interfaceinvoke r3.<java.util.List: int size()>();
        $i13$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        _sym_tmp_18 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i13$sym, null, $i13, 20);
        if $i13 <= 20 goto label16;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45697, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i14 = interfaceinvoke r3.<java.util.List: int size()>();
        $i14$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, null, $i14, 1);
        i2 = $i14 - 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;

     label9:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        _sym_tmp_18 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 2);
        if i2 < 2 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45698, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i2$sym);
        $r38 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i2);
        $r38$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r39 = (org.scoutant.blokish.model.Move) $r38;
        _sym_tmp_13 = $r39.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 472);
        $r40 = $r39.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        $i15$sym = $r40.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym>;
        _sym_tmp_14 = $r40.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 566);
        $i15 = $r40.<org.scoutant.blokish.model.Piece: int count>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 10);
        r2[10] = 1;
        _sym_tmp_18 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i15$sym, null, $i15, 2);
        if $i15 > 2 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45699, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(345, null, i2$sym);
        interfaceinvoke r3.<java.util.List: java.lang.Object remove(int)>(i2);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 11);
        r2[11] = 1;
        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45699, 1);
        goto label11;

     label11:
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, -1);
        i2 = i2 + -1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 12);
        r2[12] = 1;
        goto label9;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45698, 1);
        goto label13;

     label13:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i16 = interfaceinvoke r3.<java.util.List: int size()>();
        $i16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 13);
        r2[13] = 1;
        _sym_tmp_18 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i16$sym, null, $i16, 10);
        if $i16 <= 10 goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45700, 0);
        _sym_tmp_15 = r0.<org.scoutant.blokish.model.AI: int random$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 608);
        $r42 = r0.<org.scoutant.blokish.model.AI: java.util.Random random>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1030, null, null);
        $i17 = virtualinvoke $r42.<java.util.Random: int nextInt(int)>(3);
        $i17$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1030);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i17$sym);
        $r43 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i17);
        $r43$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r4 = (org.scoutant.blokish.model.Move) $r43;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 14);
        r2[14] = 1;
        goto label17;

        goto label15;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45700, 1);
        goto label15;

     label15:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", "keeping best move!");
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 15);
        r2[15] = 1;
        goto label17;

     label16:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_18, 45697, 1);
        goto label17;

     label17:
        _sym_tmp_16 = r4.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 472);
        $r44 = r4.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        _sym_tmp_17 = r4.<org.scoutant.blokish.model.Move: int ghost$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 614);
        $r45 = r4.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece ghost>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21792, null, null);
        virtualinvoke $r44.<org.scoutant.blokish.model.Piece: void reset(org.scoutant.blokish.model.Piece)>($r45);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 16);
        r2[16] = 1;
        return r4;
    }

    protected java.util.List thinkUpToNMoves(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_32, $i57$sym, $r47$sym, $i56$sym, $i55$sym, $i54$sym, $i53$sym, $i52$sym, $i51$sym, $i50$sym, $i49$sym, i48$sym, $i47$sym, i46$sym, $i45$sym, i44$sym, $i43$sym, i42$sym, $i41$sym, $i40$sym, $i39$sym, $i38$sym, $i37$sym, $i36$sym, $i35$sym, $i34$sym, $i33$sym, $i32$sym, $i31$sym, $i30$sym, $z4$sym, $z3$sym, $z2$sym, $i28$sym, $i27$sym, $i26$sym, $i25$sym, $r33$sym, $z1$sym, $i24$sym, $i23$sym, $r31$sym, $i22$sym, $i21$sym, $r28$sym, $r23$sym, $z0$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $r15$sym, i13$sym, i12$sym, i11$sym, i10$sym, i9$sym, i8$sym, i7$sym, i6$sym, i5$sym, i4$sym, l3$sym, i2$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i42, $i43, i44, $i45, i46, $i47, i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57;
        org.scoutant.blokish.model.AI r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList r3, $r12;
        org.scoutant.blokish.model.Board r4;
        long l3;
        java.util.List r5, $r14, $r16, $r22, $r29, $r30, $r32, $r41, $r45, $r46;
        java.util.Iterator r6, r9;
        org.scoutant.blokish.model.Square r7, r10;
        org.scoutant.blokish.model.Piece r8;
        org.scoutant.blokish.model.Move r11, $r35;
        org.scoutant.blokish.model.Game $r13, $r34, $r36, $r42, $r43, $r44;
        java.lang.Object $r15, $r23, $r31, $r33;
        java.lang.StringBuilder $r17, $r18, $r19, $r24, $r25, $r26, $r37, $r38, $r39;
        java.lang.String $r20, $r27, $r40;
        java.util.Date $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        int[] $r28, $r47;

        r0 := @this: org.scoutant.blokish.model.AI;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21846, 32654, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.model.AI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 607);
        $r1 = <org.scoutant.blokish.model.AI: boolean[][] $VRc>;
        _sym_tmp_32 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45701, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.AI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45701, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        $r12 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r12.<java.util.ArrayList: void <init>()>();
        r3 = $r12;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 611);
        $r13 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        _sym_tmp_3 = $r13.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 473);
        $r14 = $r13.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i0);
        $r15$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r4 = (org.scoutant.blokish.model.Board) $r15;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        $r16 = virtualinvoke r4.<org.scoutant.blokish.model.Board: java.util.List seeds()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        i2 = interfaceinvoke $r16.<java.util.List: int size()>();
        i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        $r17 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# of seeds : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, i2$sym);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r20);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 0);
        if i2 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45702, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        return r3;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45702, 1);
        goto label3;

     label3:
        $r21 = new java.util.Date;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r21.<java.util.Date: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5882, null);
        l3 = virtualinvoke $r21.<java.util.Date: long getTime()>();
        l3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5882);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        r5 = virtualinvoke r4.<org.scoutant.blokish.model.Board: java.util.List seeds()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(3863, null);
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r5);
        _sym_tmp_4 = r4.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 517);
        $r22 = r4.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i15 = interfaceinvoke $r22.<java.util.List: int size()>();
        $i15$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        $i16$sym = r4.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression nbPieces$sym>;
        _sym_tmp_5 = r4.<org.scoutant.blokish.model.Board: int nbPieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 615);
        $i16 = r4.<org.scoutant.blokish.model.Board: int nbPieces>;
        $i17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i16$sym, null, $i16, 4);
        $i17 = $i16 - 4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i15$sym, $i17$sym, $i15, $i17);
        if $i15 <= $i17 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45703, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i18 = interfaceinvoke r5.<java.util.List: int size()>();
        $i18$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1439, $i18$sym, null);
        $i19 = staticinvoke <java.lang.Math: int min(int,int)>($i18, 2);
        $i19$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(1439);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(16820, null, null, $i19$sym);
        r5 = interfaceinvoke r5.<java.util.List: java.util.List subList(int,int)>(0, $i19);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45703, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;

     label6:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label34;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45704, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r23 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();
        $r23$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r7 = (org.scoutant.blokish.model.Square) $r23;
        i4$sym = null;
        i4 = 0;
        $r24 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---- seed : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r27);
        $r28$sym = r0.<org.scoutant.blokish.model.AI: acteve.symbolic.integer.Expression maxMoves$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.AI: int maxMoves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 609);
        $r28 = r0.<org.scoutant.blokish.model.AI: int[] maxMoves>;
        $i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r28$sym, i1$sym, $r28, i1);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r28, i1);
        $i21 = $r28[i1];
        i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i21$sym, i2$sym, $i21, i2);
        i5 = $i21 / i2;
        i6$sym = null;
        i6 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;

     label7:
        _sym_tmp_7 = r4.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 517);
        $r29 = r4.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i22 = interfaceinvoke $r29.<java.util.List: int size()>();
        $i22$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i6$sym, $i22$sym, i6, $i22);
        if i6 >= $i22 goto label31;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45705, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i4$sym, i5$sym, i4, i5);
        if i4 >= i5 goto label32;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45706, 0);
        _sym_tmp_8 = r4.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 517);
        $r30 = r4.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i6$sym);
        $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(i6);
        $r31$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r8 = (org.scoutant.blokish.model.Piece) $r31;
        i7$sym = null;
        i7 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;

     label8:
        $i23$sym = r8.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression rotations$sym>;
        _sym_tmp_9 = r8.<org.scoutant.blokish.model.Piece: int rotations$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 613);
        $i23 = r8.<org.scoutant.blokish.model.Piece: int rotations>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 10);
        r2[10] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i7$sym, $i23$sym, i7, $i23);
        if i7 >= $i23 goto label29;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45707, 0);
        i8$sym = null;
        i8 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 11);
        r2[11] = 1;

     label9:
        $i24$sym = r8.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression flips$sym>;
        _sym_tmp_10 = r8.<org.scoutant.blokish.model.Piece: int flips$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 612);
        $i24 = r8.<org.scoutant.blokish.model.Piece: int flips>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 12);
        r2[12] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i8$sym, $i24$sym, i8, $i24);
        if i8 >= $i24 goto label27;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45708, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r32 = virtualinvoke r8.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r9 = interfaceinvoke $r32.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 13);
        r2[13] = 1;

     label10:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 14);
        r2[14] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label25;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45709, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r33 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
        $r33$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r10 = (org.scoutant.blokish.model.Square) $r33;
        $i25$sym = r7.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_11 = r7.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 526);
        $i25 = r7.<org.scoutant.blokish.model.Square: int i>;
        $i26$sym = r10.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_12 = r10.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 526);
        $i26 = r10.<org.scoutant.blokish.model.Square: int i>;
        i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i25$sym, $i26$sym, $i25, $i26);
        i9 = $i25 - $i26;
        $i27$sym = r7.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_13 = r7.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 527);
        $i27 = r7.<org.scoutant.blokish.model.Square: int j>;
        $i28$sym = r10.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_14 = r10.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 527);
        $i28 = r10.<org.scoutant.blokish.model.Square: int j>;
        i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i27$sym, $i28$sym, $i27, $i28);
        i10 = $i27 - $i28;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21844, null, null, i9$sym, i10$sym);
        $z2 = virtualinvoke r4.<org.scoutant.blokish.model.Board: boolean outside(org.scoutant.blokish.model.Square,int,int)>(r10, i9, i10);
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21844);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 15);
        r2[15] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 != 0 goto label21;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45710, 0);
        _sym_tmp_15 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 611);
        $r34 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21845, null, null, i9$sym, i10$sym);
        $z3 = virtualinvoke $r34.<org.scoutant.blokish.model.Game: boolean fits(org.scoutant.blokish.model.Piece,int,int)>(r8, i9, i10);
        $z3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21845);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 16);
        r2[16] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 == 0 goto label22;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45711, 0);
        $r35 = new org.scoutant.blokish.model.Move;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21752, null, null, i9$sym, i10$sym);
        specialinvoke $r35.<org.scoutant.blokish.model.Move: void <init>(org.scoutant.blokish.model.Piece,int,int)>(r8, i9, i10);
        r11 = $r35;
        _sym_tmp_16 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 611);
        $r36 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21753, null, null);
        $z4 = virtualinvoke $r36.<org.scoutant.blokish.model.Game: boolean valid(org.scoutant.blokish.model.Move)>(r11);
        $z4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21753);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 17);
        r2[17] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z4$sym, null, $z4, 0);
        if $z4 != 0 goto label11;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45712, 0);
        $r37 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inconsistant ! ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7, null, null);
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("sc", $r40);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 18, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 18);
        r2[18] = 1;
        goto label12;

     label11:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45712, 1);
        goto label12;

     label12:
        $i30$sym = r8.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym>;
        _sym_tmp_17 = r8.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 566);
        $i30 = r8.<org.scoutant.blokish.model.Piece: int count>;
        i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i30$sym, 5, $i30);
        i11 = 5 * $i30;
        _sym_tmp_18 = r4.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 517);
        $r41 = r4.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i31 = interfaceinvoke $r41.<java.util.List: int size()>();
        $i31$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        $i32$sym = r4.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression nbPieces$sym>;
        _sym_tmp_19 = r4.<org.scoutant.blokish.model.Board: int nbPieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 615);
        $i32 = r4.<org.scoutant.blokish.model.Board: int nbPieces>;
        $i33$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i32$sym, null, $i32, 5);
        $i33 = $i32 - 5;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 19, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 19);
        r2[19] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i31$sym, $i33$sym, $i31, $i33);
        if $i31 <= $i33 goto label13;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45713, 0);
        _sym_tmp_20 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 611);
        $r42 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        $i34$sym = $r42.<org.scoutant.blokish.model.Game: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_21 = $r42.<org.scoutant.blokish.model.Game: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 616);
        $i34 = $r42.<org.scoutant.blokish.model.Game: int size>;
        $i35$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i34$sym, null, $i34, 2);
        $i35 = $i34 / 2;
        i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i35$sym, i9$sym, $i35, i9);
        i12 = $i35 - i9;
        _sym_tmp_22 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 611);
        $r43 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        $i36$sym = $r43.<org.scoutant.blokish.model.Game: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_23 = $r43.<org.scoutant.blokish.model.Game: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 616);
        $i36 = $r43.<org.scoutant.blokish.model.Game: int size>;
        $i37$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i36$sym, null, $i36, 2);
        $i37 = $i36 / 2;
        i13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i37$sym, i10$sym, $i37, i10);
        i13 = $i37 - i10;
        $i38$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i12$sym, i12$sym, i12, i12);
        $i38 = i12 * i12;
        $i39$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i13$sym, i13$sym, i13, i13);
        $i39 = i13 * i13;
        $i40$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i38$sym, $i39$sym, $i38, $i39);
        $i40 = $i38 + $i39;
        $i41$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i40$sym, 1, $i40);
        $i41 = 1 * $i40;
        i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i11$sym, $i41$sym, i11, $i41);
        i11 = i11 - $i41;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 20, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 20);
        r2[20] = 1;
        goto label14;

     label13:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45713, 1);
        goto label14;

     label14:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21847, null, null, i9$sym, i10$sym);
        i42 = virtualinvoke r4.<org.scoutant.blokish.model.Board: int scoreSeedsIfAdding(org.scoutant.blokish.model.Piece,int,int)>(r8, i9, i10);
        i42$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21847);
        $i43$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, i42$sym, 3, i42);
        $i43 = 3 * i42;
        i44$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i11$sym, $i43$sym, i11, $i43);
        i44 = i11 + $i43;
        _sym_tmp_24 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 611);
        $r44 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        $i45$sym = r4.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_25 = r4.<org.scoutant.blokish.model.Board: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 518);
        $i45 = r4.<org.scoutant.blokish.model.Board: int color>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21848, null, $i45$sym, null, i9$sym, i10$sym);
        i46 = virtualinvoke $r44.<org.scoutant.blokish.model.Game: int scoreEnemySeedsIfAdding(int,org.scoutant.blokish.model.Piece,int,int)>($i45, r8, i9, i10);
        i46$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21848);
        $i47$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, i46$sym, 1, i46);
        $i47 = 1 * i46;
        i48$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i44$sym, $i47$sym, i44, $i47);
        i48 = i44 - $i47;
        _sym_tmp_26 = r4.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 517);
        $r45 = r4.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i49 = interfaceinvoke $r45.<java.util.List: int size()>();
        $i49$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 21, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 21);
        r2[21] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i49$sym, null, $i49, 9);
        if $i49 >= 9 goto label15;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45714, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21849, null, i0$sym, null);
        $i50 = virtualinvoke r0.<org.scoutant.blokish.model.AI: int chainingScore(int,org.scoutant.blokish.model.Move)>(i0, r11);
        $i50$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21849);
        $i51$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(null, $i50$sym, 3, $i50);
        $i51 = 3 * $i50;
        i48$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i48$sym, $i51$sym, i48, $i51);
        i48 = i48 + $i51;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 22, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 22);
        r2[22] = 1;
        goto label16;

     label15:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45714, 1);
        goto label16;

     label16:
        r11.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression score$sym> = i48$sym;
        _sym_tmp_27 = r11.<org.scoutant.blokish.model.Move: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_27, 617);
        _sym_tmp_27 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r11.<org.scoutant.blokish.model.Move: int score$a3tid> = _sym_tmp_27;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(617);
        r11.<org.scoutant.blokish.model.Move: int score> = i48;
        _sym_tmp_28 = r4.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_28, 517);
        $r46 = r4.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i52 = interfaceinvoke $r46.<java.util.List: int size()>();
        $i52$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        $i53$sym = r4.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression nbPieces$sym>;
        _sym_tmp_29 = r4.<org.scoutant.blokish.model.Board: int nbPieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 615);
        $i53 = r4.<org.scoutant.blokish.model.Board: int nbPieces>;
        $i54$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i53$sym, null, $i53, 4);
        $i54 = $i53 - 4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 23, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 23);
        r2[23] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i52$sym, $i54$sym, $i52, $i54);
        if $i52 <= $i54 goto label17;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45715, 0);
        $i55$sym = r8.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym>;
        _sym_tmp_30 = r8.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 566);
        $i55 = r8.<org.scoutant.blokish.model.Piece: int count>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 24, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 24);
        r2[24] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i55$sym, null, $i55, 5);
        if $i55 < 5 goto label19;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45716, 0);
        goto label18;

     label17:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45715, 1);
        goto label18;

     label18:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r11);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 25, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 25);
        r2[25] = 1;
        goto label20;

     label19:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45716, 1);
        goto label20;

     label20:
        i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i4$sym, null, i4, 1);
        i4 = i4 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i56 = interfaceinvoke r3.<java.util.List: int size()>();
        $i56$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        $r47$sym = r0.<org.scoutant.blokish.model.AI: acteve.symbolic.integer.Expression maxMoves$sym>;
        _sym_tmp_31 = r0.<org.scoutant.blokish.model.AI: int maxMoves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_31, 609);
        $r47 = r0.<org.scoutant.blokish.model.AI: int[] maxMoves>;
        $i57$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r47$sym, i1$sym, $r47, i1);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r47, i1);
        $i57 = $r47[i1];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 26, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 26);
        r2[26] = 1;
        _sym_tmp_32 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i56$sym, $i57$sym, $i56, $i57);
        if $i56 < $i57 goto label23;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45717, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21850, null, l3$sym);
        specialinvoke r0.<org.scoutant.blokish.model.AI: void autoAdaptLevel(long)>(l3);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 27, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 27);
        r2[27] = 1;
        return r3;

        goto label24;

     label21:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45710, 1);
        goto label24;

        goto label24;

     label22:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45711, 1);
        goto label24;

        goto label24;

     label23:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45717, 1);
        goto label24;

     label24:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 28, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 28);
        r2[28] = 1;
        goto label10;

        goto label26;

     label25:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45709, 1);
        goto label26;

     label26:
        i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i8$sym, null, i8, 1);
        i8 = i8 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21810, null);
        virtualinvoke r8.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece flip()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 29, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 29);
        r2[29] = 1;
        goto label9;

        goto label28;

     label27:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45708, 1);
        goto label28;

     label28:
        i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i7$sym, null, i7, 1);
        i7 = i7 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21808, null, null);
        virtualinvoke r8.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece rotate(int)>(1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 30, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 30);
        r2[30] = 1;
        goto label8;

        goto label30;

     label29:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45707, 1);
        goto label30;

     label30:
        i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i6$sym, null, i6, 1);
        i6 = i6 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 31, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 31);
        r2[31] = 1;
        goto label7;

        goto label33;

     label31:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45705, 1);
        goto label33;

        goto label33;

     label32:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45706, 1);
        goto label33;

     label33:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 32, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 32);
        r2[32] = 1;
        goto label6;

        goto label35;

     label34:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_32, 45704, 1);
        goto label35;

     label35:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21850, null, l3$sym);
        specialinvoke r0.<org.scoutant.blokish.model.AI: void autoAdaptLevel(long)>(l3);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 33, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 33);
        r2[33] = 1;
        return r3;
    }

    protected int chainingScore(int, org.scoutant.blokish.model.Move)
    {
        acteve.symbolic.integer.Expression _sym_tmp_25, $i28$sym, $i27$sym, $i26$sym, $i25$sym, $i24$sym, $i23$sym, $i22$sym, $i21$sym, $i20$sym, $r41$sym, $z9$sym, $i19$sym, $i18$sym, $r39$sym, $z8$sym, $r37$sym, $z7$sym, $i16$sym, i15$sym, $i14$sym, $r29$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $r26$sym, $z6$sym, $i9$sym, $r23$sym, $r21$sym, i8$sym, i7$sym, $z4$sym, $r18$sym, $z3$sym, $r15$sym, z2$sym, z1$sym, z0$sym, i6$sym, i5$sym, i4$sym, i3$sym, i2$sym, i1$sym, r3$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        org.scoutant.blokish.model.AI r0;
        org.scoutant.blokish.model.Move r1, r30, $r43;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.model.Board r4;
        org.scoutant.blokish.model.Piece r5, r8, r10, $r19;
        java.util.ArrayList r6, $r16;
        java.util.Iterator r7, r9, r11, r25, r36;
        org.scoutant.blokish.model.Square r12, r27, r38;
        boolean z0, z1, z2, $z3, $z4, $z6, $z7, $z8, $z9;
        org.scoutant.blokish.model.Game $r13, $r42;
        java.util.List $r14, $r17, $r24, $r35, $r40;
        java.lang.Object $r15, $r18, $r26, $r37, $r39, $r41;
        int[][] $r20, $r22, $r28;
        int[] $r21, $r23, $r29;
        java.lang.StringBuilder $r31, $r32, $r33, $r46, $r47, $r48;
        java.lang.String $r34, $r49;

        r0 := @this: org.scoutant.blokish.model.AI;
        i0 := @parameter0: int;
        r1 := @parameter1: org.scoutant.blokish.model.Move;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21849, 32655, 3);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.model.AI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 607);
        $r2 = <org.scoutant.blokish.model.AI: boolean[][] $VRc>;
        _sym_tmp_25 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45718, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.AI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45718, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 4);
        r3 = $r2[4];
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 611);
        $r13 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        _sym_tmp_3 = $r13.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 473);
        $r14 = $r13.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i0);
        $r15$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        r4 = (org.scoutant.blokish.model.Board) $r15;
        _sym_tmp_4 = r1.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 472);
        r5 = r1.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        $r16 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r16.<java.util.ArrayList: void <init>()>();
        r6 = $r16;
        _sym_tmp_5 = r4.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 517);
        $r17 = r4.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r7 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
        $z3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 == 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45719, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r18 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
        $r18$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r8 = (org.scoutant.blokish.model.Piece) $r18;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z4 = virtualinvoke r8.<org.scoutant.blokish.model.Piece: boolean equals(java.lang.Object)>(r5);
        $z4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z4$sym, null, $z4, 0);
        if $z4 != 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45720, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21851, null);
        $r19 = virtualinvoke r8.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece clone()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>($r19);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45720, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        goto label2;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45719, 1);
        goto label6;

     label6:
        i7$sym = null;
        i7 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i7$sym, null, i7, 20);
        if i7 >= 20 goto label11;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45721, 0);
        i8$sym = null;
        i8 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;

     label8:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i8$sym, null, i8, 20);
        if i8 >= 20 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45722, 0);
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.AI: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 610);
        $r20 = r0.<org.scoutant.blokish.model.AI: int[][] ij>;
        $r21$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r20, i8);
        $r21 = $r20[i8];
        _sym_tmp_7 = r4.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 618);
        $r22 = r4.<org.scoutant.blokish.model.Board: int[][] ij>;
        $r23$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r22, i8);
        $r23 = $r22[i8];
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r23$sym, i7$sym, $r23, i7);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r23, i7);
        $i9 = $r23[i7];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r21$sym, i7$sym, $i9$sym, $r21, i7, $i9);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r21, i7);
        $r21[i7] = $i9;
        i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i8$sym, null, i8, 1);
        i8 = i8 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        goto label8;

        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45722, 1);
        goto label10;

     label10:
        i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i7$sym, null, i7, 1);
        i7 = i7 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        goto label7;

        goto label12;

     label11:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45721, 1);
        goto label12;

     label12:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21852, null, i0$sym);
        $r24 = virtualinvoke r5.<org.scoutant.blokish.model.Piece: java.util.List squares(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r25 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;

     label13:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z6 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();
        $z6$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z6$sym, null, $z6, 0);
        if $z6 == 0 goto label19;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45723, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r26 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();
        $r26$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r27 = (org.scoutant.blokish.model.Square) $r26;
        $i10$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_8 = r1.<org.scoutant.blokish.model.Move: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 529);
        $i10 = r1.<org.scoutant.blokish.model.Move: int i>;
        $i11$sym = r27.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_9 = r27.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 526);
        $i11 = r27.<org.scoutant.blokish.model.Square: int i>;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, $i11$sym, $i10, $i11);
        i1 = $i10 + $i11;
        $i12$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_10 = r1.<org.scoutant.blokish.model.Move: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 530);
        $i12 = r1.<org.scoutant.blokish.model.Move: int j>;
        $i13$sym = r27.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_11 = r27.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 527);
        $i13 = r27.<org.scoutant.blokish.model.Square: int j>;
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i12$sym, $i13$sym, $i12, $i13);
        i2 = $i12 + $i13;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 13);
        r3[13] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 0);
        if i1 < 0 goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45724, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 14);
        r3[14] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 20);
        if i1 >= 20 goto label15;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45725, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 15);
        r3[15] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 0);
        if i2 < 0 goto label16;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45726, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 16);
        r3[16] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 20);
        if i2 >= 20 goto label17;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45727, 0);
        _sym_tmp_12 = r0.<org.scoutant.blokish.model.AI: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 610);
        $r28 = r0.<org.scoutant.blokish.model.AI: int[][] ij>;
        $r29$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r28, i1);
        $r29 = $r28[i1];
        $i14$sym = r27.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression value$sym>;
        _sym_tmp_13 = r27.<org.scoutant.blokish.model.Square: int value$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 619);
        $i14 = r27.<org.scoutant.blokish.model.Square: int value>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r29$sym, i2$sym, $i14$sym, $r29, i2, $i14);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r29, i2);
        $r29[i2] = $i14;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 17);
        r3[17] = 1;
        goto label18;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45724, 1);
        goto label18;

        goto label18;

     label15:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45725, 1);
        goto label18;

        goto label18;

     label16:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45726, 1);
        goto label18;

        goto label18;

     label17:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45727, 1);
        goto label18;

     label18:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 18, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 18);
        r3[18] = 1;
        goto label13;

        goto label20;

     label19:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45723, 1);
        goto label20;

     label20:
        i15$sym = null;
        i15 = 0;
        r30 = null;
        $r31 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("considering # of pieces : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i16 = interfaceinvoke r6.<java.util.List: int size()>();
        $i16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i16$sym);
        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r34);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        $r35 = virtualinvoke r5.<org.scoutant.blokish.model.Piece: java.util.List seeds()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r36 = interfaceinvoke $r35.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 19, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 19);
        r3[19] = 1;

     label21:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z7 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();
        $z7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 20, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 20);
        r3[20] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z7$sym, null, $z7, 0);
        if $z7 == 0 goto label39;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45728, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r37 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();
        $r37$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r38 = (org.scoutant.blokish.model.Square) $r37;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r9 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 21, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 21);
        r3[21] = 1;

     label22:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z8 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
        $z8$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 22, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 22);
        r3[22] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z8$sym, null, $z8, 0);
        if $z8 == 0 goto label37;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45729, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r39 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
        $r39$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r10 = (org.scoutant.blokish.model.Piece) $r39;
        i3$sym = null;
        i3 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 23, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 23);
        r3[23] = 1;

     label23:
        $i18$sym = r10.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression rotations$sym>;
        _sym_tmp_14 = r10.<org.scoutant.blokish.model.Piece: int rotations$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 613);
        $i18 = r10.<org.scoutant.blokish.model.Piece: int rotations>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 24, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 24);
        r3[24] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, $i18$sym, i3, $i18);
        if i3 >= $i18 goto label35;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45730, 0);
        i4$sym = null;
        i4 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 25, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 25);
        r3[25] = 1;

     label24:
        $i19$sym = r10.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression flips$sym>;
        _sym_tmp_15 = r10.<org.scoutant.blokish.model.Piece: int flips$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 612);
        $i19 = r10.<org.scoutant.blokish.model.Piece: int flips>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 26, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 26);
        r3[26] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i4$sym, $i19$sym, i4, $i19);
        if i4 >= $i19 goto label33;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45731, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r40 = virtualinvoke r10.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r11 = interfaceinvoke $r40.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 27, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 27);
        r3[27] = 1;

     label25:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z9 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();
        $z9$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 28, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 28);
        r3[28] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z9$sym, null, $z9, 0);
        if $z9 == 0 goto label31;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45732, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r41 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();
        $r41$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r12 = (org.scoutant.blokish.model.Square) $r41;
        $i20$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_16 = r1.<org.scoutant.blokish.model.Move: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 529);
        $i20 = r1.<org.scoutant.blokish.model.Move: int i>;
        $i21$sym = r38.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_17 = r38.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 526);
        $i21 = r38.<org.scoutant.blokish.model.Square: int i>;
        $i22$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i20$sym, $i21$sym, $i20, $i21);
        $i22 = $i20 + $i21;
        $i23$sym = r12.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_18 = r12.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 526);
        $i23 = r12.<org.scoutant.blokish.model.Square: int i>;
        i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i22$sym, $i23$sym, $i22, $i23);
        i5 = $i22 - $i23;
        $i24$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_19 = r1.<org.scoutant.blokish.model.Move: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 530);
        $i24 = r1.<org.scoutant.blokish.model.Move: int j>;
        $i25$sym = r38.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_20 = r38.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 527);
        $i25 = r38.<org.scoutant.blokish.model.Square: int j>;
        $i26$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i24$sym, $i25$sym, $i24, $i25);
        $i26 = $i24 + $i25;
        $i27$sym = r12.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_21 = r12.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 527);
        $i27 = r12.<org.scoutant.blokish.model.Square: int j>;
        i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i26$sym, $i27$sym, $i26, $i27);
        i6 = $i26 - $i27;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21853, null, i0$sym, null, i5$sym, i6$sym);
        z0 = virtualinvoke r0.<org.scoutant.blokish.model.AI: boolean overlaps(int,org.scoutant.blokish.model.Piece,int,int)>(i0, r10, i5, i6);
        z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21853);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21844, null, null, i5$sym, i6$sym);
        z1 = virtualinvoke r4.<org.scoutant.blokish.model.Board: boolean outside(org.scoutant.blokish.model.Square,int,int)>(r12, i5, i6);
        z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21844);
        _sym_tmp_22 = r0.<org.scoutant.blokish.model.AI: int game$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 611);
        $r42 = r0.<org.scoutant.blokish.model.AI: org.scoutant.blokish.model.Game game>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21845, null, null, i5$sym, i6$sym);
        z2 = virtualinvoke $r42.<org.scoutant.blokish.model.Game: boolean fits(org.scoutant.blokish.model.Piece,int,int)>(r10, i5, i6);
        z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21845);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 29, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 29);
        r3[29] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, null, z0, 0);
        if z0 != 0 goto label26;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45733, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 30, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 30);
        r3[30] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z1$sym, null, z1, 0);
        if z1 != 0 goto label27;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45734, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 31, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 31);
        r3[31] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z2$sym, null, z2, 0);
        if z2 == 0 goto label28;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45735, 0);
        $i28$sym = r10.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym>;
        _sym_tmp_23 = r10.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 566);
        $i28 = r10.<org.scoutant.blokish.model.Piece: int count>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 32, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 32);
        r3[32] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i28$sym, i15$sym, $i28, i15);
        if $i28 <= i15 goto label29;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45736, 0);
        $r43 = new org.scoutant.blokish.model.Move;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21752, null, null, i5$sym, i6$sym);
        specialinvoke $r43.<org.scoutant.blokish.model.Move: void <init>(org.scoutant.blokish.model.Piece,int,int)>(r10, i5, i6);
        r30 = $r43;
        i15$sym = r10.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym>;
        _sym_tmp_24 = r10.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 566);
        i15 = r10.<org.scoutant.blokish.model.Piece: int count>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 33, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 33);
        r3[33] = 1;
        goto label30;

     label26:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45733, 1);
        goto label30;

        goto label30;

     label27:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45734, 1);
        goto label30;

        goto label30;

     label28:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45735, 1);
        goto label30;

        goto label30;

     label29:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45736, 1);
        goto label30;

     label30:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 34, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 34);
        r3[34] = 1;
        goto label25;

        goto label32;

     label31:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45732, 1);
        goto label32;

     label32:
        i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i4$sym, null, i4, 1);
        i4 = i4 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21810, null);
        virtualinvoke r10.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece flip()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 35, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 35);
        r3[35] = 1;
        goto label24;

        goto label34;

     label33:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45731, 1);
        goto label34;

     label34:
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 1);
        i3 = i3 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21808, null, null);
        virtualinvoke r10.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece rotate(int)>(1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 36, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 36);
        r3[36] = 1;
        goto label23;

        goto label36;

     label35:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45730, 1);
        goto label36;

     label36:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 37, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 37);
        r3[37] = 1;
        goto label22;

        goto label38;

     label37:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45729, 1);
        goto label38;

     label38:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 38, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 38);
        r3[38] = 1;
        goto label21;

        goto label40;

     label39:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45728, 1);
        goto label40;

     label40:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 39, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 39);
        r3[39] = 1;
        _sym_tmp_25 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i15$sym, null, i15, 1);
        if i15 <= 1 goto label41;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45737, 0);
        $r46 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("may CHAIN with : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r49);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 40, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 40);
        r3[40] = 1;
        goto label42;

     label41:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_25, 45737, 1);
        goto label42;

     label42:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 41, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 41);
        r3[41] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21849, i15$sym);
        return i15;
    }

    public boolean overlaps(int, org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i7$sym, $r9$sym, $i6$sym, $i5$sym, $r7$sym, $z0$sym, i4$sym, i3$sym, r3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, i4, $i5, $i6, $i7;
        org.scoutant.blokish.model.AI r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Iterator r4;
        org.scoutant.blokish.model.Square r5;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;
        int[][] $r8;
        int[] $r9;

        r0 := @this: org.scoutant.blokish.model.AI;
        i0 := @parameter0: int;
        r1 := @parameter1: org.scoutant.blokish.model.Piece;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21853, 32656, 5);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        _sym_tmp_1 = <org.scoutant.blokish.model.AI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 607);
        $r2 = <org.scoutant.blokish.model.AI: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45738, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.AI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45738, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 5);
        r3 = $r2[5];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r6 = virtualinvoke r1.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45739, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Square) $r7;
        $i5$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_2 = r5.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 526);
        $i5 = r5.<org.scoutant.blokish.model.Square: int i>;
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i5$sym, i1, $i5);
        i3 = i1 + $i5;
        $i6$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_3 = r5.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 527);
        $i6 = r5.<org.scoutant.blokish.model.Square: int j>;
        i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i6$sym, i2, $i6);
        i4 = i2 + $i6;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 0);
        if i3 < 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45740, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 20);
        if i3 >= 20 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45741, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i4$sym, null, i4, 0);
        if i4 < 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45742, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i4$sym, null, i4, 20);
        if i4 >= 20 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45743, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.AI: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 610);
        $r8 = r0.<org.scoutant.blokish.model.AI: int[][] ij>;
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, i3);
        $r9 = $r8[i3];
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r9$sym, i4$sym, $r9, i4);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r9, i4);
        $i7 = $r9[i4];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, null, $i7, 1);
        if $i7 <= 1 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45744, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21853, null);
        return 1;

        goto label8;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45740, 1);
        goto label8;

        goto label8;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45741, 1);
        goto label8;

        goto label8;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45742, 1);
        goto label8;

        goto label8;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45743, 1);
        goto label8;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45744, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        goto label2;

        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45739, 1);
        goto label10;

     label10:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21853, null);
        return 0;
    }

    private void autoAdaptLevel(long)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i8$sym, $i7$sym, $i5$sym, $b4$sym, $l2$sym, l1$sym, r2$sym, l0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i5, $i7, $i8;
        org.scoutant.blokish.model.AI r0;
        long l0, l1, $l2;
        boolean[][] $r1;
        boolean[] r2;
        java.util.Date $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        byte $b4;

        r0 := @this: org.scoutant.blokish.model.AI;
        l0 := @parameter0: long;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21850, 32657, 2);
        l0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.model.AI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 607);
        $r1 = <org.scoutant.blokish.model.AI: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45745, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.AI: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45745, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 6);
        r2 = $r1[6];
        $r3 = new java.util.Date;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.util.Date: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5882, null);
        $l2 = virtualinvoke $r3.<java.util.Date: long getTime()>();
        $l2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5882);
        l1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,long,long)>($l2$sym, l0$sym, $l2, l0);
        l1 = $l2 - l0;
        $r4 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lasted : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(286, null, l1$sym);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r7);
        $b4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,long,long)>(l1$sym, null, l1, 2500L);
        $b4 = l1 cmp 2500L;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($b4$sym, null, $b4, 0);
        if $b4 <= 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45746, 0);
        $i5$sym = r0.<org.scoutant.blokish.model.AI: acteve.symbolic.integer.Expression adaptedLevel$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.AI: int adaptedLevel$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 606);
        $i5 = r0.<org.scoutant.blokish.model.AI: int adaptedLevel>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 0);
        if $i5 <= 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45747, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1536, null, null);
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("sc", "Decreasing AI level! * * * * * * * * * * * * * * * * * * * *");
        $i7$sym = r0.<org.scoutant.blokish.model.AI: acteve.symbolic.integer.Expression adaptedLevel$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.AI: int adaptedLevel$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 606);
        $i7 = r0.<org.scoutant.blokish.model.AI: int adaptedLevel>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, null, $i7, 1);
        $i8 = $i7 - 1;
        r0.<org.scoutant.blokish.model.AI: acteve.symbolic.integer.Expression adaptedLevel$sym> = $i8$sym;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.AI: int adaptedLevel$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 606);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.AI: int adaptedLevel$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(606);
        r0.<org.scoutant.blokish.model.AI: int adaptedLevel> = $i8;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45746, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45747, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32658, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.model.AI: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 7);
        r1 = $r0[7];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32659, 0);
        $r0 = newmultiarray (boolean)[8][];
        _sym_tmp_1 = <org.scoutant.blokish.model.AI: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 607);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.model.AI: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(607);
        <org.scoutant.blokish.model.AI: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[19];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[17];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[34];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[42];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[10];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[4];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[1];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/model/AI", 3950219659400187803L);
        return $r0;
    }
}
public class org.scoutant.blokish.model.Board extends java.lang.Object
{
    public static final java.lang.String tag;
    public int color;
    public int size;
    int[][] ij;
    public java.util.List pieces;
    public int nbPieces;
    public int score;
    public boolean over;
    int[][] ab;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    public static final int tag$a3tid;
    public acteve.symbolic.integer.Expression color$sym;
    public int color$a3tid;
    public acteve.symbolic.integer.Expression size$sym;
    public int size$a3tid;
    int ij$a3tid;
    public int pieces$a3tid;
    public acteve.symbolic.integer.Expression nbPieces$sym;
    public int nbPieces$a3tid;
    public acteve.symbolic.integer.Expression score$sym;
    public int score$a3tid;
    public acteve.symbolic.integer.Expression over$sym;
    public int over$a3tid;
    int ab$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_39, $i9$sym, $i8$sym, $i7$sym, $r13$sym, $i6$sym, $i5$sym, $r11$sym, $i4$sym, $i3$sym, $r9$sym, $i2$sym, $i1$sym, $r7$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_38, _sym_tmp_37, _sym_tmp_36, _sym_tmp_35, _sym_tmp_34, _sym_tmp_33, _sym_tmp_32, _sym_tmp_31, _sym_tmp_30, _sym_tmp_29, _sym_tmp_28, _sym_tmp_27, _sym_tmp_26, _sym_tmp_25, _sym_tmp_24, _sym_tmp_23, _sym_tmp_22, _sym_tmp_21, _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.scoutant.blokish.model.Board r0;
        boolean[][] $r1;
        boolean[] r2;
        int[][] $r3, $r5, $r6, $r8, $r10, $r12;
        java.util.ArrayList $r4;
        int[] $r7, $r9, $r11, $r13;
        java.util.List $r14, $r21, $r28, $r35, $r42, $r49, $r56, $r63, $r70, $r77, $r84, $r91, $r98, $r104, $r110, $r116, $r122, $r128, $r133, $r138, $r142, $r145;
        org.scoutant.blokish.model.Piece $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r40, $r41, $r43, $r44, $r45, $r46, $r47, $r48, $r50, $r51, $r52, $r53, $r54, $r55, $r57, $r58, $r59, $r60, $r61, $r62, $r64, $r65, $r66, $r67, $r68, $r69, $r71, $r72, $r73, $r74, $r75, $r76, $r78, $r79, $r80, $r81, $r82, $r83, $r85, $r86, $r87, $r88, $r89, $r90, $r92, $r93, $r94, $r95, $r96, $r97, $r99, $r100, $r101, $r102, $r103, $r105, $r106, $r107, $r108, $r109, $r111, $r112, $r113, $r114, $r115, $r117, $r118, $r119, $r120, $r121, $r123, $r124, $r125, $r126, $r127, $r129, $r130, $r131, $r132, $r134, $r135, $r136, $r137, $r139, $r140, $r141, $r143, $r144;

        r0 := @this: org.scoutant.blokish.model.Board;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(28, 32660, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r1 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_39 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_39, 45748, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_39, 45748, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym> = null;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 621);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Board: int size$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(621);
        r0.<org.scoutant.blokish.model.Board: int size> = 20;
        $r3 = newmultiarray (int)[20][20];
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 618);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Board: int ij$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(618);
        r0.<org.scoutant.blokish.model.Board: int[][] ij> = $r3;
        $r4 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 517);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Board: int pieces$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(517);
        r0.<org.scoutant.blokish.model.Board: java.util.List pieces> = $r4;
        r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression over$sym> = null;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Board: int over$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 596);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Board: int over$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(596);
        r0.<org.scoutant.blokish.model.Board: boolean over> = 0;
        $r5 = newmultiarray (int)[20][20];
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Board: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 622);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Board: int ab$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(622);
        r0.<org.scoutant.blokish.model.Board: int[][] ab> = $r5;
        r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression color$sym> = i0$sym;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Board: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_7, 518);
        _sym_tmp_7 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Board: int color$a3tid> = _sym_tmp_7;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(518);
        r0.<org.scoutant.blokish.model.Board: int color> = i0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_39 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_39, 45749, 0);
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 618);
        $r6 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r6, 0);
        $r7 = $r6[0];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r7$sym, null, null, $r7, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r7, 0);
        $r7[0] = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_39, 45749, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_39 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        if i0 != 1 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_39, 45750, 0);
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 618);
        $r8 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $i1$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 621);
        $i1 = r0.<org.scoutant.blokish.model.Board: int size>;
        $i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, null, $i1, 1);
        $i2 = $i1 - 1;
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, $i2);
        $r9 = $r8[$i2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r9$sym, null, null, $r9, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r9, 0);
        $r9[0] = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_39, 45750, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_39 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 2);
        if i0 != 2 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_39, 45751, 0);
        _sym_tmp_11 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 618);
        $r10 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $i3$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_12 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 621);
        $i3 = r0.<org.scoutant.blokish.model.Board: int size>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 1);
        $i4 = $i3 - 1;
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r10, $i4);
        $r11 = $r10[$i4];
        $i5$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_13 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 621);
        $i5 = r0.<org.scoutant.blokish.model.Board: int size>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 1);
        $i6 = $i5 - 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r11$sym, $i6$sym, null, $r11, $i6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r11, $i6);
        $r11[$i6] = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_39, 45751, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        _sym_tmp_39 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 3);
        if i0 != 3 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_39, 45752, 0);
        _sym_tmp_14 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 618);
        $r12 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r12, 0);
        $r13 = $r12[0];
        $i7$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_15 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 621);
        $i7 = r0.<org.scoutant.blokish.model.Board: int size>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, null, $i7, 1);
        $i8 = $i7 - 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r13$sym, $i8$sym, null, $r13, $i8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r13, $i8);
        $r13[$i8] = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_39, 45752, 1);
        goto label9;

     label9:
        _sym_tmp_16 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 517);
        $r14 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r15 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r15.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "X5", 1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r16 = virtualinvoke $r15.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r17 = virtualinvoke $r16.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r18 = virtualinvoke $r17.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r19 = virtualinvoke $r18.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r20 = virtualinvoke $r19.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r20);
        _sym_tmp_17 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 517);
        $r21 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r22 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r22.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "W5", 4, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r23 = virtualinvoke $r22.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r24 = virtualinvoke $r23.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r25 = virtualinvoke $r24.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r26 = virtualinvoke $r25.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r27 = virtualinvoke $r26.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>($r27);
        _sym_tmp_18 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 517);
        $r28 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r29 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r29.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "F5", 4, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r30 = virtualinvoke $r29.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r31 = virtualinvoke $r30.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r32 = virtualinvoke $r31.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r33 = virtualinvoke $r32.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r34 = virtualinvoke $r33.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r34);
        _sym_tmp_19 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 517);
        $r35 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r36 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r36.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "T5", 4, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r37 = virtualinvoke $r36.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r38 = virtualinvoke $r37.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r39 = virtualinvoke $r38.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r40 = virtualinvoke $r39.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r41 = virtualinvoke $r40.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r35.<java.util.List: boolean add(java.lang.Object)>($r41);
        _sym_tmp_20 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 517);
        $r42 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r43 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r43.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "Z5", 2, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r44 = virtualinvoke $r43.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r45 = virtualinvoke $r44.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r46 = virtualinvoke $r45.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r47 = virtualinvoke $r46.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r48 = virtualinvoke $r47.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r42.<java.util.List: boolean add(java.lang.Object)>($r48);
        _sym_tmp_21 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_21, 517);
        $r49 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r50 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r50.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 4, "Y5", 4, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r51 = virtualinvoke $r50.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r52 = virtualinvoke $r51.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r53 = virtualinvoke $r52.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r54 = virtualinvoke $r53.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r55 = virtualinvoke $r54.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r49.<java.util.List: boolean add(java.lang.Object)>($r55);
        _sym_tmp_22 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_22, 517);
        $r56 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r57 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r57.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 4, "N5", 4, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r58 = virtualinvoke $r57.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r59 = virtualinvoke $r58.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r60 = virtualinvoke $r59.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r61 = virtualinvoke $r60.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r62 = virtualinvoke $r61.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r56.<java.util.List: boolean add(java.lang.Object)>($r62);
        _sym_tmp_23 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_23, 517);
        $r63 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r64 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r64.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "U5", 4, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r65 = virtualinvoke $r64.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r66 = virtualinvoke $r65.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r67 = virtualinvoke $r66.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r68 = virtualinvoke $r67.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r69 = virtualinvoke $r68.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r63.<java.util.List: boolean add(java.lang.Object)>($r69);
        _sym_tmp_24 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_24, 517);
        $r70 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r71 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r71.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "V5", 4, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r72 = virtualinvoke $r71.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r73 = virtualinvoke $r72.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r74 = virtualinvoke $r73.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r75 = virtualinvoke $r74.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r76 = virtualinvoke $r75.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r70.<java.util.List: boolean add(java.lang.Object)>($r76);
        _sym_tmp_25 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_25, 517);
        $r77 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r78 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r78.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "P5", 4, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r79 = virtualinvoke $r78.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r80 = virtualinvoke $r79.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r81 = virtualinvoke $r80.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r82 = virtualinvoke $r81.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r83 = virtualinvoke $r82.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r77.<java.util.List: boolean add(java.lang.Object)>($r83);
        _sym_tmp_26 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_26, 517);
        $r84 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r85 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r85.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 4, "L5", 4, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r86 = virtualinvoke $r85.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r87 = virtualinvoke $r86.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r88 = virtualinvoke $r87.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r89 = virtualinvoke $r88.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r90 = virtualinvoke $r89.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r84.<java.util.List: boolean add(java.lang.Object)>($r90);
        _sym_tmp_27 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_27, 517);
        $r91 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r92 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r92.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 5, "I5", 2, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r93 = virtualinvoke $r92.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r94 = virtualinvoke $r93.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r95 = virtualinvoke $r94.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r96 = virtualinvoke $r95.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r97 = virtualinvoke $r96.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r91.<java.util.List: boolean add(java.lang.Object)>($r97);
        _sym_tmp_28 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_28, 517);
        $r98 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r99 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r99.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 2, "O4", 1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r100 = virtualinvoke $r99.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r101 = virtualinvoke $r100.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r102 = virtualinvoke $r101.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r103 = virtualinvoke $r102.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r98.<java.util.List: boolean add(java.lang.Object)>($r103);
        _sym_tmp_29 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_29, 517);
        $r104 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r105 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r105.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "S4", 2, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r106 = virtualinvoke $r105.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r107 = virtualinvoke $r106.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r108 = virtualinvoke $r107.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r109 = virtualinvoke $r108.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r104.<java.util.List: boolean add(java.lang.Object)>($r109);
        _sym_tmp_30 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_30, 517);
        $r110 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r111 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r111.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "T4", 4, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r112 = virtualinvoke $r111.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r113 = virtualinvoke $r112.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r114 = virtualinvoke $r113.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(-1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r115 = virtualinvoke $r114.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r110.<java.util.List: boolean add(java.lang.Object)>($r115);
        _sym_tmp_31 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_31, 517);
        $r116 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r117 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r117.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "L4", 4, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r118 = virtualinvoke $r117.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r119 = virtualinvoke $r118.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r120 = virtualinvoke $r119.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r121 = virtualinvoke $r120.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r116.<java.util.List: boolean add(java.lang.Object)>($r121);
        _sym_tmp_32 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_32, 517);
        $r122 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r123 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r123.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 4, "I4", 2, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r124 = virtualinvoke $r123.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r125 = virtualinvoke $r124.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r126 = virtualinvoke $r125.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r127 = virtualinvoke $r126.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r122.<java.util.List: boolean add(java.lang.Object)>($r127);
        _sym_tmp_33 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_33, 517);
        $r128 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r129 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r129.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 3, "I3", 2, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r130 = virtualinvoke $r129.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, -1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r131 = virtualinvoke $r130.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r132 = virtualinvoke $r131.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r128.<java.util.List: boolean add(java.lang.Object)>($r132);
        _sym_tmp_34 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_34, 517);
        $r133 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r134 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r134.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 2, "L3", 4, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r135 = virtualinvoke $r134.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r136 = virtualinvoke $r135.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r137 = virtualinvoke $r136.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r133.<java.util.List: boolean add(java.lang.Object)>($r137);
        _sym_tmp_35 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_35, 517);
        $r138 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r139 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r139.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 2, "I2", 2, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r140 = virtualinvoke $r139.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r141 = virtualinvoke $r140.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r138.<java.util.List: boolean add(java.lang.Object)>($r141);
        _sym_tmp_36 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_36, 517);
        $r142 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        $r143 = new org.scoutant.blokish.model.Piece;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21854, null, i0$sym, null, null, null, null);
        specialinvoke $r143.<org.scoutant.blokish.model.Piece: void <init>(int,int,java.lang.String,int,int)>(i0, 1, "O1", 1, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, null, null);
        $r144 = virtualinvoke $r143.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>(0, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r142.<java.util.List: boolean add(java.lang.Object)>($r144);
        _sym_tmp_37 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_37, 517);
        $r145 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i9 = interfaceinvoke $r145.<java.util.List: int size()>();
        $i9$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression nbPieces$sym> = $i9$sym;
        _sym_tmp_38 = r0.<org.scoutant.blokish.model.Board: int nbPieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_38, 615);
        _sym_tmp_38 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Board: int nbPieces$a3tid> = _sym_tmp_38;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(615);
        r0.<org.scoutant.blokish.model.Board: int nbPieces> = $i9;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return;
    }

    public org.scoutant.blokish.model.Piece findPieceByType(java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $z1$sym, $r7$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.model.Board r0;
        java.lang.String r1, $r8;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Iterator r4;
        org.scoutant.blokish.model.Piece r5;
        java.util.List $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;

        r0 := @this: org.scoutant.blokish.model.Board;
        r1 := @parameter0: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21842, 32661, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r2 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45753, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45753, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 517);
        $r6 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45754, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Piece) $r7;
        _sym_tmp_3 = r5.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 528);
        $r8 = r5.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(59, null, null);
        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(59);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45755, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return r5;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45755, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        goto label2;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45754, 1);
        goto label6;

     label6:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        return null;
    }

    public void add(org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_21, $i23$sym, $i22$sym, $r19$sym, $i21$sym, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $r17$sym, $i16$sym, $i15$sym, $r14$sym, $z2$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $r9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $r7$sym, $z0$sym, $i4$sym, i3$sym, i2$sym, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_20, _sym_tmp_19, _sym_tmp_18, _sym_tmp_17, _sym_tmp_16, _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        org.scoutant.blokish.model.Board r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Iterator r4, r13;
        org.scoutant.blokish.model.Square r5, r15;
        java.util.List $r6, $r10, $r12;
        boolean $z0, $z2;
        java.lang.Object $r7, $r14;
        int[][] $r8, $r16, $r18;
        int[] $r9, $r17, $r19;
        java.lang.Exception $r20, r21;

        r0 := @this: org.scoutant.blokish.model.Board;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21856, 32662, 4);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r2 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_21 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45756, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45756, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 2);
        r3 = $r2[2];
        $i4$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Board: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 518);
        $i4 = r0.<org.scoutant.blokish.model.Board: int color>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21852, null, $i4$sym);
        $r6 = virtualinvoke r1.<org.scoutant.blokish.model.Piece: java.util.List squares(int)>($i4);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45757, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Square) $r7;
        $i5$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_3 = r5.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 526);
        $i5 = r5.<org.scoutant.blokish.model.Square: int i>;
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i5$sym, i0, $i5);
        i2 = i0 + $i5;
        $i6$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_4 = r5.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 527);
        $i6 = r5.<org.scoutant.blokish.model.Square: int j>;
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i6$sym, i1, $i6);
        i3 = i1 + $i6;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 0);
        if i2 < 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45758, 0);
        $i7$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 621);
        $i7 = r0.<org.scoutant.blokish.model.Board: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i7$sym, i2, $i7);
        if i2 >= $i7 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45759, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 0);
        if i3 < 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45760, 0);
        $i8$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 621);
        $i8 = r0.<org.scoutant.blokish.model.Board: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, $i8$sym, i3, $i8);
        if i3 >= $i8 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45761, 0);
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 618);
        $r8 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, i2);
        $r9 = $r8[i2];
        $i9$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression value$sym>;
        _sym_tmp_8 = r5.<org.scoutant.blokish.model.Square: int value$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 619);
        $i9 = r5.<org.scoutant.blokish.model.Square: int value>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r9$sym, i3$sym, $i9$sym, $r9, i3, $i9);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r9, i3);
        $r9[i3] = $i9;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        goto label7;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45758, 1);
        goto label7;

        goto label7;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45759, 1);
        goto label7;

        goto label7;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45760, 1);
        goto label7;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45761, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        goto label2;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45757, 1);
        goto label9;

     label9:
        $i10$sym = r1.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_9 = r1.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 470);
        $i10 = r1.<org.scoutant.blokish.model.Piece: int color>;
        $i11$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.model.Board: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 518);
        $i11 = r0.<org.scoutant.blokish.model.Board: int color>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, $i11$sym, $i10, $i11);
        if $i10 != $i11 goto label17;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45762, 0);
        _sym_tmp_11 = r0.<org.scoutant.blokish.model.Board: int pieces$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 517);
        $r10 = r0.<org.scoutant.blokish.model.Board: java.util.List pieces>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(97, null, null);
        interfaceinvoke $r10.<java.util.List: boolean remove(java.lang.Object)>(r1);
        $i12$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression score$sym>;
        _sym_tmp_12 = r0.<org.scoutant.blokish.model.Board: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 474);
        $i12 = r0.<org.scoutant.blokish.model.Board: int score>;
        $i13$sym = r1.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym>;
        _sym_tmp_13 = r1.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 566);
        $i13 = r1.<org.scoutant.blokish.model.Piece: int count>;
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i12$sym, $i13$sym, $i12, $i13);
        $i14 = $i12 + $i13;
        r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression score$sym> = $i14$sym;
        _sym_tmp_14 = r0.<org.scoutant.blokish.model.Board: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_14, 474);
        _sym_tmp_14 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Board: int score$a3tid> = _sym_tmp_14;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(474);
        r0.<org.scoutant.blokish.model.Board: int score> = $i14;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        $r12 = virtualinvoke r1.<org.scoutant.blokish.model.Piece: java.util.List seeds()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;

     label10:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z2 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label18;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45763, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();
        $r14$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r15 = (org.scoutant.blokish.model.Square) $r14;

     label11:
        _sym_tmp_15 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 618);
        $r16 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $i15$sym = r15.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_16 = r15.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_16, 526);
        $i15 = r15.<org.scoutant.blokish.model.Square: int i>;
        $i16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i15$sym, i0, $i15);
        $i16 = i0 + $i15;
        $r17$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r16, $i16);
        $r17 = $r16[$i16];
        $i17$sym = r15.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_17 = r15.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_17, 527);
        $i17 = r15.<org.scoutant.blokish.model.Square: int j>;
        $i18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i17$sym, i1, $i17);
        $i18 = i1 + $i17;
        $i19$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r17$sym, $i18$sym, $r17, $i18);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r17, $i18);
        $i19 = $r17[$i18];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;
        _sym_tmp_21 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i19$sym, null, $i19, 0);
        if $i19 != 0 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45764, 0);
        _sym_tmp_18 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_18, 618);
        $r18 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $i20$sym = r15.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_19 = r15.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_19, 526);
        $i20 = r15.<org.scoutant.blokish.model.Square: int i>;
        $i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i20$sym, i0, $i20);
        $i21 = i0 + $i20;
        $r19$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r18, $i21);
        $r19 = $r18[$i21];
        $i22$sym = r15.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_20 = r15.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_20, 527);
        $i22 = r15.<org.scoutant.blokish.model.Square: int j>;
        $i23$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i22$sym, i1, $i22);
        $i23 = i1 + $i22;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r19$sym, $i23$sym, null, $r19, $i23, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r19, $i23);
        $r19[$i23] = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;
        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45764, 1);
        goto label13;

     label13:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 13);
        r3[13] = 1;

     label14:
        goto label16;

     label15:
        $r20 := @caughtexception;
        r21 = $r20;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 14);
        r3[14] = 1;

     label16:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 15);
        r3[15] = 1;
        goto label10;

        goto label19;

     label17:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45762, 1);
        goto label19;

        goto label19;

     label18:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_21, 45763, 1);
        goto label19;

     label19:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 16);
        r3[16] = 1;
        return;

        catch java.lang.Exception from label11 to label14 with label15;
    }

    public int scoreSeedsIfAdding(org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_16, $i23$sym, $r27$sym, i22$sym, i21$sym, $i20$sym, $i19$sym, $r23$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $r21$sym, $i13$sym, $i12$sym, $r18$sym, $z1$sym, $i11$sym, $i10$sym, $i9$sym, $r14$sym, $i8$sym, $i7$sym, $r11$sym, $z0$sym, $i6$sym, $i5$sym, $r8$sym, $r6$sym, i4$sym, i3$sym, i2$sym, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_15, _sym_tmp_14, _sym_tmp_13, _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, $i23;
        org.scoutant.blokish.model.Board r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        java.lang.Exception r4, $r15, $r24, r25;
        int[][] $r5, $r7, $r13, $r20, $r22, $r26;
        int[] $r6, $r8, $r14, $r21, $r23, $r27;
        java.util.List $r9, $r16;
        java.util.Iterator r10, r17;
        boolean $z0, $z1;
        java.lang.Object $r11, $r18;
        org.scoutant.blokish.model.Square r12, r19;

        r0 := @this: org.scoutant.blokish.model.Board;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21847, 32663, 4);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r2 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_16 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45765, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45765, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 3);
        r3 = $r2[3];
        i2$sym = null;
        i2 = 0;
        i3$sym = null;
        i3 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_16 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 20);
        if i3 >= 20 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45766, 0);
        i4$sym = null;
        i4 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_16 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i4$sym, null, i4, 20);
        if i4 >= 20 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45767, 0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Board: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 622);
        $r5 = r0.<org.scoutant.blokish.model.Board: int[][] ab>;
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r5, i4);
        $r6 = $r5[i4];
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 618);
        $r7 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r7, i4);
        $r8 = $r7[i4];
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r8$sym, i3$sym, $r8, i3);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, i3);
        $i5 = $r8[i3];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r6$sym, i3$sym, $i5$sym, $r6, i3, $i5);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r6, i3);
        $r6[i3] = $i5;
        i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i4$sym, null, i4, 1);
        i4 = i4 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        goto label3;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45767, 1);
        goto label5;

     label5:
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 1);
        i3 = i3 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label2;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45766, 1);
        goto label7;

     label7:
        $i6$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Board: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 518);
        $i6 = r0.<org.scoutant.blokish.model.Board: int color>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21852, null, $i6$sym);
        $r9 = virtualinvoke r1.<org.scoutant.blokish.model.Piece: java.util.List squares(int)>($i6);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;

     label8:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        _sym_tmp_16 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label13;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45768, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();
        $r11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r12 = (org.scoutant.blokish.model.Square) $r11;

     label9:
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Board: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 622);
        $r13 = r0.<org.scoutant.blokish.model.Board: int[][] ab>;
        $i7$sym = r12.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_6 = r12.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 526);
        $i7 = r12.<org.scoutant.blokish.model.Square: int i>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i7$sym, i0, $i7);
        $i8 = i0 + $i7;
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r13, $i8);
        $r14 = $r13[$i8];
        $i9$sym = r12.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_7 = r12.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 527);
        $i9 = r12.<org.scoutant.blokish.model.Square: int j>;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i9$sym, i1, $i9);
        $i10 = i1 + $i9;
        $i11$sym = r12.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression value$sym>;
        _sym_tmp_8 = r12.<org.scoutant.blokish.model.Square: int value$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 619);
        $i11 = r12.<org.scoutant.blokish.model.Square: int value>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r14$sym, $i10$sym, $i11$sym, $r14, $i10, $i11);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r14, $i10);
        $r14[$i10] = $i11;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;

     label10:
        goto label12;

     label11:
        $r15 := @caughtexception;
        r4 = $r15;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;

     label12:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        goto label8;

        goto label14;

     label13:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45768, 1);
        goto label14;

     label14:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        $r16 = virtualinvoke r1.<org.scoutant.blokish.model.Piece: java.util.List seeds()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r17 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;

     label15:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;
        _sym_tmp_16 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label22;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45769, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r18 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();
        $r18$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r19 = (org.scoutant.blokish.model.Square) $r18;

     label16:
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Board: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 622);
        $r20 = r0.<org.scoutant.blokish.model.Board: int[][] ab>;
        $i12$sym = r19.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_10 = r19.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 526);
        $i12 = r19.<org.scoutant.blokish.model.Square: int i>;
        $i13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i12$sym, i0, $i12);
        $i13 = i0 + $i12;
        $r21$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r20, $i13);
        $r21 = $r20[$i13];
        $i14$sym = r19.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_11 = r19.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 527);
        $i14 = r19.<org.scoutant.blokish.model.Square: int j>;
        $i15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i14$sym, i1, $i14);
        $i15 = i1 + $i14;
        $i16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r21$sym, $i15$sym, $r21, $i15);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r21, $i15);
        $i16 = $r21[$i15];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 13);
        r3[13] = 1;
        _sym_tmp_16 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i16$sym, null, $i16, 0);
        if $i16 != 0 goto label17;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45770, 0);
        _sym_tmp_12 = r0.<org.scoutant.blokish.model.Board: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_12, 622);
        $r22 = r0.<org.scoutant.blokish.model.Board: int[][] ab>;
        $i17$sym = r19.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_13 = r19.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_13, 526);
        $i17 = r19.<org.scoutant.blokish.model.Square: int i>;
        $i18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i17$sym, i0, $i17);
        $i18 = i0 + $i17;
        $r23$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r22, $i18);
        $r23 = $r22[$i18];
        $i19$sym = r19.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_14 = r19.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_14, 527);
        $i19 = r19.<org.scoutant.blokish.model.Square: int j>;
        $i20$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i19$sym, i1, $i19);
        $i20 = i1 + $i19;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r23$sym, $i20$sym, null, $r23, $i20, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r23, $i20);
        $r23[$i20] = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 14);
        r3[14] = 1;
        goto label18;

     label17:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45770, 1);
        goto label18;

     label18:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 15);
        r3[15] = 1;

     label19:
        goto label21;

     label20:
        $r24 := @caughtexception;
        r25 = $r24;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 16);
        r3[16] = 1;

     label21:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 17);
        r3[17] = 1;
        goto label15;

        goto label23;

     label22:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45769, 1);
        goto label23;

     label23:
        i21$sym = null;
        i21 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 18, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 18);
        r3[18] = 1;

     label24:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 19, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 19);
        r3[19] = 1;
        _sym_tmp_16 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i21$sym, null, i21, 20);
        if i21 >= 20 goto label30;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45771, 0);
        i22$sym = null;
        i22 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 20, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 20);
        r3[20] = 1;

     label25:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 21, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 21);
        r3[21] = 1;
        _sym_tmp_16 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i22$sym, null, i22, 20);
        if i22 >= 20 goto label28;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45772, 0);
        _sym_tmp_15 = r0.<org.scoutant.blokish.model.Board: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_15, 622);
        $r26 = r0.<org.scoutant.blokish.model.Board: int[][] ab>;
        $r27$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r26, i22);
        $r27 = $r26[i22];
        $i23$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r27$sym, i21$sym, $r27, i21);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r27, i21);
        $i23 = $r27[i21];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 22, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 22);
        r3[22] = 1;
        _sym_tmp_16 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i23$sym, null, $i23, 1);
        if $i23 != 1 goto label26;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45773, 0);
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 23, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 23);
        r3[23] = 1;
        goto label27;

     label26:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45773, 1);
        goto label27;

     label27:
        i22$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i22$sym, null, i22, 1);
        i22 = i22 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 24, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 24);
        r3[24] = 1;
        goto label25;

        goto label29;

     label28:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45772, 1);
        goto label29;

     label29:
        i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i21$sym, null, i21, 1);
        i21 = i21 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 25, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 25);
        r3[25] = 1;
        goto label24;

        goto label31;

     label30:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_16, 45771, 1);
        goto label31;

     label31:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 26, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 26);
        r3[26] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21847, i2$sym);
        return i2;

        catch java.lang.Exception from label9 to label10 with label11;
        catch java.lang.Exception from label16 to label19 with label20;
    }

    public boolean outside(org.scoutant.blokish.model.Square, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_8, $z0$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.scoutant.blokish.model.Board r0;
        org.scoutant.blokish.model.Square r1;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0;

        r0 := @this: org.scoutant.blokish.model.Board;
        r1 := @parameter0: org.scoutant.blokish.model.Square;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21844, 32664, 4);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r2 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_8 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45774, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45774, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 4);
        r3 = $r2[4];
        $i2$sym = r1.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_2 = r1.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 526);
        $i2 = r1.<org.scoutant.blokish.model.Square: int i>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, i0$sym, $i2, i0);
        $i3 = $i2 + i0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 0);
        if $i3 < 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45775, 0);
        $i4$sym = r1.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_3 = r1.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 526);
        $i4 = r1.<org.scoutant.blokish.model.Square: int i>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, i0$sym, $i4, i0);
        $i5 = $i4 + i0;
        $i6$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 621);
        $i6 = r0.<org.scoutant.blokish.model.Board: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, $i6$sym, $i5, $i6);
        if $i5 >= $i6 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45776, 0);
        $i7$sym = r1.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_5 = r1.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 527);
        $i7 = r1.<org.scoutant.blokish.model.Square: int j>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, i1$sym, $i7, i1);
        $i8 = $i7 + i1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, null, $i8, 0);
        if $i8 < 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45777, 0);
        $i9$sym = r1.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_6 = r1.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 527);
        $i9 = r1.<org.scoutant.blokish.model.Square: int j>;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, i1$sym, $i9, i1);
        $i10 = $i9 + i1;
        $i11$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 621);
        $i11 = r0.<org.scoutant.blokish.model.Board: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, $i11$sym, $i10, $i11);
        if $i10 < $i11 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45778, 0);
        goto label5;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45775, 1);
        goto label5;

        goto label5;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45776, 1);
        goto label5;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45777, 1);
        goto label5;

     label5:
        $z0$sym = null;
        $z0 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        goto label8;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45778, 1);
        goto label7;

     label7:
        $z0$sym = null;
        $z0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;

     label8:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21844, $z0$sym);
        return $z0;
    }

    public boolean overlaps(int, org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $b9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $r9$sym, $i4$sym, $i3$sym, $z1$sym, $r7$sym, $z0$sym, r3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.scoutant.blokish.model.Board r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Iterator r4;
        org.scoutant.blokish.model.Square r5;
        java.util.List $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        int[][] $r8;
        int[] $r9;
        byte $b9;

        r0 := @this: org.scoutant.blokish.model.Board;
        i0 := @parameter0: int;
        r1 := @parameter1: org.scoutant.blokish.model.Piece;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21853, 32665, 5);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r2 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45779, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45779, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 5);
        r3 = $r2[5];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r6 = virtualinvoke r1.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45780, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Square) $r7;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21844, null, null, i1$sym, i2$sym);
        $z1 = virtualinvoke r0.<org.scoutant.blokish.model.Board: boolean outside(org.scoutant.blokish.model.Square,int,int)>(r5, i1, i2);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21844);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45781, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21853, null);
        return 1;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45781, 1);
        goto label4;

     label4:
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 618);
        $r8 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $i3$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_3 = r5.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 526);
        $i3 = r5.<org.scoutant.blokish.model.Square: int i>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i3$sym, i1, $i3);
        $i4 = i1 + $i3;
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, $i4);
        $r9 = $r8[$i4];
        $i5$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_4 = r5.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 527);
        $i5 = r5.<org.scoutant.blokish.model.Square: int j>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i5$sym, i2, $i5);
        $i6 = i2 + $i5;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r9$sym, $i6$sym, $r9, $i6);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r9, $i6);
        $i7 = $r9[$i6];
        $i8$sym = r1.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_5 = r1.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 470);
        $i8 = r1.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, i0$sym, $i8, i0);
        if $i8 != i0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45782, 0);
        $b9$sym = null;
        $b9 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label7;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45782, 1);
        goto label6;

     label6:
        $b9$sym = null;
        $b9 = 2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, $b9$sym, $i7, $b9);
        if $i7 <= $b9 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45783, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21853, null);
        return 1;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45783, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        goto label2;

        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45780, 1);
        goto label11;

     label11:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21853, null);
        return 0;
    }

    public boolean fits(int, org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $z1$sym, $z0$sym, $i4$sym, $i3$sym, r3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, $i3, $i4;
        org.scoutant.blokish.model.Board r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0, $z1;

        r0 := @this: org.scoutant.blokish.model.Board;
        i0 := @parameter0: int;
        r1 := @parameter1: org.scoutant.blokish.model.Piece;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21857, 32666, 5);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r2 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45784, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45784, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 6);
        r3 = $r2[6];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, -1);
        if i1 < -1 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45785, 0);
        $i3$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 621);
        $i3 = r0.<org.scoutant.blokish.model.Board: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i3$sym, i1, $i3);
        if i1 > $i3 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45786, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, -1);
        if i2 < -1 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45787, 0);
        $i4$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 621);
        $i4 = r0.<org.scoutant.blokish.model.Board: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i4$sym, i2, $i4);
        if i2 <= $i4 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45788, 0);
        goto label5;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45785, 1);
        goto label5;

        goto label5;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45786, 1);
        goto label5;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45787, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21857, null);
        return 0;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45788, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21853, null, i0$sym, null, i1$sym, i2$sym);
        $z0 = virtualinvoke r0.<org.scoutant.blokish.model.Board: boolean overlaps(int,org.scoutant.blokish.model.Piece,int,int)>(i0, r1, i1, i2);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21853);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45789, 0);
        $z1$sym = null;
        $z1 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        goto label10;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45789, 1);
        goto label9;

     label9:
        $z1$sym = null;
        $z1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;

     label10:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21857, $z1$sym);
        return $z1;
    }

    public boolean onseed(org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i6$sym, $i5$sym, $i4$sym, $r9$sym, $i3$sym, $i2$sym, $z1$sym, $r7$sym, $z0$sym, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.scoutant.blokish.model.Board r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Iterator r4;
        org.scoutant.blokish.model.Square r5;
        java.util.List $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        int[][] $r8;
        int[] $r9;

        r0 := @this: org.scoutant.blokish.model.Board;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21858, 32667, 4);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r2 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45790, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45790, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 7);
        r3 = $r2[7];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r6 = virtualinvoke r1.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45791, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Square) $r7;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21844, null, null, i0$sym, i1$sym);
        $z1 = virtualinvoke r0.<org.scoutant.blokish.model.Board: boolean outside(org.scoutant.blokish.model.Square,int,int)>(r5, i0, i1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21844);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 != 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45792, 0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 618);
        $r8 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $i2$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_3 = r5.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 526);
        $i2 = r5.<org.scoutant.blokish.model.Square: int i>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i2$sym, i0, $i2);
        $i3 = i0 + $i2;
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, $i3);
        $r9 = $r8[$i3];
        $i4$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_4 = r5.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 527);
        $i4 = r5.<org.scoutant.blokish.model.Square: int j>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i4$sym, i1, $i4);
        $i5 = i1 + $i4;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r9$sym, $i5$sym, $r9, $i5);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r9, $i5);
        $i6 = $r9[$i5];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i6$sym, null, $i6, 1);
        if $i6 != 1 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45793, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21858, null);
        return 1;

        goto label5;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45792, 1);
        goto label5;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45793, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        goto label2;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45791, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21858, null);
        return 0;
    }

    public java.lang.String toString()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, $i0;
        org.scoutant.blokish.model.Board r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String $r3;

        r0 := @this: org.scoutant.blokish.model.Board;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(148, 32668, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r1 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45794, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45794, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 8);
        r2 = $r1[8];
        $i0$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 621);
        $i0 = r0.<org.scoutant.blokish.model.Board: int size>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(758, null, $i0$sym);
        $r3 = virtualinvoke r0.<org.scoutant.blokish.model.Board: java.lang.String toString(int)>($i0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    public java.lang.String toString(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i6$sym, $i5$sym, $i4$sym, $r7$sym, $i3$sym, i2$sym, i1$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, $i3, $i4, $i5, $i6;
        org.scoutant.blokish.model.Board r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r8, $r10;
        int[][] $r6;
        int[] $r7;

        r0 := @this: org.scoutant.blokish.model.Board;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(758, 32669, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r1 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45795, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45795, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];
        r3 = "";
        i1$sym = null;
        i1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, i0$sym, i1, i0);
        if i1 >= i0 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45796, 0);
        i2$sym = null;
        i2 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label3:
        $i3$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 621);
        $i3 = r0.<org.scoutant.blokish.model.Board: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i3$sym, i2, $i3);
        if i2 >= $i3 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45797, 0);
        $r4 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 618);
        $r6 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r6, i2);
        $r7 = $r6[i2];
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r7$sym, i1$sym, $r7, i1);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r7, i1);
        $i4 = $r7[i1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i4$sym);
        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
        $i5$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 621);
        $i5 = r0.<org.scoutant.blokish.model.Board: int size>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 1);
        $i6 = $i5 - 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i6$sym, i2, $i6);
        if i2 != $i6 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45798, 0);
        $r9 = "\n";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label6;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45798, 1);
        goto label5;

     label5:
        $r9 = " | ";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;

     label6:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label3;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45797, 1);
        goto label8;

     label8:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        goto label2;

        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45796, 1);
        goto label10;

     label10:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        return r3;
    }

    public java.util.List seeds()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i4$sym, $r6$sym, $i3$sym, $i2$sym, i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4;
        org.scoutant.blokish.model.Board r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList r3, $r4;
        int[][] $r5;
        int[] $r6;
        org.scoutant.blokish.model.Square $r7;

        r0 := @this: org.scoutant.blokish.model.Board;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21781, 32670, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 620);
        $r1 = <org.scoutant.blokish.model.Board: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45799, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45799, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 10);
        r2 = $r1[10];
        $r4 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();
        r3 = $r4;
        i0$sym = null;
        i0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        $i2$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 621);
        $i2 = r0.<org.scoutant.blokish.model.Board: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i2$sym, i0, $i2);
        if i0 >= $i2 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45800, 0);
        i1$sym = null;
        i1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label3:
        $i3$sym = r0.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Board: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 621);
        $i3 = r0.<org.scoutant.blokish.model.Board: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i3$sym, i1, $i3);
        if i1 >= $i3 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45801, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Board: int ij$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 618);
        $r5 = r0.<org.scoutant.blokish.model.Board: int[][] ij>;
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r5, i1);
        $r6 = $r5[i1];
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r6$sym, i0$sym, $r6, i0);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r6, i0);
        $i4 = $r6[i0];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, null, $i4, 1);
        if $i4 != 1 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45802, 0);
        $r7 = new org.scoutant.blokish.model.Square;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, i1$sym, i0$sym);
        specialinvoke $r7.<org.scoutant.blokish.model.Square: void <init>(int,int)>(i1, i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45802, 1);
        goto label5;

     label5:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label3;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45801, 1);
        goto label7;

     label7:
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label2;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45800, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return r3;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32671, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.model.Board: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 11);
        r1 = $r0[11];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32672, 0);
        $r0 = newmultiarray (boolean)[12][];
        _sym_tmp_1 = <org.scoutant.blokish.model.Board: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 620);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.model.Board: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(620);
        <org.scoutant.blokish.model.Board: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[9];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[6];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[17];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[27];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[7];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[11];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[9];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[7];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[1];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[10];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[9];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[1];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/model/Board", -8516984208417573272L);
        return $r0;
    }
}
public class org.scoutant.blokish.model.Game extends java.lang.Object
{
    public static final java.lang.String tag;
    public java.util.List boards;
    public int size;
    public int[] colors;
    public java.util.List moves;
    int[][] ab;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    public static final int tag$a3tid;
    public int boards$a3tid;
    public acteve.symbolic.integer.Expression size$sym;
    public int size$a3tid;
    public acteve.symbolic.integer.Expression colors$sym;
    public int colors$a3tid;
    public int moves$a3tid;
    int ab$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>()
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, $r4$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.model.Game r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList $r3, $r5;
        int[] $r4;
        int[][] $r6;

        r0 := @this: org.scoutant.blokish.model.Game;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(0, 32673, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r1 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45803, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45803, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.util.ArrayList: void <init>()>();
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 473);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Game: int boards$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(473);
        r0.<org.scoutant.blokish.model.Game: java.util.List boards> = $r3;
        r0.<org.scoutant.blokish.model.Game: acteve.symbolic.integer.Expression size$sym> = null;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Game: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 616);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Game: int size$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(616);
        r0.<org.scoutant.blokish.model.Game: int size> = 20;
        $r4 = newarray (int)[4];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r4$sym, null, null, $r4, 0, 2131230738);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 0);
        $r4[0] = 2131230738;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r4$sym, null, null, $r4, 1, 2131230739);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 1);
        $r4[1] = 2131230739;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r4$sym, null, null, $r4, 2, 2131230740);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 2);
        $r4[2] = 2131230740;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r4$sym, null, null, $r4, 3, 2131230741);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, 3);
        $r4[3] = 2131230741;
        r0.<org.scoutant.blokish.model.Game: acteve.symbolic.integer.Expression colors$sym> = $r4$sym;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Game: int colors$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 592);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Game: int colors$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(592);
        r0.<org.scoutant.blokish.model.Game: int[] colors> = $r4;
        $r5 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<java.util.ArrayList: void <init>()>();
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Game: int moves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 605);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Game: int moves$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(605);
        r0.<org.scoutant.blokish.model.Game: java.util.List moves> = $r5;
        $r6 = newmultiarray (int)[20][20];
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Game: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 624);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Game: int ab$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(624);
        r0.<org.scoutant.blokish.model.Game: int[][] ab> = $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(202, null);
        virtualinvoke r0.<org.scoutant.blokish.model.Game: void reset()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void reset()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0;
        org.scoutant.blokish.model.Game r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.List $r3, $r4;
        org.scoutant.blokish.model.Board $r5;

        r0 := @this: org.scoutant.blokish.model.Game;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(202, 32674, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r1 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45804, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45804, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 473);
        $r3 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(76, null);
        interfaceinvoke $r3.<java.util.List: void clear()>();
        i0$sym = null;
        i0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 4);
        if i0 >= 4 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45805, 0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 473);
        $r4 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        $r5 = new org.scoutant.blokish.model.Board;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(28, null, i0$sym);
        specialinvoke $r5.<org.scoutant.blokish.model.Board: void <init>(int)>(i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45805, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return;
    }

    public void historize(org.scoutant.blokish.model.Move)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.model.Game r0;
        org.scoutant.blokish.model.Move r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.List $r4;

        r0 := @this: org.scoutant.blokish.model.Game;
        r1 := @parameter0: org.scoutant.blokish.model.Move;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21859, 32675, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r2 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45806, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45806, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 2);
        r3 = $r2[2];
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int moves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 605);
        $r4 = r0.<org.scoutant.blokish.model.Game: java.util.List moves>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public boolean over()
    {
        acteve.symbolic.integer.Expression _sym_tmp_10, $z4$sym, $z3$sym, $r13$sym, $z2$sym, $r10$sym, $z1$sym, $r7$sym, $z0$sym, $r4$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.model.Game r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.List $r3, $r6, $r9, $r12;
        java.lang.Object $r4, $r7, $r10, $r13;
        org.scoutant.blokish.model.Board $r5, $r8, $r11, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.scoutant.blokish.model.Game;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21825, 32676, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r1 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_10 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45807, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45807, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 3);
        r2 = $r1[3];
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 473);
        $r3 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);
        $r4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r5 = (org.scoutant.blokish.model.Board) $r4;
        $z0$sym = $r5.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression over$sym>;
        _sym_tmp_3 = $r5.<org.scoutant.blokish.model.Board: int over$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 596);
        $z0 = $r5.<org.scoutant.blokish.model.Board: boolean over>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45808, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 473);
        $r6 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(1);
        $r7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r8 = (org.scoutant.blokish.model.Board) $r7;
        $z1$sym = $r8.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression over$sym>;
        _sym_tmp_5 = $r8.<org.scoutant.blokish.model.Board: int over$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 596);
        $z1 = $r8.<org.scoutant.blokish.model.Board: boolean over>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45809, 0);
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 473);
        $r9 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(2);
        $r10$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r11 = (org.scoutant.blokish.model.Board) $r10;
        $z2$sym = $r11.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression over$sym>;
        _sym_tmp_7 = $r11.<org.scoutant.blokish.model.Board: int over$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 596);
        $z2 = $r11.<org.scoutant.blokish.model.Board: boolean over>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45810, 0);
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 473);
        $r12 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(3);
        $r13$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r14 = (org.scoutant.blokish.model.Board) $r13;
        $z3$sym = $r14.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression over$sym>;
        _sym_tmp_9 = $r14.<org.scoutant.blokish.model.Board: int over$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 596);
        $z3 = $r14.<org.scoutant.blokish.model.Board: boolean over>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 == 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45811, 0);
        $z4$sym = null;
        $z4 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        goto label7;

        goto label6;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45808, 1);
        goto label6;

        goto label6;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45809, 1);
        goto label6;

        goto label6;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45810, 1);
        goto label6;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45811, 1);
        goto label6;

     label6:
        $z4$sym = null;
        $z4 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21825, $z4$sym);
        return $z4;
    }

    public int winner()
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $i4$sym, $r7$sym, i3$sym, $i2$sym, $r4$sym, i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, i3, $i4;
        org.scoutant.blokish.model.Game r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.List $r3, $r6;
        java.lang.Object $r4, $r7;
        org.scoutant.blokish.model.Board $r5, $r8;

        r0 := @this: org.scoutant.blokish.model.Game;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21829, 32677, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r1 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45812, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45812, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        i0$sym = null;
        i0 = 0;
        i1$sym = null;
        i1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 4);
        if i1 >= 4 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45813, 0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 473);
        $r3 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i1$sym);
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);
        $r4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r5 = (org.scoutant.blokish.model.Board) $r4;
        $i2$sym = $r5.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression score$sym>;
        _sym_tmp_3 = $r5.<org.scoutant.blokish.model.Board: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 474);
        $i2 = $r5.<org.scoutant.blokish.model.Board: int score>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(892, i0$sym, $i2$sym);
        i0 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i2);
        i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(892);
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45813, 1);
        goto label4;

     label4:
        i3$sym = null;
        i3 = 3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 0);
        if i3 < 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45814, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 473);
        $r6 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i3$sym);
        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i3);
        $r7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r8 = (org.scoutant.blokish.model.Board) $r7;
        $i4$sym = $r8.<org.scoutant.blokish.model.Board: acteve.symbolic.integer.Expression score$sym>;
        _sym_tmp_5 = $r8.<org.scoutant.blokish.model.Board: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 474);
        $i4 = $r8.<org.scoutant.blokish.model.Board: int score>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, i0$sym, $i4, i0);
        if $i4 != i0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45815, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21829, i3$sym);
        return i3;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45815, 1);
        goto label7;

     label7:
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, -1);
        i3 = i3 + -1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label5;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45814, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21829, null);
        return -1;
    }

    public boolean replay(java.util.List)
    {
        acteve.symbolic.integer.Expression _sym_tmp_7, $r10$sym, $r8$sym, $z1$sym, z0$sym, i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0;
        org.scoutant.blokish.model.Game r0;
        java.util.List r1, $r9;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Iterator r4;
        org.scoutant.blokish.model.Move r5;
        org.scoutant.blokish.model.Piece r6, r7;
        boolean z0, $z1;
        java.lang.Object $r8, $r10;
        org.scoutant.blokish.model.Board $r11;
        java.lang.String $r12;

        r0 := @this: org.scoutant.blokish.model.Game;
        r1 := @parameter0: java.util.List;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21793, 32678, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r2 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_7 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45816, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45816, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 5);
        r3 = $r2[5];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_7 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45817, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r8$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Move) $r8;
        _sym_tmp_2 = r5.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 472);
        r6 = r5.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        i0$sym = r6.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_3 = r6.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 470);
        i0 = r6.<org.scoutant.blokish.model.Piece: int color>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 473);
        $r9 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i0$sym);
        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i0);
        $r10$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r11 = (org.scoutant.blokish.model.Board) $r10;
        _sym_tmp_5 = r6.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 528);
        $r12 = r6.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21842, null, null);
        r7 = virtualinvoke $r11.<org.scoutant.blokish.model.Board: org.scoutant.blokish.model.Piece findPieceByType(java.lang.String)>($r12);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21792, null, null);
        virtualinvoke r7.<org.scoutant.blokish.model.Piece: void reset(org.scoutant.blokish.model.Piece)>(r6);
        _sym_tmp_6 = r5.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 472);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r5.<org.scoutant.blokish.model.Move: int piece$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(472);
        r5.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece> = r7;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21754, null, null);
        z0 = virtualinvoke r0.<org.scoutant.blokish.model.Game: boolean play(org.scoutant.blokish.model.Move)>(r5);
        z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21754);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_7 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(z0$sym, null, z0, 0);
        if z0 != 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45818, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21793, null);
        return 0;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45818, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        goto label2;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_7, 45817, 1);
        goto label6;

     label6:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21793, null);
        return 1;
    }

    protected void add(org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, $r5$sym, i2$sym, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0, i1, i2;
        org.scoutant.blokish.model.Game r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.List $r4;
        java.lang.Object $r5;
        org.scoutant.blokish.model.Board $r6;

        r0 := @this: org.scoutant.blokish.model.Game;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21856, 32679, 4);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r2 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45819, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45819, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 6);
        r3 = $r2[6];
        i2$sym = null;
        i2 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_3 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 4);
        if i2 >= 4 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45820, 0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 473);
        $r4 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, i2$sym);
        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);
        $r5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r6 = (org.scoutant.blokish.model.Board) $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21856, null, null, i0$sym, i1$sym);
        virtualinvoke $r6.<org.scoutant.blokish.model.Board: void add(org.scoutant.blokish.model.Piece,int,int)>(r1, i0, i1);
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45820, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return;
    }

    public boolean valid(org.scoutant.blokish.model.Move)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $z0$sym, $i1$sym, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        org.scoutant.blokish.model.Game r0;
        org.scoutant.blokish.model.Move r1;
        boolean[][] $r2;
        boolean[] r3;
        org.scoutant.blokish.model.Piece $r4;
        boolean $z0;

        r0 := @this: org.scoutant.blokish.model.Game;
        r1 := @parameter0: org.scoutant.blokish.model.Move;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21753, 32680, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r2 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45821, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45821, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 7);
        r3 = $r2[7];
        _sym_tmp_2 = r1.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 472);
        $r4 = r1.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        $i0$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_3 = r1.<org.scoutant.blokish.model.Move: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 529);
        $i0 = r1.<org.scoutant.blokish.model.Move: int i>;
        $i1$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_4 = r1.<org.scoutant.blokish.model.Move: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 530);
        $i1 = r1.<org.scoutant.blokish.model.Move: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21807, null, null, $i0$sym, $i1$sym);
        $z0 = virtualinvoke r0.<org.scoutant.blokish.model.Game: boolean valid(org.scoutant.blokish.model.Piece,int,int)>($r4, $i0, $i1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21807);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21753, $z0$sym);
        return $z0;
    }

    public boolean valid(org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $z2$sym, $z1$sym, $r5$sym, $i2$sym, $z0$sym, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2;
        org.scoutant.blokish.model.Game r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0, $z1, $z2;
        java.util.List $r4;
        java.lang.Object $r5;
        org.scoutant.blokish.model.Board $r6;

        r0 := @this: org.scoutant.blokish.model.Game;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21807, 32681, 4);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r2 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45822, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45822, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 8);
        r3 = $r2[8];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21845, null, null, i0$sym, i1$sym);
        $z0 = virtualinvoke r0.<org.scoutant.blokish.model.Game: boolean fits(org.scoutant.blokish.model.Piece,int,int)>(r1, i0, i1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21845);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45823, 0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 473);
        $r4 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        $i2$sym = r1.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_3 = r1.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 470);
        $i2 = r1.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, $i2$sym);
        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);
        $r5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r6 = (org.scoutant.blokish.model.Board) $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21858, null, null, i0$sym, i1$sym);
        $z1 = virtualinvoke $r6.<org.scoutant.blokish.model.Board: boolean onseed(org.scoutant.blokish.model.Piece,int,int)>(r1, i0, i1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21858);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45824, 0);
        $z2$sym = null;
        $z2 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label5;

        goto label4;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45823, 1);
        goto label4;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45824, 1);
        goto label4;

     label4:
        $z2$sym = null;
        $z2 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21807, $z2$sym);
        return $z2;
    }

    public boolean fits(org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $z4$sym, $z3$sym, $r14$sym, $z2$sym, $r11$sym, $z1$sym, $r8$sym, $z0$sym, $r5$sym, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1;
        org.scoutant.blokish.model.Game r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.List $r4, $r7, $r10, $r13;
        java.lang.Object $r5, $r8, $r11, $r14;
        org.scoutant.blokish.model.Board $r6, $r9, $r12, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.scoutant.blokish.model.Game;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21845, 32682, 4);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r2 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45825, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45825, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 9);
        r3 = $r2[9];
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 473);
        $r4 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);
        $r5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r6 = (org.scoutant.blokish.model.Board) $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21857, null, null, null, i0$sym, i1$sym);
        $z0 = virtualinvoke $r6.<org.scoutant.blokish.model.Board: boolean fits(int,org.scoutant.blokish.model.Piece,int,int)>(0, r1, i0, i1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21857);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45826, 0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 473);
        $r7 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(1);
        $r8$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r9 = (org.scoutant.blokish.model.Board) $r8;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21857, null, null, null, i0$sym, i1$sym);
        $z1 = virtualinvoke $r9.<org.scoutant.blokish.model.Board: boolean fits(int,org.scoutant.blokish.model.Piece,int,int)>(1, r1, i0, i1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21857);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45827, 0);
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 473);
        $r10 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(2);
        $r11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r12 = (org.scoutant.blokish.model.Board) $r11;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21857, null, null, null, i0$sym, i1$sym);
        $z2 = virtualinvoke $r12.<org.scoutant.blokish.model.Board: boolean fits(int,org.scoutant.blokish.model.Piece,int,int)>(2, r1, i0, i1);
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21857);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45828, 0);
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 473);
        $r13 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(3);
        $r14$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r15 = (org.scoutant.blokish.model.Board) $r14;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21857, null, null, null, i0$sym, i1$sym);
        $z3 = virtualinvoke $r15.<org.scoutant.blokish.model.Board: boolean fits(int,org.scoutant.blokish.model.Piece,int,int)>(3, r1, i0, i1);
        $z3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21857);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 == 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45829, 0);
        $z4$sym = null;
        $z4 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;
        goto label7;

        goto label6;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45826, 1);
        goto label6;

        goto label6;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45827, 1);
        goto label6;

        goto label6;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45828, 1);
        goto label6;

        goto label6;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45829, 1);
        goto label6;

     label6:
        $z4$sym = null;
        $z4 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;

     label7:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21845, $z4$sym);
        return $z4;
    }

    public boolean play(org.scoutant.blokish.model.Move)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $i3$sym, $i2$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i2, $i3;
        org.scoutant.blokish.model.Game r0;
        org.scoutant.blokish.model.Move r1;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r11, $r14, $r15, $r16;
        java.lang.String $r7, $r12, $r17;
        org.scoutant.blokish.model.Piece $r10, $r13;

        r0 := @this: org.scoutant.blokish.model.Game;
        r1 := @parameter0: org.scoutant.blokish.model.Move;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21754, 32683, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r2 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45830, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45830, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 10);
        r3 = $r2[10];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21753, null, null);
        $z0 = virtualinvoke r0.<org.scoutant.blokish.model.Game: boolean valid(org.scoutant.blokish.model.Move)>(r1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21753);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45831, 0);
        $r4 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not valid! ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7, null, null);
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("sc", $r7);
        $r8 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not valid! ");
        _sym_tmp_2 = r1.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 472);
        $r10 = r1.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(7, null, null);
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("sc", $r12);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21754, null);
        return 0;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45831, 1);
        goto label3;

     label3:
        _sym_tmp_3 = r1.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 472);
        $r13 = r1.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        $i2$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_4 = r1.<org.scoutant.blokish.model.Move: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 529);
        $i2 = r1.<org.scoutant.blokish.model.Move: int i>;
        $i3$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_5 = r1.<org.scoutant.blokish.model.Move: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 530);
        $i3 = r1.<org.scoutant.blokish.model.Move: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21856, null, null, $i2$sym, $i3$sym);
        virtualinvoke r0.<org.scoutant.blokish.model.Game: void add(org.scoutant.blokish.model.Piece,int,int)>($r13, $i2, $i3);
        $r14 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("played move : ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(147, null, null);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(624, null, null);
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("sc", $r17);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21859, null, null);
        virtualinvoke r0.<org.scoutant.blokish.model.Game: void historize(org.scoutant.blokish.model.Move)>(r1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21754, null);
        return 1;
    }

    public java.lang.String toString()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $r11$sym, $z0$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0;
        org.scoutant.blokish.model.Game r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String r3, $r15;
        java.util.Iterator r4;
        org.scoutant.blokish.model.Move r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r12, $r13, $r14, $r16;
        java.util.List $r8, $r10;
        boolean $z0;
        java.lang.Object $r11;

        r0 := @this: org.scoutant.blokish.model.Game;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(148, 32684, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r1 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45832, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45832, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 11);
        r2 = $r1[11];
        $r6 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# moves : ");
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int moves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 605);
        $r8 = r0.<org.scoutant.blokish.model.Game: java.util.List moves>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(69, null);
        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(69);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i0$sym);
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Game: int moves$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 605);
        $r10 = r0.<org.scoutant.blokish.model.Game: java.util.List moves>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45833, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r11$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Move) $r11;
        $r12 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21860, null);
        $r15 = staticinvoke <org.scoutant.blokish.model.Move: java.lang.String serialize(org.scoutant.blokish.model.Move)>(r5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r3 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45833, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return r3;
    }

    public java.util.List deserialize(java.lang.String)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        org.scoutant.blokish.model.Game r0;
        java.lang.String r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.ArrayList r4, $r5;

        r0 := @this: org.scoutant.blokish.model.Game;
        r1 := @parameter0: java.lang.String;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21861, 32685, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r2 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45834, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45834, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 12);
        r3 = $r2[12];
        $r5 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r5.<java.util.ArrayList: void <init>()>();
        r4 = $r5;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return r4;
    }

    private int scoreEnemySeedsIfAdding(org.scoutant.blokish.model.Board, org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_10, $i13$sym, $r24$sym, i12$sym, i11$sym, $i10$sym, $i9$sym, $r20$sym, $i8$sym, $i7$sym, $r17$sym, $z1$sym, $i6$sym, $r13$sym, $i5$sym, $r10$sym, $z0$sym, $r7$sym, i4$sym, i3$sym, i2$sym, r4$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13;
        org.scoutant.blokish.model.Game r0;
        org.scoutant.blokish.model.Board r1;
        org.scoutant.blokish.model.Piece r2;
        boolean[][] $r3;
        boolean[] r4;
        java.lang.Exception r5, $r14, $r21, r22;
        int[][] $r6, $r12, $r19, $r23;
        int[] $r7, $r13, $r20, $r24;
        java.util.List $r8, $r15;
        java.util.Iterator r9, r16;
        boolean $z0, $z1;
        java.lang.Object $r10, $r17;
        org.scoutant.blokish.model.Square r11, r18;

        r0 := @this: org.scoutant.blokish.model.Game;
        r1 := @parameter0: org.scoutant.blokish.model.Board;
        r2 := @parameter1: org.scoutant.blokish.model.Piece;
        i0 := @parameter2: int;
        i1 := @parameter3: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21862, 32686, 5);
        i0$sym = a3targs$symargs[3];
        i1$sym = a3targs$symargs[4];
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r3 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_10 = null;
        if $r3 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45835, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r3 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45835, 1);
        goto label1;

     label1:
        r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, 13);
        r4 = $r3[13];
        i2$sym = null;
        i2 = 0;
        i3$sym = null;
        i3 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 0);
        r4[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 1);
        r4[1] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 20);
        if i3 >= 20 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45836, 0);
        i4$sym = null;
        i4 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 2);
        r4[2] = 1;

     label3:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 3);
        r4[3] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i4$sym, null, i4, 20);
        if i4 >= 20 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45837, 0);
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 624);
        $r6 = r0.<org.scoutant.blokish.model.Game: int[][] ab>;
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r6, i4);
        $r7 = $r6[i4];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r7$sym, i3$sym, null, $r7, i3, 0);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r7, i3);
        $r7[i3] = 0;
        i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i4$sym, null, i4, 1);
        i4 = i4 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 4);
        r4[4] = 1;
        goto label3;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45837, 1);
        goto label5;

     label5:
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 1);
        i3 = i3 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 5);
        r4[5] = 1;
        goto label2;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45836, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21781, null);
        $r8 = virtualinvoke r1.<org.scoutant.blokish.model.Board: java.util.List seeds()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 6);
        r4[6] = 1;

     label8:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 7);
        r4[7] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label13;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45838, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();
        $r10$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r11 = (org.scoutant.blokish.model.Square) $r10;

     label9:
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Game: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 624);
        $r12 = r0.<org.scoutant.blokish.model.Game: int[][] ab>;
        $i5$sym = r11.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_4 = r11.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 526);
        $i5 = r11.<org.scoutant.blokish.model.Square: int i>;
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r12, $i5);
        $r13 = $r12[$i5];
        $i6$sym = r11.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_5 = r11.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 527);
        $i6 = r11.<org.scoutant.blokish.model.Square: int j>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r13$sym, $i6$sym, null, $r13, $i6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r13, $i6);
        $r13[$i6] = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 8);
        r4[8] = 1;

     label10:
        goto label12;

     label11:
        $r14 := @caughtexception;
        r5 = $r14;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 9);
        r4[9] = 1;

     label12:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 10);
        r4[10] = 1;
        goto label8;

        goto label14;

     label13:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45838, 1);
        goto label14;

     label14:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r15 = virtualinvoke r2.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 11);
        r4[11] = 1;

     label15:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z1 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 12);
        r4[12] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label20;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45839, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r17 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();
        $r17$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r18 = (org.scoutant.blokish.model.Square) $r17;

     label16:
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Game: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 624);
        $r19 = r0.<org.scoutant.blokish.model.Game: int[][] ab>;
        $i7$sym = r18.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_7 = r18.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 526);
        $i7 = r18.<org.scoutant.blokish.model.Square: int i>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i7$sym, i0, $i7);
        $i8 = i0 + $i7;
        $r20$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r19, $i8);
        $r20 = $r19[$i8];
        $i9$sym = r18.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_8 = r18.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 527);
        $i9 = r18.<org.scoutant.blokish.model.Square: int j>;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i9$sym, i1, $i9);
        $i10 = i1 + $i9;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r20$sym, $i10$sym, null, $r20, $i10, 0);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r20, $i10);
        $r20[$i10] = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 13);
        r4[13] = 1;

     label17:
        goto label19;

     label18:
        $r21 := @caughtexception;
        r22 = $r21;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 14);
        r4[14] = 1;

     label19:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 15, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 15);
        r4[15] = 1;
        goto label15;

        goto label21;

     label20:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45839, 1);
        goto label21;

     label21:
        i11$sym = null;
        i11 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 16, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 16);
        r4[16] = 1;

     label22:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 17, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 17);
        r4[17] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i11$sym, null, i11, 20);
        if i11 >= 20 goto label28;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45840, 0);
        i12$sym = null;
        i12 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 18, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 18);
        r4[18] = 1;

     label23:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 19, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 19);
        r4[19] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i12$sym, null, i12, 20);
        if i12 >= 20 goto label26;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45841, 0);
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Game: int ab$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 624);
        $r23 = r0.<org.scoutant.blokish.model.Game: int[][] ab>;
        $r24$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r23, i12);
        $r24 = $r23[i12];
        $i13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r24$sym, i11$sym, $r24, i11);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r24, i11);
        $i13 = $r24[i11];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 20, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 20);
        r4[20] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i13$sym, null, $i13, 1);
        if $i13 != 1 goto label24;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45842, 0);
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 21, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 21);
        r4[21] = 1;
        goto label25;

     label24:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45842, 1);
        goto label25;

     label25:
        i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i12$sym, null, i12, 1);
        i12 = i12 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 22, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 22);
        r4[22] = 1;
        goto label23;

        goto label27;

     label26:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45841, 1);
        goto label27;

     label27:
        i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i11$sym, null, i11, 1);
        i11 = i11 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 23, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 23);
        r4[23] = 1;
        goto label22;

        goto label29;

     label28:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45840, 1);
        goto label29;

     label29:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r4$sym, null, null, r4, 24, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r4, 24);
        r4[24] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21862, i2$sym);
        return i2;

        catch java.lang.Exception from label9 to label10 with label11;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    public int scoreEnemySeedsIfAdding(int, org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, i5$sym, $i4$sym, $r5$sym, b3$sym, r3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0, i1, i2, $i4, i5;
        org.scoutant.blokish.model.Game r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;
        byte b3;
        java.util.List $r4;
        java.lang.Object $r5;
        org.scoutant.blokish.model.Board $r6;

        r0 := @this: org.scoutant.blokish.model.Game;
        i0 := @parameter0: int;
        r1 := @parameter1: org.scoutant.blokish.model.Piece;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21848, 32687, 5);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 623);
        $r2 = <org.scoutant.blokish.model.Game: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45843, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45843, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 14);
        r3 = $r2[14];
        b3$sym = null;
        b3 = 0;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Game: int boards$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 473);
        $r4 = r0.<org.scoutant.blokish.model.Game: java.util.List boards>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(348, null, null);
        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);
        $r5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(348);
        $r6 = (org.scoutant.blokish.model.Board) $r5;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21862, null, null, null, i1$sym, i2$sym);
        $i4 = specialinvoke r0.<org.scoutant.blokish.model.Game: int scoreEnemySeedsIfAdding(org.scoutant.blokish.model.Board,org.scoutant.blokish.model.Piece,int,int)>($r6, r1, i1, i2);
        $i4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21862);
        i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(b3$sym, $i4$sym, b3, $i4);
        i5 = b3 + $i4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21848, i5$sym);
        return i5;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32688, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.model.Game: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 15);
        r1 = $r0[15];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r16$sym, $r15$sym, $r14$sym, $r13$sym, $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32689, 0);
        $r0 = newmultiarray (boolean)[16][];
        _sym_tmp_1 = <org.scoutant.blokish.model.Game: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 623);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.model.Game: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(623);
        <org.scoutant.blokish.model.Game: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[4];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[7];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[9];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[6];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[4];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[1];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[5];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[7];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[3];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[4];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        $r13 = newarray (boolean)[1];
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 12);
        $r0[12] = $r13;
        $r14 = newarray (boolean)[25];
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 13);
        $r0[13] = $r14;
        $r15 = newarray (boolean)[1];
        $r15$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 14);
        $r0[14] = $r15;
        $r16 = newarray (boolean)[1];
        $r16$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 15);
        $r0[15] = $r16;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/model/Game", -5623186605033317297L);
        return $r0;
    }
}
public class org.scoutant.blokish.model.Move extends java.lang.Object implements java.lang.Comparable
{
    public org.scoutant.blokish.model.Piece piece;
    public int i;
    public int j;
    public int score;
    public org.scoutant.blokish.model.Piece ghost;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    public int piece$a3tid;
    public acteve.symbolic.integer.Expression i$sym;
    public int i$a3tid;
    public acteve.symbolic.integer.Expression j$sym;
    public int j$a3tid;
    public acteve.symbolic.integer.Expression score$sym;
    public int score$a3tid;
    public int ghost$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1;
        org.scoutant.blokish.model.Move r0;
        org.scoutant.blokish.model.Piece r1, $r4;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.model.Move;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21752, 32690, 4);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Move: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 625);
        $r2 = <org.scoutant.blokish.model.Move: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45844, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Move: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45844, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 472);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Move: int piece$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(472);
        r0.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece> = r1;
        r0.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression i$sym> = i0$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Move: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 529);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Move: int i$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(529);
        r0.<org.scoutant.blokish.model.Move: int i> = i0;
        r0.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression j$sym> = i1$sym;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Move: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 530);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Move: int j$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(530);
        r0.<org.scoutant.blokish.model.Move: int j> = i1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21851, null);
        $r4 = virtualinvoke r1.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece clone()>();
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Move: int ghost$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 614);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Move: int ghost$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(614);
        r0.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece ghost> = $r4;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void <init>(org.scoutant.blokish.model.Piece, int, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0, i1, i2;
        org.scoutant.blokish.model.Move r0;
        org.scoutant.blokish.model.Piece r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.model.Move;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21863, 32691, 5);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        _sym_tmp_1 = <org.scoutant.blokish.model.Move: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 625);
        $r2 = <org.scoutant.blokish.model.Move: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45845, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Move: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45845, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21752, null, null, i0$sym, i1$sym);
        specialinvoke r0.<org.scoutant.blokish.model.Move: void <init>(org.scoutant.blokish.model.Piece,int,int)>(r1, i0, i1);
        r0.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression score$sym> = i2$sym;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Move: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 617);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Move: int score$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(617);
        r0.<org.scoutant.blokish.model.Move: int score> = i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public java.lang.String toString()
    {
        acteve.symbolic.integer.Expression _sym_tmp_9, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3;
        org.scoutant.blokish.model.Move r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        org.scoutant.blokish.model.Piece $r5, $r8;
        java.lang.String $r9, $r17;

        r0 := @this: org.scoutant.blokish.model.Move;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(148, 32692, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Move: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 625);
        $r1 = <org.scoutant.blokish.model.Move: boolean[][] $VRc>;
        _sym_tmp_9 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45846, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Move: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45846, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        $r3 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 472);
        $r5 = r0.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        $i0$sym = $r5.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_3 = $r5.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 470);
        $i0 = $r5.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i0$sym);
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 472);
        $r8 = r0.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        _sym_tmp_5 = $r8.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 528);
        $r9 = $r8.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $i1$sym = r0.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Move: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 529);
        $i1 = r0.<org.scoutant.blokish.model.Move: int i>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i1$sym);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $i2$sym = r0.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Move: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 530);
        $i2 = r0.<org.scoutant.blokish.model.Move: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i2$sym);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $i3$sym = r0.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression score$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Move: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 617);
        $i3 = r0.<org.scoutant.blokish.model.Move: int score>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i3$sym);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r17;
    }

    public int compareTo(org.scoutant.blokish.model.Move)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i2$sym, $i1$sym, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2;
        org.scoutant.blokish.model.Move r0, r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.model.Move;
        r1 := @parameter0: org.scoutant.blokish.model.Move;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21864, 32693, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.Move: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 625);
        $r2 = <org.scoutant.blokish.model.Move: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45847, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Move: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45847, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 3);
        r3 = $r2[3];
        $i0$sym = r0.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression score$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Move: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 617);
        $i0 = r0.<org.scoutant.blokish.model.Move: int score>;
        $i1$sym = r1.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression score$sym>;
        _sym_tmp_3 = r1.<org.scoutant.blokish.model.Move: int score$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 617);
        $i1 = r1.<org.scoutant.blokish.model.Move: int score>;
        $i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, $i1$sym, $i0, $i1);
        $i2 = $i0 - $i1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21864, $i2$sym);
        return $i2;
    }

    public static java.lang.String serialize(org.scoutant.blokish.model.Move)
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        org.scoutant.blokish.model.Move r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        org.scoutant.blokish.model.Piece $r6;
        java.lang.String $r7, $r8;

        r0 := @parameter0: org.scoutant.blokish.model.Move;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21860, 32694, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Move: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 625);
        $r1 = <org.scoutant.blokish.model.Move: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45848, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Move: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45848, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        $r3 = newarray (java.lang.Object)[3];
        $i0$sym = r0.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Move: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 529);
        $i0 = r0.<org.scoutant.blokish.model.Move: int i>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5, $i0$sym);
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 0);
        $r3[0] = $r4;
        $i1$sym = r0.<org.scoutant.blokish.model.Move: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Move: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 530);
        $i1 = r0.<org.scoutant.blokish.model.Move: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(5, $i1$sym);
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 1);
        $r3[1] = $r5;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Move: int piece$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 472);
        $r6 = r0.<org.scoutant.blokish.model.Move: org.scoutant.blokish.model.Piece piece>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21865, null);
        $r7 = staticinvoke <org.scoutant.blokish.model.Piece: java.lang.String serialize(org.scoutant.blokish.model.Piece)>($r6);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r3, 2);
        $r3[2] = $r7;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(6, null, null);
        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s:%s", $r3);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r8;
    }

    public volatile int compareTo(java.lang.Object)
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression $i0$sym, r1$sym;
        org.scoutant.blokish.model.Move r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.scoutant.blokish.model.Move;
        r1 := @parameter0: java.lang.Object;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(5212, 32695, 2);
        r1$sym = a3targs$symargs[1];
        $r2 = (org.scoutant.blokish.model.Move) r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21864, null, null);
        $i0 = virtualinvoke r0.<org.scoutant.blokish.model.Move: int compareTo(org.scoutant.blokish.model.Move)>($r2);
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21864);
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(5212, $i0$sym);
        return $i0;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32696, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.model.Move: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 6);
        r1 = $r0[6];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32697, 0);
        $r0 = newmultiarray (boolean)[7][];
        _sym_tmp_1 = <org.scoutant.blokish.model.Move: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 625);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.model.Move: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(625);
        <org.scoutant.blokish.model.Move: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/model/Move", 36080168269327006L);
        return $r0;
    }
}
public class org.scoutant.blokish.model.Piece extends java.lang.Object
{
    public java.lang.String type;
    public int size;
    public int color;
    private int[][] a;
    private int[][] b;
    private boolean actual;
    public int rotations;
    public int flips;
    public int count;
    private int h;
    private int r;
    private int f;
    private boolean odd;
    public static final java.lang.String tag;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    public int type$a3tid;
    public acteve.symbolic.integer.Expression size$sym;
    public int size$a3tid;
    public acteve.symbolic.integer.Expression color$sym;
    public int color$a3tid;
    private int a$a3tid;
    private int b$a3tid;
    private acteve.symbolic.integer.Expression actual$sym;
    private int actual$a3tid;
    public acteve.symbolic.integer.Expression rotations$sym;
    public int rotations$a3tid;
    public acteve.symbolic.integer.Expression flips$sym;
    public int flips$a3tid;
    public acteve.symbolic.integer.Expression count$sym;
    public int count$a3tid;
    private acteve.symbolic.integer.Expression h$sym;
    private int h$a3tid;
    private acteve.symbolic.integer.Expression r$sym;
    private int r$a3tid;
    private acteve.symbolic.integer.Expression f$sym;
    private int f$a3tid;
    private acteve.symbolic.integer.Expression odd$sym;
    private int odd$a3tid;
    public static final int tag$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(int, int, java.lang.String, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r3$sym, i3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3;
        org.scoutant.blokish.model.Piece r0;
        java.lang.String r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        i2 := @parameter3: int;
        i3 := @parameter4: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21854, 32698, 6);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        i2$sym = a3targs$symargs[4];
        i3$sym = a3targs$symargs[5];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r2 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45849, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45849, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 0);
        r3 = $r2[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9145, null, i1$sym, null, i2$sym, i3$sym);
        specialinvoke r0.<org.scoutant.blokish.model.Piece: void <init>(int,java.lang.String,int,int)>(i1, r1, i2, i3);
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym> = i0$sym;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 470);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int color$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(470);
        r0.<org.scoutant.blokish.model.Piece: int color> = i0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return;
    }

    public void <init>(int, java.lang.String, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_13, $z0$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, r3$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_12, _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, $i3, $i4, $i5, $i6;
        org.scoutant.blokish.model.Piece r0;
        java.lang.String r1;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(9145, 32699, 5);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[3];
        i2$sym = a3targs$symargs[4];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r2 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_13 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45850, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45850, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 1);
        r3 = $r2[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym> = null;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 470);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int color$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(470);
        r0.<org.scoutant.blokish.model.Piece: int color> = 0;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression actual$sym> = null;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int actual$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 627);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int actual$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(627);
        r0.<org.scoutant.blokish.model.Piece: boolean actual> = 1;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression rotations$sym> = null;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int rotations$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_4, 613);
        _sym_tmp_4 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int rotations$a3tid> = _sym_tmp_4;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(613);
        r0.<org.scoutant.blokish.model.Piece: int rotations> = 4;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression flips$sym> = null;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int flips$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_5, 612);
        _sym_tmp_5 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int flips$a3tid> = _sym_tmp_5;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(612);
        r0.<org.scoutant.blokish.model.Piece: int flips> = 2;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym> = null;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 566);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int count$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(566);
        r0.<org.scoutant.blokish.model.Piece: int count> = 0;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym> = i0$sym;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_7, 533);
        _sym_tmp_7 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int size$a3tid> = _sym_tmp_7;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(533);
        r0.<org.scoutant.blokish.model.Piece: int size> = i0;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_8, 528);
        _sym_tmp_8 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int type$a3tid> = _sym_tmp_8;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(528);
        r0.<org.scoutant.blokish.model.Piece: java.lang.String type> = r1;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression rotations$sym> = i1$sym;
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Piece: int rotations$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_9, 613);
        _sym_tmp_9 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int rotations$a3tid> = _sym_tmp_9;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(613);
        r0.<org.scoutant.blokish.model.Piece: int rotations> = i1;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression flips$sym> = i2$sym;
        _sym_tmp_10 = r0.<org.scoutant.blokish.model.Piece: int flips$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_10, 612);
        _sym_tmp_10 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int flips$a3tid> = _sym_tmp_10;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(612);
        r0.<org.scoutant.blokish.model.Piece: int flips> = i2;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        $i3 = i0 + 1;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 2);
        $i4 = $i3 / 2;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, null, $i4, 1);
        $i5 = $i4 - 1;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym> = $i5$sym;
        _sym_tmp_11 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 628);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int h$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(628);
        r0.<org.scoutant.blokish.model.Piece: int h> = $i5;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 2);
        $i6 = i0 % 2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_13 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i6$sym, null, $i6, 1);
        if $i6 != 1 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45851, 0);
        $z0$sym = null;
        $z0 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_13, 45851, 1);
        goto label3;

     label3:
        $z0$sym = null;
        $z0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;

     label4:
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression odd$sym> = $z0$sym;
        _sym_tmp_12 = r0.<org.scoutant.blokish.model.Piece: int odd$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_12, 629);
        _sym_tmp_12 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int odd$a3tid> = _sym_tmp_12;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(629);
        r0.<org.scoutant.blokish.model.Piece: boolean odd> = $z0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(202, null);
        virtualinvoke r0.<org.scoutant.blokish.model.Piece: void reset()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return;
    }

    public void reset()
    {
        acteve.symbolic.integer.Expression _sym_tmp_12, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        int[][] $r3, $r4;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(202, 32700, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_12 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45852, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45852, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression r$sym> = null;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int r$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 630);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int r$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(630);
        r0.<org.scoutant.blokish.model.Piece: int r> = 0;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression f$sym> = null;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int f$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 631);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int f$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(631);
        r0.<org.scoutant.blokish.model.Piece: int f> = 0;
        $i0$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 533);
        $i0 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i1$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 533);
        $i1 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $r3 = newmultiarray (int)[$i0][$i1];
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int a$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_6, 632);
        _sym_tmp_6 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int a$a3tid> = _sym_tmp_6;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(632);
        r0.<org.scoutant.blokish.model.Piece: int[][] a> = $r3;
        $i2$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 533);
        $i2 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i3$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 533);
        $i3 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $r4 = newmultiarray (int)[$i2][$i3];
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Piece: int b$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_9, 633);
        _sym_tmp_9 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int b$a3tid> = _sym_tmp_9;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(633);
        r0.<org.scoutant.blokish.model.Piece: int[][] b> = $r4;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression actual$sym> = null;
        _sym_tmp_10 = r0.<org.scoutant.blokish.model.Piece: int actual$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_10, 627);
        _sym_tmp_10 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int actual$a3tid> = _sym_tmp_10;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(627);
        r0.<org.scoutant.blokish.model.Piece: boolean actual> = 1;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym> = null;
        _sym_tmp_11 = r0.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 566);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int count$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(566);
        r0.<org.scoutant.blokish.model.Piece: int count> = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void reset(org.scoutant.blokish.model.Piece)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i1$sym, $i0$sym, $r7$sym, $z0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        org.scoutant.blokish.model.Piece r0, r1;
        boolean[][] $r2;
        boolean[] r3;
        java.util.Iterator r4;
        org.scoutant.blokish.model.Square r5;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: org.scoutant.blokish.model.Piece;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21792, 32701, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r2 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45853, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45853, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 3);
        r3 = $r2[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(202, null);
        virtualinvoke r0.<org.scoutant.blokish.model.Piece: void reset()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r6 = virtualinvoke r1.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45854, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r7$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Square) $r7;
        $i0$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_2 = r5.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 526);
        $i0 = r5.<org.scoutant.blokish.model.Square: int i>;
        $i1$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_3 = r5.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 527);
        $i1 = r5.<org.scoutant.blokish.model.Square: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, $i0$sym, $i1$sym);
        virtualinvoke r0.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>($i0, $i1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45854, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        return;
    }

    public org.scoutant.blokish.model.Piece clone()
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $r9$sym, $z0$sym, $i2$sym, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2;
        org.scoutant.blokish.model.Piece r0, r3, $r6;
        boolean[][] $r1;
        boolean[] r2;
        java.util.Iterator r4;
        org.scoutant.blokish.model.Square r5;
        java.lang.String $r7;
        java.util.List $r8;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21851, 32702, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45855, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45855, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        $r6 = new org.scoutant.blokish.model.Piece;
        $i0$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 533);
        $i0 = r0.<org.scoutant.blokish.model.Piece: int size>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 528);
        $r7 = r0.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        $i1$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression rotations$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int rotations$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 613);
        $i1 = r0.<org.scoutant.blokish.model.Piece: int rotations>;
        $i2$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression flips$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int flips$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 612);
        $i2 = r0.<org.scoutant.blokish.model.Piece: int flips>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(9145, null, $i0$sym, null, $i1$sym, $i2$sym);
        specialinvoke $r6.<org.scoutant.blokish.model.Piece: void <init>(int,java.lang.String,int,int)>($i0, $r7, $i1, $i2);
        r3 = $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r8 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45856, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r9$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Square) $r9;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21843, null, null);
        virtualinvoke r3.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(org.scoutant.blokish.model.Square)>(r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45856, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return r3;
    }

    public org.scoutant.blokish.model.Piece add(org.scoutant.blokish.model.Square)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i1$sym, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        org.scoutant.blokish.model.Piece r0, $r4;
        org.scoutant.blokish.model.Square r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.model.Piece;
        r1 := @parameter0: org.scoutant.blokish.model.Square;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21843, 32703, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r2 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45857, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45857, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 5);
        r3 = $r2[5];
        $i0$sym = r1.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_2 = r1.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 526);
        $i0 = r1.<org.scoutant.blokish.model.Square: int i>;
        $i1$sym = r1.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_3 = r1.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 527);
        $i1 = r1.<org.scoutant.blokish.model.Square: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21855, null, $i0$sym, $i1$sym);
        $r4 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece add(int,int)>($i0, $i1);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        return $r4;
    }

    public org.scoutant.blokish.model.Piece add(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_10, $i10$sym, $i9$sym, $r9$sym, $i8$sym, $r6$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, i3$sym, i2$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.IllegalArgumentException $r3, $r4, $r7;
        int[][] $r5, $r8;
        int[] $r6, $r9;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21855, 32704, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_10 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45858, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45858, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 6);
        r2 = $r1[6];
        $i4$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 628);
        $i4 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i4$sym, i0, $i4);
        i2 = i0 + $i4;
        $i5$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 628);
        $i5 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i5$sym, i1, $i5);
        i3 = i1 + $i5;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 0);
        if i2 < 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45859, 0);
        $i6$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 533);
        $i6 = r0.<org.scoutant.blokish.model.Piece: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i6$sym, i2, $i6);
        if i2 < $i6 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45860, 0);
        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45859, 1);
        goto label3;

     label3:
        $r3 = new java.lang.IllegalArgumentException;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        throw $r3;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45860, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 0);
        if i3 < 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45861, 0);
        $i7$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 533);
        $i7 = r0.<org.scoutant.blokish.model.Piece: int size>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, $i7$sym, i3, $i7);
        if i3 < $i7 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45862, 0);
        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45861, 1);
        goto label7;

     label7:
        $r4 = new java.lang.IllegalArgumentException;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        throw $r4;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45862, 1);
        goto label9;

     label9:
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int a$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 632);
        $r5 = r0.<org.scoutant.blokish.model.Piece: int[][] a>;
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r5, i2);
        $r6 = $r5[i2];
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r6$sym, i3$sym, $r6, i3);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r6, i3);
        $i8 = $r6[i3];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i8$sym, null, $i8, 0);
        if $i8 <= 0 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45863, 0);
        $r7 = new java.lang.IllegalArgumentException;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        throw $r7;

        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45863, 1);
        goto label11;

     label11:
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int a$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 632);
        $r8 = r0.<org.scoutant.blokish.model.Piece: int[][] a>;
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r8, i2);
        $r9 = $r8[i2];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r9$sym, i3$sym, null, $r9, i3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r9, i3);
        $r9[i3] = 1;
        $i9$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 566);
        $i9 = r0.<org.scoutant.blokish.model.Piece: int count>;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, null, $i9, 1);
        $i10 = $i9 + 1;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression count$sym> = $i10$sym;
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Piece: int count$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_9, 566);
        _sym_tmp_9 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int count$a3tid> = _sym_tmp_9;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(566);
        r0.<org.scoutant.blokish.model.Piece: int count> = $i10;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return r0;
    }

    private int[][] v()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0;
        int[][] $r3;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21866, 32705, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45864, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45864, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 7);
        r2 = $r1[7];
        $z0$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression actual$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int actual$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 627);
        $z0 = r0.<org.scoutant.blokish.model.Piece: boolean actual>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45865, 0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int a$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 632);
        $r3 = r0.<org.scoutant.blokish.model.Piece: int[][] a>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45865, 1);
        goto label3;

     label3:
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int b$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 633);
        $r3 = r0.<org.scoutant.blokish.model.Piece: int[][] b>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return $r3;
    }

    private int[][] w()
    {
        acteve.symbolic.integer.Expression _sym_tmp_5, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0;
        int[][] $r3;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21867, 32706, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_5 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45866, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45866, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 8);
        r2 = $r1[8];
        $z0$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression actual$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int actual$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 627);
        $z0 = r0.<org.scoutant.blokish.model.Piece: boolean actual>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_5 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45867, 0);
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int b$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 633);
        $r3 = r0.<org.scoutant.blokish.model.Piece: int[][] b>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_5, 45867, 1);
        goto label3;

     label3:
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int a$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 632);
        $r3 = r0.<org.scoutant.blokish.model.Piece: int[][] a>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return $r3;
    }

    private void toggle()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $z1$sym, $z0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0, $z1;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(12295, 32707, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45868, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45868, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 9);
        r2 = $r1[9];
        $z0$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression actual$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int actual$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 627);
        $z0 = r0.<org.scoutant.blokish.model.Piece: boolean actual>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_4 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 != 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45869, 0);
        $z1$sym = null;
        $z1 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45869, 1);
        goto label3;

     label3:
        $z1$sym = null;
        $z1 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label4:
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression actual$sym> = $z1$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int actual$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 627);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int actual$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(627);
        r0.<org.scoutant.blokish.model.Piece: boolean actual> = $z1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return;
    }

    private int get(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i6$sym, $i5$sym, $i4$sym, $r4$sym, $i3$sym, $i2$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        int[][] $r3;
        int[] $r4;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(5359, 32708, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45870, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45870, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 10);
        r2 = $r1[10];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21866, null);
        $r3 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int[][] v()>();
        $i2$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 628);
        $i2 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i2$sym, i0, $i2);
        $i3 = i0 + $i2;
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, $i3);
        $r4 = $r3[$i3];
        $i4$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 628);
        $i4 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i4$sym, i1, $i4);
        $i5 = i1 + $i4;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int)>($r4$sym, $i5$sym, $r4, $i5);
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r4, $i5);
        $i6 = $r4[$i5];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(5359, $i6$sym);
        return $i6;
    }

    private void set(int, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i6$sym, $i5$sym, $r4$sym, $i4$sym, $i3$sym, r2$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, $i3, $i4, $i5, $i6;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        int[][] $r3;
        int[] $r4;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(13799, 32709, 4);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        i2$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45871, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45871, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 11);
        r2 = $r1[11];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21867, null);
        $r3 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int[][] w()>();
        $i3$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 628);
        $i3 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i3$sym, i0, $i3);
        $i4 = i0 + $i3;
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r3, $i4);
        $r4 = $r3[$i4];
        $i5$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 628);
        $i5 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i5$sym, i1, $i5);
        $i6 = i1 + $i5;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int[],int,int)>($r4$sym, $i6$sym, i2$sym, $r4, $i6, i2);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r4, $i6);
        $r4[$i6] = i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public int getValue(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_8, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(17196, 32710, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_8 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45872, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45872, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 12);
        r2 = $r1[12];
        $i2$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 628);
        $i2 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i2$sym);
        $i3 = neg $i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i3$sym, i0, $i3);
        if i0 < $i3 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45873, 0);
        $i4$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 628);
        $i4 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i4$sym);
        $i5 = neg $i4;
        $i6$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 533);
        $i6 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, $i6$sym, $i5, $i6);
        $i7 = $i5 + $i6;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i7$sym, i0, $i7);
        if i0 >= $i7 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45874, 0);
        $i8$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 628);
        $i8 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i8$sym);
        $i9 = neg $i8;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i9$sym, i1, $i9);
        if i1 < $i9 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45875, 0);
        $i10$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 628);
        $i10 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i10$sym);
        $i11 = neg $i10;
        $i12$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 533);
        $i12 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i11$sym, $i12$sym, $i11, $i12);
        $i13 = $i11 + $i12;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i13$sym, i1, $i13);
        if i1 < $i13 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45876, 0);
        goto label5;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45873, 1);
        goto label5;

        goto label5;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45874, 1);
        goto label5;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45875, 1);
        goto label5;

     label5:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(17196, null);
        return 0;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45876, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5359, null, i0$sym, i1$sym);
        $i14 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int get(int,int)>(i0, i1);
        $i14$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5359);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(17196, $i14$sym);
        return $i14;
    }

    public boolean isValue(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $z0$sym, $i2$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1, $i2;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21868, 32711, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45877, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45877, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 13);
        r2 = $r1[13];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(17196, null, i0$sym, i1$sym);
        $i2 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: int getValue(int,int)>(i0, i1);
        $i2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(17196);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, null, $i2, 0);
        if $i2 <= 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45878, 0);
        $z0$sym = null;
        $z0 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        goto label4;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45878, 1);
        goto label3;

     label3:
        $z0$sym = null;
        $z0 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21868, $z0$sym);
        return $z0;
    }

    public org.scoutant.blokish.model.Piece rotate(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_12, $i27$sym, $i26$sym, $i25$sym, $i24$sym, $i23$sym, $i22$sym, $i21$sym, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $z0$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, i2$sym, i1$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21808, 32712, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_12 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45879, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45879, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 14);
        r2 = $r1[14];
        $i3$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 628);
        $i3 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i3$sym);
        i1 = neg $i3;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        $i4$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 628);
        $i4 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i4$sym);
        $i5 = neg $i4;
        $i6$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 533);
        $i6 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, $i6$sym, $i5, $i6);
        $i7 = $i5 + $i6;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i7$sym, i1, $i7);
        if i1 >= $i7 goto label14;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45880, 0);
        $i8$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 628);
        $i8 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i8$sym);
        i2 = neg $i8;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label3:
        $i9$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 628);
        $i9 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i9$sym);
        $i10 = neg $i9;
        $i11$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 533);
        $i11 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, $i11$sym, $i10, $i11);
        $i12 = $i10 + $i11;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i12$sym, i2, $i12);
        if i2 >= $i12 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45881, 0);
        $z0$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression odd$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Piece: int odd$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 629);
        $z0 = r0.<org.scoutant.blokish.model.Piece: boolean odd>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45882, 0);
        $i13$sym = i2$sym;
        $i13 = i2;
        $i14$sym = i1$sym;
        $i14 = i1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 <= 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45883, 0);
        $i15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>(i2$sym);
        $i15 = neg i2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5359, null, i1$sym, $i15$sym);
        $i16 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int get(int,int)>(i1, $i15);
        $i16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5359);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label6;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45883, 1);
        goto label5;

     label5:
        $i17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>(i1$sym);
        $i17 = neg i1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5359, null, $i17$sym, i2$sym);
        $i16 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int get(int,int)>($i17, i2);
        $i16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5359);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;

     label6:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(13799, null, $i13$sym, $i14$sym, $i16$sym);
        specialinvoke r0.<org.scoutant.blokish.model.Piece: void set(int,int,int)>($i13, $i14, $i16);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        goto label11;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45882, 1);
        goto label8;

     label8:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 0);
        if i0 >= 0 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45884, 0);
        $i18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>(i1$sym);
        $i18 = neg i1;
        $i19$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i18$sym, null, $i18, 1);
        $i19 = $i18 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5359, null, $i19$sym, i2$sym);
        $i20 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int get(int,int)>($i19, i2);
        $i20$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5359);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(13799, null, i2$sym, i1$sym, $i20$sym);
        specialinvoke r0.<org.scoutant.blokish.model.Piece: void set(int,int,int)>(i2, i1, $i20);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 10);
        r2[10] = 1;
        goto label11;

        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45884, 1);
        goto label10;

     label10:
        $i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>(i2$sym);
        $i21 = neg i2;
        $i22$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i21$sym, null, $i21, 1);
        $i22 = $i21 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5359, null, i1$sym, $i22$sym);
        $i23 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int get(int,int)>(i1, $i22);
        $i23$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5359);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(13799, null, i2$sym, i1$sym, $i23$sym);
        specialinvoke r0.<org.scoutant.blokish.model.Piece: void set(int,int,int)>(i2, i1, $i23);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 11);
        r2[11] = 1;

     label11:
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 12);
        r2[12] = 1;
        goto label3;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45881, 1);
        goto label13;

     label13:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 13, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 13);
        r2[13] = 1;
        goto label2;

        goto label15;

     label14:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45880, 1);
        goto label15;

     label15:
        $i24$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression r$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Piece: int r$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 630);
        $i24 = r0.<org.scoutant.blokish.model.Piece: int r>;
        $i25$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i24$sym, null, $i24, 1);
        $i25 = $i24 + 1;
        $i26$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression rotations$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.model.Piece: int rotations$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 613);
        $i26 = r0.<org.scoutant.blokish.model.Piece: int rotations>;
        $i27$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i25$sym, $i26$sym, $i25, $i26);
        $i27 = $i25 % $i26;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression r$sym> = $i27$sym;
        _sym_tmp_11 = r0.<org.scoutant.blokish.model.Piece: int r$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 630);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int r$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(630);
        r0.<org.scoutant.blokish.model.Piece: int r> = $i27;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(12295, null);
        specialinvoke r0.<org.scoutant.blokish.model.Piece: void toggle()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 14, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 14);
        r2[14] = 1;
        return r0;
    }

    public org.scoutant.blokish.model.Piece flip()
    {
        acteve.symbolic.integer.Expression _sym_tmp_12, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $z0$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21810, 32713, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_12 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45885, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45885, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 15);
        r2 = $r1[15];
        $i2$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 628);
        $i2 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i2$sym);
        i0 = neg $i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        $i3$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 628);
        $i3 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i3$sym);
        $i4 = neg $i3;
        $i5$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 533);
        $i5 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, $i5$sym, $i4, $i5);
        $i6 = $i4 + $i5;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i6$sym, i0, $i6);
        if i0 >= $i6 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45886, 0);
        $i7$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 628);
        $i7 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i7$sym);
        i1 = neg $i7;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label3:
        $i8$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 628);
        $i8 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i8$sym);
        $i9 = neg $i8;
        $i10$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 533);
        $i10 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, $i10$sym, $i9, $i10);
        $i11 = $i9 + $i10;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i11$sym, i1, $i11);
        if i1 >= $i11 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45887, 0);
        $z0$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression odd$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Piece: int odd$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 629);
        $z0 = r0.<org.scoutant.blokish.model.Piece: boolean odd>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45888, 0);
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>(i0$sym);
        $i12 = neg i0;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5359, null, $i12$sym, i1$sym);
        $i13 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int get(int,int)>($i12, i1);
        $i13$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5359);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(13799, null, i0$sym, i1$sym, $i13$sym);
        specialinvoke r0.<org.scoutant.blokish.model.Piece: void set(int,int,int)>(i0, i1, $i13);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label6;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45888, 1);
        goto label5;

     label5:
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>(i0$sym);
        $i14 = neg i0;
        $i15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, null, $i14, 1);
        $i15 = $i14 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5359, null, $i15$sym, i1$sym);
        $i16 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int get(int,int)>($i15, i1);
        $i16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5359);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(13799, null, i0$sym, i1$sym, $i16$sym);
        specialinvoke r0.<org.scoutant.blokish.model.Piece: void set(int,int,int)>(i0, i1, $i16);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;

     label6:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label3;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45887, 1);
        goto label8;

     label8:
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        goto label2;

        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45886, 1);
        goto label10;

     label10:
        $i17$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression f$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Piece: int f$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 631);
        $i17 = r0.<org.scoutant.blokish.model.Piece: int f>;
        $i18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i17$sym, null, $i17, 1);
        $i18 = $i17 + 1;
        $i19$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression flips$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.model.Piece: int flips$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 612);
        $i19 = r0.<org.scoutant.blokish.model.Piece: int flips>;
        $i20$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i18$sym, $i19$sym, $i18, $i19);
        $i20 = $i18 % $i19;
        r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression f$sym> = $i20$sym;
        _sym_tmp_11 = r0.<org.scoutant.blokish.model.Piece: int f$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_11, 631);
        _sym_tmp_11 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Piece: int f$a3tid> = _sym_tmp_11;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(631);
        r0.<org.scoutant.blokish.model.Piece: int f> = $i20;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(12295, null);
        specialinvoke r0.<org.scoutant.blokish.model.Piece: void toggle()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        return r0;
    }

    public java.lang.String toLabel()
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String $r3;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21869, 32714, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45889, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45889, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 16);
        r2 = $r1[16];
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 528);
        $r3 = r0.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r3;
    }

    public java.lang.String toString()
    {
        acteve.symbolic.integer.Expression _sym_tmp_11, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String r3, $r5, $r11;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r10, $r12;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(148, 32715, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_11 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45890, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45890, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 17);
        r2 = $r1[17];
        $r4 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 528);
        $r5 = r0.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        $i2$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 628);
        $i2 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i2$sym);
        i0 = neg $i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        $i3$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 628);
        $i3 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i3$sym);
        $i4 = neg $i3;
        $i5$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 533);
        $i5 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, $i5$sym, $i4, $i5);
        $i6 = $i4 + $i5;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_11 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i6$sym, i0, $i6);
        if i0 >= $i6 goto label9;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45891, 0);
        $i7$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 628);
        $i7 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i7$sym);
        i1 = neg $i7;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label3:
        $i8$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 628);
        $i8 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i8$sym);
        $i9 = neg $i8;
        $i10$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 533);
        $i10 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, $i10$sym, $i9, $i10);
        $i11 = $i9 + $i10;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_11 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i11$sym, i1, $i11);
        if i1 >= $i11 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45892, 0);
        $r8 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5359, null, i1$sym, i0$sym);
        $i12 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int get(int,int)>(i1, i0);
        $i12$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5359);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i12$sym);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);
        $i13$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 628);
        $i13 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i13$sym);
        $i14 = neg $i13;
        $i15$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 533);
        $i15 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, $i15$sym, $i14, $i15);
        $i16 = $i14 + $i15;
        $i17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i16$sym, null, $i16, 1);
        $i17 = $i16 - 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_11 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i17$sym, i1, $i17);
        if i1 != $i17 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45893, 0);
        $r11 = "\n";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label6;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45893, 1);
        goto label5;

     label5:
        $r11 = " | ";
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;

     label6:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label3;

        goto label8;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45892, 1);
        goto label8;

     label8:
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        goto label2;

        goto label10;

     label9:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_11, 45891, 1);
        goto label10;

     label10:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        return r3;
    }

    public boolean touches(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $z5$sym, $z4$sym, $i5$sym, $z3$sym, $i4$sym, $z2$sym, $i3$sym, $z1$sym, $i2$sym, $z0$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21870, 32716, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45894, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45894, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 18);
        r2 = $r1[18];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, i0$sym, i1$sym);
        $z0 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>(i0, i1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45895, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21870, null);
        return 0;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45895, 1);
        goto label3;

     label3:
        $i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        $i2 = i0 - 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, $i2$sym, i1$sym);
        $z1 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>($i2, i1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 != 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45896, 0);
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        $i3 = i1 - 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, i0$sym, $i3$sym);
        $z2 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>(i0, $i3);
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 != 0 goto label5;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45897, 0);
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        $i4 = i0 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, $i4$sym, i1$sym);
        $z3 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>($i4, i1);
        $z3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 != 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45898, 0);
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        $i5 = i1 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, i0$sym, $i5$sym);
        $z4 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>(i0, $i5);
        $z4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z4$sym, null, $z4, 0);
        if $z4 == 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45899, 0);
        goto label7;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45896, 1);
        goto label7;

        goto label7;

     label5:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45897, 1);
        goto label7;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45898, 1);
        goto label7;

     label7:
        $z5$sym = null;
        $z5 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label10;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45899, 1);
        goto label9;

     label9:
        $z5$sym = null;
        $z5 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;

     label10:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21870, $z5$sym);
        return $z5;
    }

    public boolean crosses(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $z6$sym, $z5$sym, $i9$sym, $i8$sym, $z4$sym, $i7$sym, $i6$sym, $z3$sym, $i5$sym, $i4$sym, $z2$sym, $i3$sym, $i2$sym, $z1$sym, $z0$sym, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21871, 32717, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45900, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45900, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 19);
        r2 = $r1[19];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, i0$sym, i1$sym);
        $z0 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>(i0, i1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45901, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21871, null);
        return 0;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45901, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21870, null, i0$sym, i1$sym);
        $z1 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean touches(int,int)>(i0, i1);
        $z1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21870);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z1$sym, null, $z1, 0);
        if $z1 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45902, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21871, null);
        return 0;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45902, 1);
        goto label5;

     label5:
        $i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        $i2 = i0 - 1;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        $i3 = i1 - 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, $i2$sym, $i3$sym);
        $z2 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>($i2, $i3);
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 != 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45903, 0);
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        $i4 = i0 + 1;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        $i5 = i1 - 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, $i4$sym, $i5$sym);
        $z3 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>($i4, $i5);
        $z3$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z3$sym, null, $z3, 0);
        if $z3 != 0 goto label7;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45904, 0);
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        $i6 = i0 + 1;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        $i7 = i1 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, $i6$sym, $i7$sym);
        $z4 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>($i6, $i7);
        $z4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z4$sym, null, $z4, 0);
        if $z4 != 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45905, 0);
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        $i8 = i0 - 1;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        $i9 = i1 + 1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, $i8$sym, $i9$sym);
        $z5 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>($i8, $i9);
        $z5$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        _sym_tmp_2 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z5$sym, null, $z5, 0);
        if $z5 == 0 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45906, 0);
        goto label9;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45903, 1);
        goto label9;

        goto label9;

     label7:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45904, 1);
        goto label9;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45905, 1);
        goto label9;

     label9:
        $z6$sym = null;
        $z6 = 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        goto label12;

        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45906, 1);
        goto label11;

     label11:
        $z6$sym = null;
        $z6 = 0;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;

     label12:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 10);
        r2[10] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21871, $z6$sym);
        return $z6;
    }

    public boolean overlaps(org.scoutant.blokish.model.Piece, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_12, $z0$sym, $i25$sym, $i24$sym, $i23$sym, $i22$sym, $i21$sym, $i20$sym, $i19$sym, $i18$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, i3$sym, i2$sym, r3$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_11, _sym_tmp_10, _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        org.scoutant.blokish.model.Piece r0, r1;
        boolean[][] $r2;
        boolean[] r3;
        boolean $z0;

        r0 := @this: org.scoutant.blokish.model.Piece;
        r1 := @parameter0: org.scoutant.blokish.model.Piece;
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21872, 32718, 4);
        i0$sym = a3targs$symargs[2];
        i1$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r2 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_12 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45907, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45907, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 20);
        r3 = $r2[20];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2121, i0$sym);
        $i4 = staticinvoke <java.lang.Math: int abs(int)>(i0);
        $i4$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2121);
        $i5$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 533);
        $i5 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i6$sym = r1.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_3 = r1.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 533);
        $i6 = r1.<org.scoutant.blokish.model.Piece: int size>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, $i6$sym, $i5, $i6);
        $i7 = $i5 + $i6;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, null, $i7, 2);
        $i8 = $i7 / 2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, $i8$sym, $i4, $i8);
        if $i4 <= $i8 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45908, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21872, null);
        return 0;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45908, 1);
        goto label3;

     label3:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(2121, i1$sym);
        $i9 = staticinvoke <java.lang.Math: int abs(int)>(i1);
        $i9$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(2121);
        $i10$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 533);
        $i10 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i11$sym = r1.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_5 = r1.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 533);
        $i11 = r1.<org.scoutant.blokish.model.Piece: int size>;
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, $i11$sym, $i10, $i11);
        $i12 = $i10 + $i11;
        $i13$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i12$sym, null, $i12, 2);
        $i13 = $i12 / 2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, $i13$sym, $i9, $i13);
        if $i9 <= $i13 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45909, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21872, null);
        return 0;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45909, 1);
        goto label5;

     label5:
        $i14$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 628);
        $i14 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i14$sym);
        i2 = neg $i14;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;

     label6:
        $i15$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 628);
        $i15 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i15$sym);
        $i16 = neg $i15;
        $i17$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 533);
        $i17 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i18$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i16$sym, $i17$sym, $i16, $i17);
        $i18 = $i16 + $i17;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i18$sym, i2, $i18);
        if i2 >= $i18 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45910, 0);
        $i19$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 628);
        $i19 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i19$sym);
        i3 = neg $i19;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;

     label7:
        $i20$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_10 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_10, 628);
        $i20 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i21$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i20$sym);
        $i21 = neg $i20;
        $i22$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_11 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_11, 533);
        $i22 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i23$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i21$sym, $i22$sym, $i21, $i22);
        $i23 = $i21 + $i22;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, $i23$sym, i3, $i23);
        if i3 >= $i23 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45911, 0);
        $i24$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, i3$sym, i0, i3);
        $i24 = i0 + i3;
        $i25$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, i2$sym, i1, i2);
        $i25 = i1 + i2;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, $i24$sym, $i25$sym);
        $z0 = virtualinvoke r1.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>($i24, $i25);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        _sym_tmp_12 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45912, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21872, null);
        return 1;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45912, 1);
        goto label9;

     label9:
        i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i3$sym, null, i3, 1);
        i3 = i3 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        goto label7;

        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45911, 1);
        goto label11;

     label11:
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;
        goto label6;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_12, 45910, 1);
        goto label13;

     label13:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21872, null);
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        acteve.symbolic.integer.Expression _sym_tmp_10, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, i1$sym, i0$sym, r3$sym, r1$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_9, _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.scoutant.blokish.model.Piece r0, r4;
        java.lang.Object r1;
        boolean[][] $r2;
        boolean[] r3;
        java.lang.String $r5, $r6;

        r0 := @this: org.scoutant.blokish.model.Piece;
        r1 := @parameter0: java.lang.Object;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(59, 32719, 2);
        r1$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r2 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_10 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45913, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45913, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 21);
        r3 = $r2[21];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        _sym_tmp_10 = null;
        if r1 != null goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45914, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 1);
        r3[1] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(59, null);
        return 0;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45914, 1);
        goto label3;

     label3:
        r4 = (org.scoutant.blokish.model.Piece) r1;
        _sym_tmp_2 = r4.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 528);
        $r5 = r4.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 528);
        $r6 = r0.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 2);
        r3[2] = 1;
        _sym_tmp_10 = null;
        if $r5 == $r6 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45915, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 3);
        r3[3] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(59, null);
        return 0;

        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45915, 1);
        goto label5;

     label5:
        $i2$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 628);
        $i2 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i2$sym);
        i0 = neg $i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 4);
        r3[4] = 1;

     label6:
        $i3$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 628);
        $i3 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i3$sym);
        $i4 = neg $i3;
        $i5$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 533);
        $i5 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, $i5$sym, $i4, $i5);
        $i6 = $i4 + $i5;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 5);
        r3[5] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i6$sym, i0, $i6);
        if i0 >= $i6 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45916, 0);
        $i7$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 628);
        $i7 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i7$sym);
        i1 = neg $i7;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 6);
        r3[6] = 1;

     label7:
        $i8$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 628);
        $i8 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i8$sym);
        $i9 = neg $i8;
        $i10$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_9 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_9, 533);
        $i10 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, $i10$sym, $i9, $i10);
        $i11 = $i9 + $i10;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 7);
        r3[7] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i11$sym, i1, $i11);
        if i1 >= $i11 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45917, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5359, null, i1$sym, i0$sym);
        $i12 = specialinvoke r0.<org.scoutant.blokish.model.Piece: int get(int,int)>(i1, i0);
        $i12$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5359);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(5359, null, i1$sym, i0$sym);
        $i13 = specialinvoke r4.<org.scoutant.blokish.model.Piece: int get(int,int)>(i1, i0);
        $i13$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(5359);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 8);
        r3[8] = 1;
        _sym_tmp_10 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i12$sym, $i13$sym, $i12, $i13);
        if $i12 == $i13 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45918, 0);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 9);
        r3[9] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(59, null);
        return 0;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45918, 1);
        goto label9;

     label9:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 10);
        r3[10] = 1;
        goto label7;

        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45917, 1);
        goto label11;

     label11:
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 11);
        r3[11] = 1;
        goto label6;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_10, 45916, 1);
        goto label13;

     label13:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 12);
        r3[12] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(59, null);
        return 1;
    }

    public java.util.List squares()
    {
        acteve.symbolic.integer.Expression _sym_tmp_8, $z0$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList r3, $r4;
        boolean $z0;
        org.scoutant.blokish.model.Square $r5;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21802, 32720, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_8 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45919, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45919, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 22);
        r2 = $r1[22];
        $r4 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();
        r3 = $r4;
        $i2$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 628);
        $i2 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i2$sym);
        i0 = neg $i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        $i3$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 628);
        $i3 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i3$sym);
        $i4 = neg $i3;
        $i5$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 533);
        $i5 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, $i5$sym, $i4, $i5);
        $i6 = $i4 + $i5;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i6$sym, i0, $i6);
        if i0 >= $i6 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45920, 0);
        $i7$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 628);
        $i7 = r0.<org.scoutant.blokish.model.Piece: int h>;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i7$sym);
        i1 = neg $i7;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label3:
        $i8$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 628);
        $i8 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i8$sym);
        $i9 = neg $i8;
        $i10$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 533);
        $i10 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i11$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, $i10$sym, $i9, $i10);
        $i11 = $i9 + $i10;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i11$sym, i1, $i11);
        if i1 >= $i11 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45921, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, i1$sym, i0$sym);
        $z0 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>(i1, i0);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45922, 0);
        $r5 = new org.scoutant.blokish.model.Square;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(990, null, i1$sym, i0$sym, null);
        specialinvoke $r5.<org.scoutant.blokish.model.Square: void <init>(int,int,int)>(i1, i0, 3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45922, 1);
        goto label5;

     label5:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label3;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45921, 1);
        goto label7;

     label7:
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label2;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45920, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return r3;
    }

    public java.util.List squares(int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_9, $z2$sym, $z0$sym, $i17$sym, $i16$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, i2$sym, i1$sym, r2$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_8, _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList r3, $r4;
        java.util.List $r5;
        boolean $z0, $z2;
        org.scoutant.blokish.model.Square $r6, $r7;

        r0 := @this: org.scoutant.blokish.model.Piece;
        i0 := @parameter0: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21852, 32721, 2);
        i0$sym = a3targs$symargs[1];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_9 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45923, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45923, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 23);
        r2 = $r1[23];
        $r4 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();
        r3 = $r4;
        $i3$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 470);
        $i3 = r0.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        _sym_tmp_9 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i3$sym, i0, $i3);
        if i0 == $i3 goto label2;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45924, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r5 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        return $r5;

        goto label3;

     label2:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45924, 1);
        goto label3;

     label3:
        $i4$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 628);
        $i4 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i4$sym);
        $i5 = neg $i4;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 1);
        i1 = $i5 - 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label4:
        $i6$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 628);
        $i6 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i6$sym);
        $i7 = neg $i6;
        $i8$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 533);
        $i8 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, $i8$sym, $i7, $i8);
        $i9 = $i7 + $i8;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i9$sym, null, $i9, 1);
        $i10 = $i9 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_9 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i10$sym, i1, $i10);
        if i1 >= $i10 goto label12;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45925, 0);
        $i11$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 628);
        $i11 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i11$sym);
        $i12 = neg $i11;
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i12$sym, null, $i12, 1);
        i2 = $i12 - 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;

     label5:
        $i13$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 628);
        $i13 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i13$sym);
        $i14 = neg $i13;
        $i15$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_8 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_8, 533);
        $i15 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i16$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, $i15$sym, $i14, $i15);
        $i16 = $i14 + $i15;
        $i17$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i16$sym, null, $i16, 1);
        $i17 = $i16 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        _sym_tmp_9 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, $i17$sym, i2, $i17);
        if i2 >= $i17 goto label10;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45926, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21868, null, i2$sym, i1$sym);
        $z0 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean isValue(int,int)>(i2, i1);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21868);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        _sym_tmp_9 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45927, 0);
        $r6 = new org.scoutant.blokish.model.Square;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(990, null, i2$sym, i1$sym, null);
        specialinvoke $r6.<org.scoutant.blokish.model.Square: void <init>(int,int,int)>(i2, i1, 3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r6);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label9;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45927, 1);
        goto label7;

     label7:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21870, null, i2$sym, i1$sym);
        $z2 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean touches(int,int)>(i2, i1);
        $z2$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21870);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        _sym_tmp_9 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z2$sym, null, $z2, 0);
        if $z2 == 0 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45928, 0);
        $r7 = new org.scoutant.blokish.model.Square;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(990, null, i2$sym, i1$sym, null);
        specialinvoke $r7.<org.scoutant.blokish.model.Square: void <init>(int,int,int)>(i2, i1, 2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 9, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 9);
        r2[9] = 1;
        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45928, 1);
        goto label9;

     label9:
        i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i2$sym, null, i2, 1);
        i2 = i2 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 10, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 10);
        r2[10] = 1;
        goto label5;

        goto label11;

     label10:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45926, 1);
        goto label11;

     label11:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 11, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 11);
        r2[11] = 1;
        goto label4;

        goto label13;

     label12:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_9, 45925, 1);
        goto label13;

     label13:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 12, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 12);
        r2[12] = 1;
        return r3;
    }

    public java.util.List seeds()
    {
        acteve.symbolic.integer.Expression _sym_tmp_8, $z0$sym, $i15$sym, $i14$sym, $i13$sym, $i12$sym, $i11$sym, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, i1$sym, i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_7, _sym_tmp_6, _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        java.util.ArrayList r3, $r4;
        boolean $z0;
        org.scoutant.blokish.model.Square $r5;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21781, 32722, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_8 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45929, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45929, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 24);
        r2 = $r1[24];
        $r4 = new java.util.ArrayList;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();
        r3 = $r4;
        $i2$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 628);
        $i2 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i2$sym);
        $i3 = neg $i2;
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i3$sym, null, $i3, 1);
        i0 = $i3 - 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        $i4$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 628);
        $i4 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i5$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i4$sym);
        $i5 = neg $i4;
        $i6$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 533);
        $i6 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i7$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, $i6$sym, $i5, $i6);
        $i7 = $i5 + $i6;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, null, $i7, 1);
        $i8 = $i7 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, $i8$sym, i0, $i8);
        if i0 >= $i8 goto label8;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45930, 0);
        $i9$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 628);
        $i9 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i9$sym);
        $i10 = neg $i9;
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i10$sym, null, $i10, 1);
        i1 = $i10 - 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;

     label3:
        $i11$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression h$sym>;
        _sym_tmp_6 = r0.<org.scoutant.blokish.model.Piece: int h$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_6, 628);
        $i11 = r0.<org.scoutant.blokish.model.Piece: int h>;
        $i12$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)>($i11$sym);
        $i12 = neg $i11;
        $i13$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression size$sym>;
        _sym_tmp_7 = r0.<org.scoutant.blokish.model.Piece: int size$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_7, 533);
        $i13 = r0.<org.scoutant.blokish.model.Piece: int size>;
        $i14$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i12$sym, $i13$sym, $i12, $i13);
        $i14 = $i12 + $i13;
        $i15$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i14$sym, null, $i14, 1);
        $i15 = $i14 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, $i15$sym, i1, $i15);
        if i1 >= $i15 goto label6;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45931, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21871, null, i1$sym, i0$sym);
        $z0 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: boolean crosses(int,int)>(i1, i0);
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21871);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 4, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 4);
        r2[4] = 1;
        _sym_tmp_8 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label4;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45932, 0);
        $r5 = new org.scoutant.blokish.model.Square;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, i1$sym, i0$sym);
        specialinvoke $r5.<org.scoutant.blokish.model.Square: void <init>(int,int)>(i1, i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(68, null, null);
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r5);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 5, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 5);
        r2[5] = 1;
        goto label5;

     label4:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45932, 1);
        goto label5;

     label5:
        i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i1$sym, null, i1, 1);
        i1 = i1 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 6, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 6);
        r2[6] = 1;
        goto label3;

        goto label7;

     label6:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45931, 1);
        goto label7;

     label7:
        i0$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>(i0$sym, null, i0, 1);
        i0 = i0 + 1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 7, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 7);
        r2[7] = 1;
        goto label2;

        goto label9;

     label8:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_8, 45930, 1);
        goto label9;

     label9:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 8, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 8);
        r2[8] = 1;
        return r3;
    }

    public static java.lang.String serialize(org.scoutant.blokish.model.Piece)
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $i2$sym, $i1$sym, $r16$sym, $z0$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2;
        org.scoutant.blokish.model.Piece r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.String r3, $r12, r14;
        java.util.Iterator r4;
        org.scoutant.blokish.model.Square r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r17, $r18, $r19, $r20, $r21, $r22;
        java.util.List $r15;
        boolean $z0;
        java.lang.Object $r16;

        r0 := @parameter0: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21865, 32723, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 626);
        $r1 = <org.scoutant.blokish.model.Piece: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45933, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45933, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 25);
        r2 = $r1[25];
        $r6 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");
        $i0$sym = r0.<org.scoutant.blokish.model.Piece: acteve.symbolic.integer.Expression color$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Piece: int color$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 470);
        $i0 = r0.<org.scoutant.blokish.model.Piece: int color>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i0$sym);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        $r9 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Piece: int type$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 528);
        $r12 = r0.<org.scoutant.blokish.model.Piece: java.lang.String type>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21802, null);
        $r15 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: java.util.List squares()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(94, null);
        r4 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;

     label2:
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(95, null);
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();
        $z0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(95);
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 1, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 1);
        r2[1] = 1;
        _sym_tmp_6 = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($z0$sym, null, $z0, 0);
        if $z0 == 0 goto label3;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45934, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(96, null);
        $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();
        $r16$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(96);
        r5 = (org.scoutant.blokish.model.Square) $r16;
        $r17 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");
        $i1$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_4 = r5.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 526);
        $i1 = r5.<org.scoutant.blokish.model.Square: int i>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i1$sym);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
        $i2$sym = r5.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_5 = r5.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 527);
        $i2 = r5.<org.scoutant.blokish.model.Square: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i2$sym);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        r14 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 2, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 2);
        r2[2] = 1;
        goto label2;

        goto label4;

     label3:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45934, 1);
        goto label4;

     label4:
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 3, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 3);
        r2[3] = 1;
        return r14;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        org.scoutant.blokish.model.Piece r0, $r1;

        r0 := @this: org.scoutant.blokish.model.Piece;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(63, 32724, 1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21851, null);
        $r1 = virtualinvoke r0.<org.scoutant.blokish.model.Piece: org.scoutant.blokish.model.Piece clone()>();
        return $r1;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32725, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.model.Piece: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 27);
        r1 = $r0[27];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r27$sym, $r26$sym, $r25$sym, $r24$sym, $r23$sym, $r22$sym, $r21$sym, $r20$sym, $r19$sym, $r18$sym, $r17$sym, $r16$sym, $r15$sym, $r14$sym, $r13$sym, $r12$sym, $r11$sym, $r10$sym, $r9$sym, $r8$sym, $r7$sym, $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32726, 0);
        $r0 = newmultiarray (boolean)[28][];
        _sym_tmp_1 = <org.scoutant.blokish.model.Piece: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 626);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.model.Piece: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(626);
        <org.scoutant.blokish.model.Piece: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[4];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[4];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[4];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 5);
        $r0[5] = $r6;
        $r7 = newarray (boolean)[9];
        $r7$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r7;
        $r8 = newarray (boolean)[4];
        $r8$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 7);
        $r0[7] = $r8;
        $r9 = newarray (boolean)[4];
        $r9$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 8);
        $r0[8] = $r9;
        $r10 = newarray (boolean)[4];
        $r10$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 9);
        $r0[9] = $r10;
        $r11 = newarray (boolean)[1];
        $r11$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 10);
        $r0[10] = $r11;
        $r12 = newarray (boolean)[1];
        $r12$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 11);
        $r0[11] = $r12;
        $r13 = newarray (boolean)[6];
        $r13$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 12);
        $r0[12] = $r13;
        $r14 = newarray (boolean)[4];
        $r14$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 13);
        $r0[13] = $r14;
        $r15 = newarray (boolean)[15];
        $r15$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 14);
        $r0[14] = $r15;
        $r16 = newarray (boolean)[10];
        $r16$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 15);
        $r0[15] = $r16;
        $r17 = newarray (boolean)[1];
        $r17$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 16);
        $r0[16] = $r17;
        $r18 = newarray (boolean)[10];
        $r18$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 17);
        $r0[17] = $r18;
        $r19 = newarray (boolean)[9];
        $r19$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 18);
        $r0[18] = $r19;
        $r20 = newarray (boolean)[11];
        $r20$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 19);
        $r0[19] = $r20;
        $r21 = newarray (boolean)[13];
        $r21$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 20);
        $r0[20] = $r21;
        $r22 = newarray (boolean)[13];
        $r22$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 21);
        $r0[21] = $r22;
        $r23 = newarray (boolean)[9];
        $r23$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 22);
        $r0[22] = $r23;
        $r24 = newarray (boolean)[13];
        $r24$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 23);
        $r0[23] = $r24;
        $r25 = newarray (boolean)[9];
        $r25$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 24);
        $r0[24] = $r25;
        $r26 = newarray (boolean)[4];
        $r26$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 25);
        $r0[25] = $r26;
        $r27 = newarray (boolean)[1];
        $r27$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 27);
        $r0[27] = $r27;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/model/Piece", 2815751282899141552L);
        return $r0;
    }
}
public class org.scoutant.blokish.model.Square extends java.lang.Object implements java.lang.Comparable
{
    public int i;
    public int j;
    public int value;
    private static final boolean[][] $VRc;
    private static final long serialVersionUID;
    public acteve.symbolic.integer.Expression i$sym;
    public int i$a3tid;
    public acteve.symbolic.integer.Expression j$sym;
    public int j$a3tid;
    public acteve.symbolic.integer.Expression value$sym;
    public int value$a3tid;
    private static final int $VRc$a3tid;
    private static final acteve.symbolic.integer.Expression serialVersionUID$sym;
    private static final int serialVersionUID$a3tid;

    public void <init>(int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, r2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, i0, i1;
        org.scoutant.blokish.model.Square r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.model.Square;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(1371, 32727, 3);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        _sym_tmp_1 = <org.scoutant.blokish.model.Square: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 634);
        $r1 = <org.scoutant.blokish.model.Square: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45935, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Square: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45935, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 0);
        r2 = $r1[0];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym> = i0$sym;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 526);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Square: int i$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(526);
        r0.<org.scoutant.blokish.model.Square: int i> = i0;
        r0.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym> = i1$sym;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_3, 527);
        _sym_tmp_3 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Square: int j$a3tid> = _sym_tmp_3;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(527);
        r0.<org.scoutant.blokish.model.Square: int j> = i1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public void <init>(int, int, int)
    {
        acteve.symbolic.integer.Expression _sym_tmp_3, r2$sym, i2$sym, i1$sym, i0$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_2, _sym_tmp_1, i0, i1, i2;
        org.scoutant.blokish.model.Square r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.model.Square;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(990, 32728, 4);
        i0$sym = a3targs$symargs[1];
        i1$sym = a3targs$symargs[2];
        i2$sym = a3targs$symargs[3];
        _sym_tmp_1 = <org.scoutant.blokish.model.Square: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 634);
        $r1 = <org.scoutant.blokish.model.Square: boolean[][] $VRc>;
        _sym_tmp_3 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45936, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Square: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_3, 45936, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 1);
        r2 = $r1[1];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(1371, null, i0$sym, i1$sym);
        specialinvoke r0.<org.scoutant.blokish.model.Square: void <init>(int,int)>(i0, i1);
        r0.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression value$sym> = i2$sym;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Square: int value$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_2, 619);
        _sym_tmp_2 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        r0.<org.scoutant.blokish.model.Square: int value$a3tid> = _sym_tmp_2;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(619);
        r0.<org.scoutant.blokish.model.Square: int value> = i2;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return;
    }

    public java.lang.String toString()
    {
        acteve.symbolic.integer.Expression _sym_tmp_4, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1;
        org.scoutant.blokish.model.Square r0;
        boolean[][] $r1;
        boolean[] r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.scoutant.blokish.model.Square;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(148, 32729, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Square: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 634);
        $r1 = <org.scoutant.blokish.model.Square: boolean[][] $VRc>;
        _sym_tmp_4 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45937, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Square: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_4, 45937, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 2);
        r2 = $r1[2];
        $r3 = new java.lang.StringBuilder;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(0, null);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
        $i0$sym = r0.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 526);
        $i0 = r0.<org.scoutant.blokish.model.Square: int i>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i0$sym);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
        $i1$sym = r0.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 527);
        $i1 = r0.<org.scoutant.blokish.model.Square: int j>;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(204, null, $i1$sym);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(146, null, null);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(148, null);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        return $r9;
    }

    public int compareTo(org.scoutant.blokish.model.Square)
    {
        acteve.symbolic.integer.Expression _sym_tmp_2, $i2$sym, $i1$sym, $i0$sym, r3$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1, $i0, $i1, $i2;
        org.scoutant.blokish.model.Square r0, r1;
        boolean[][] $r2;
        boolean[] r3;

        r0 := @this: org.scoutant.blokish.model.Square;
        r1 := @parameter0: org.scoutant.blokish.model.Square;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21874, 32730, 2);
        _sym_tmp_1 = <org.scoutant.blokish.model.Square: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 634);
        $r2 = <org.scoutant.blokish.model.Square: boolean[][] $VRc>;
        _sym_tmp_2 = null;
        if $r2 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45938, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r2 = staticinvoke <org.scoutant.blokish.model.Square: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_2, 45938, 1);
        goto label1;

     label1:
        r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r2, 3);
        r3 = $r2[3];
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21873, null);
        $i0 = specialinvoke r0.<org.scoutant.blokish.model.Square: int distance()>();
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21873);
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression)>(21873, null);
        $i1 = specialinvoke r1.<org.scoutant.blokish.model.Square: int distance()>();
        $i1$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21873);
        $i2$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, $i1$sym, $i0, $i1);
        $i2 = $i0 - $i1;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r3$sym, null, null, r3, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r3, 0);
        r3[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21874, $i2$sym);
        return $i2;
    }

    private int distance()
    {
        acteve.symbolic.integer.Expression _sym_tmp_6, $i10$sym, $i9$sym, $i8$sym, $i7$sym, $i6$sym, $i5$sym, $i4$sym, $i3$sym, $i2$sym, $i1$sym, $i0$sym, r2$sym;
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_5, _sym_tmp_4, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.scoutant.blokish.model.Square r0;
        boolean[][] $r1;
        boolean[] r2;

        r0 := @this: org.scoutant.blokish.model.Square;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21873, 32731, 1);
        _sym_tmp_1 = <org.scoutant.blokish.model.Square: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_1, 634);
        $r1 = <org.scoutant.blokish.model.Square: boolean[][] $VRc>;
        _sym_tmp_6 = null;
        if $r1 != null goto label0;

        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45939, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r1 = staticinvoke <org.scoutant.blokish.model.Square: boolean[][] $VRi()>();
        goto label1;

     label0:
        staticinvoke <acteve.symbolic.Util: void assume(acteve.symbolic.integer.Expression,int,boolean)>(_sym_tmp_6, 45939, 1);
        goto label1;

     label1:
        r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r1, 4);
        r2 = $r1[4];
        $i0$sym = r0.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_2 = r0.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_2, 526);
        $i0 = r0.<org.scoutant.blokish.model.Square: int i>;
        $i1$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i0$sym, null, $i0, 10);
        $i1 = $i0 - 10;
        $i2$sym = r0.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression i$sym>;
        _sym_tmp_3 = r0.<org.scoutant.blokish.model.Square: int i$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_3, 526);
        $i2 = r0.<org.scoutant.blokish.model.Square: int i>;
        $i3$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i2$sym, null, $i2, 10);
        $i3 = $i2 - 10;
        $i4$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i1$sym, $i3$sym, $i1, $i3);
        $i4 = $i1 * $i3;
        $i5$sym = r0.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_4 = r0.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_4, 527);
        $i5 = r0.<org.scoutant.blokish.model.Square: int j>;
        $i6$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i5$sym, null, $i5, 10);
        $i6 = $i5 - 10;
        $i7$sym = r0.<org.scoutant.blokish.model.Square: acteve.symbolic.integer.Expression j$sym>;
        _sym_tmp_5 = r0.<org.scoutant.blokish.model.Square: int j$a3tid>;
        staticinvoke <acteve.symbolic.Util: void rw(int,int)>(_sym_tmp_5, 527);
        $i7 = r0.<org.scoutant.blokish.model.Square: int j>;
        $i8$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i7$sym, null, $i7, 10);
        $i8 = $i7 - 10;
        $i9$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i6$sym, $i8$sym, $i6, $i8);
        $i9 = $i6 * $i8;
        $i10$sym = staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,int,int)>($i4$sym, $i9$sym, $i4, $i9);
        $i10 = $i4 + $i9;
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r2$sym, null, null, r2, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r2, 0);
        r2[0] = 1;
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(21873, $i10$sym);
        return $i10;
    }

    public volatile int compareTo(java.lang.Object)
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression $i0$sym, r1$sym;
        org.scoutant.blokish.model.Square r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.scoutant.blokish.model.Square;
        r1 := @parameter0: java.lang.Object;
        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(5212, 32732, 2);
        r1$sym = a3targs$symargs[1];
        $r2 = (org.scoutant.blokish.model.Square) r1;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21874, null, null);
        $i0 = virtualinvoke r0.<org.scoutant.blokish.model.Square: int compareTo(org.scoutant.blokish.model.Square)>($r2);
        $i0$sym = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression retpop(int)>(21874);
        staticinvoke <acteve.symbolic.Util: void retpush(int,acteve.symbolic.integer.Expression)>(5212, $i0$sym);
        return $i0;
    }

    private static void <clinit>()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        acteve.symbolic.integer.Expression r1$sym;
        boolean[][] $r0;
        boolean[] r1;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(27, 32733, 0);
        staticinvoke <acteve.symbolic.Util: void argpush(int)>(21741);
        $r0 = staticinvoke <org.scoutant.blokish.model.Square: boolean[][] $VRi()>();
        r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void readArray(java.lang.Object,int)>($r0, 6);
        r1 = $r0[6];
        staticinvoke <acteve.symbolic.SymbolicOperations: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,boolean[],int,boolean)>(r1$sym, null, null, r1, 0, 1);
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>(r1, 0);
        r1[0] = 1;
        return;
    }

    private static boolean[][] $VRi()
    {
        acteve.symbolic.integer.Expression[] a3targs$symargs;
        int _sym_tmp_1;
        acteve.symbolic.integer.Expression $r6$sym, $r5$sym, $r4$sym, $r3$sym, $r2$sym, $r1$sym;
        boolean[][] $r0;
        boolean[] $r1, $r2, $r3, $r4, $r5, $r6;

        a3targs$symargs = staticinvoke <acteve.symbolic.Util: acteve.symbolic.integer.Expression[] argpop(int,int,int)>(21741, 32734, 0);
        $r0 = newmultiarray (boolean)[7][];
        _sym_tmp_1 = <org.scoutant.blokish.model.Square: int $VRc$a3tid>;
        staticinvoke <acteve.symbolic.Util: void ww(int,int)>(_sym_tmp_1, 634);
        _sym_tmp_1 = staticinvoke <acteve.symbolic.Util: int eventId()>();
        <org.scoutant.blokish.model.Square: int $VRc$a3tid> = _sym_tmp_1;
        staticinvoke <acteve.symbolic.Util: void only_write(int)>(634);
        <org.scoutant.blokish.model.Square: boolean[][] $VRc> = $r0;
        $r1 = newarray (boolean)[1];
        $r1$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 0);
        $r0[0] = $r1;
        $r2 = newarray (boolean)[1];
        $r2$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 1);
        $r0[1] = $r2;
        $r3 = newarray (boolean)[1];
        $r3$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 2);
        $r0[2] = $r3;
        $r4 = newarray (boolean)[1];
        $r4$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 3);
        $r0[3] = $r4;
        $r5 = newarray (boolean)[1];
        $r5$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 4);
        $r0[4] = $r5;
        $r6 = newarray (boolean)[1];
        $r6$sym = null;
        staticinvoke <acteve.symbolic.Util: void writeArray(java.lang.Object,int)>($r0, 6);
        $r0[6] = $r6;
        staticinvoke <acteve.symbolic.Util: void argpush(int,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(21743, null, null, null);
        staticinvoke <com.vladium.emma.rt.RT: void r(boolean[][],java.lang.String,long)>($r0, "org/scoutant/blokish/model/Square", -5778056504717862110L);
        return $r0;
    }
}
