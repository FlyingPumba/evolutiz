Buildfile: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/build_acteve.xml

emma:

-set-mode-check:

-set-debug-files:

-check-env:
 [checkenv] Android SDK Tools Revision 23.0.2
 [checkenv] Installed at /home/vagrant/android-sdk-linux

-setup:
     [echo] Project Name: SplashscreenActivity
  [gettype] Project Type: Self-Tested Application

-set-debug-mode:

-debug-obfuscation-check:

-pre-build:

-build-setup:
[getbuildtools] Using latest Build Tools: 20.0.0
     [echo] Resolving Build Target for SplashscreenActivity...
[gettarget] Project Target:   Android 2.3.3
[gettarget] API level:        10
     [echo] ----------
     [echo] Creating output directories if needed...
    [mkdir] Created dir: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/rsObj
    [mkdir] Created dir: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/rsLibs
     [echo] ----------
     [echo] Resolving Dependencies for SplashscreenActivity...
[dependency] Library dependencies:
[dependency] No Libraries
[dependency] 
[dependency] ------------------
[dependency] API<=15: Adding annotations.jar to the classpath.
     [echo] ----------
     [echo] Building Libraries with 'instrument'...
   [subant] No sub-builds to iterate on

-code-gen:
[mergemanifest] No changes in the AndroidManifest files.
     [echo] Handling aidl files...
     [aidl] No AIDL files to compile.
     [echo] ----------
     [echo] Handling RenderScript files...
     [echo] ----------
     [echo] Handling Resources...
     [aapt] Found new input file
     [aapt] Generating resource IDs...
     [echo] ----------
     [echo] Handling BuildConfig class...
[buildconfig] No need to generate new BuildConfig.

-pre-compile:

-compile:
    [javac] Compiling 1 source file to /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/classes
     [echo] Instrumenting classes from /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/classes...

-post-compile:
   [delete] Deleting: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t/original.jar
   [delete] Deleting: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t/instrumented.jar
      [jar] Building jar: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t/original.jar

instrument:
     [java] a3t.in.jars=/vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t/original.jar
     [java] a3t.out.jar=/vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t/instrumented.jar
     [java] a3t.lib.jars=/home/vagrant/tools/acteve/jars/a3t_symbolic.jar:/home/vagrant/tools/acteve/jars/a3t_models.jar:/home/vagrant/android-sdk-linux/platforms/android-10/android.jar:/home/vagrant/tools/acteve/a3t_sdk/instrumentedframework.jar:/home/vagrant/tools/acteve/jars/a3t_stubs.jar:/home/vagrant/tools/acteve/jars/emma.jar
     [java] a3t.inputmeths.file=null
     [java] a3t.modelmeths.file=null
     [java] a3t.out.dir=/vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t
     [java] a3t.sdk.dir=/home/vagrant/tools/acteve/a3t_sdk (SDK if null)
     [java] a3t.rw.kind=ID_FIELD_WRITE
     [java] a3t.whiteflds.file=null
     [java] a3t.blackflds.file=null
     [java] a3t.whitemeths.file=null
     [java] a3t.instrflds.all=false
     [java] SHAUVIK config.inJars=/vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t/original.jar
     [java] SHAUVIK config.libJars=/home/vagrant/tools/acteve/jars/a3t_symbolic.jar:/home/vagrant/tools/acteve/jars/a3t_models.jar:/home/vagrant/android-sdk-linux/platforms/android-10/android.jar:/home/vagrant/tools/acteve/a3t_sdk/instrumentedframework.jar:/home/vagrant/tools/acteve/jars/a3t_stubs.jar:/home/vagrant/tools/acteve/jars/emma.jar
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _plus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _minus(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _mul(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _div(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _rem(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _neg(acteve.symbolic.integer.Expression)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_3;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_2, _sym_tmp_1;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_3 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         _sym_tmp_2 = interfaceinvoke _sym_tmp_3.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _neg()>();
     [java]         return _sym_tmp_2;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cast(acteve.symbolic.integer.Expression, int)
     [java]     {
     [java]         acteve.symbolic.integer.Algebraic _sym_tmp_4;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_3, _sym_tmp_1;
     [java]         int _sym_tmp_2;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_4 = (acteve.symbolic.integer.Algebraic) _sym_tmp_1;
     [java]         _sym_tmp_3 = interfaceinvoke _sym_tmp_4.<acteve.symbolic.integer.Algebraic: acteve.symbolic.integer.Expression _cast(int)>(_sym_tmp_2);
     [java]         return _sym_tmp_3;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, java.lang.Object, java.lang.Object)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         java.lang.Object _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: java.lang.Object;
     [java]         _sym_tmp_4 := @parameter3: java.lang.Object;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _eq(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, java.lang.Object, java.lang.Object)
     [java]     {
     [java]         acteve.symbolic.integer.Equality _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         java.lang.Object _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: java.lang.Object;
     [java]         _sym_tmp_4 := @parameter3: java.lang.Object;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Equality) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.RefConstant: acteve.symbolic.integer.RefConstant get(java.lang.Object)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Equality: acteve.symbolic.integer.Expression _ne(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpl(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float, float)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float;
     [java]         _sym_tmp_4 := @parameter3: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double, double)
     [java]     {
     [java]         acteve.symbolic.integer.CMP _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double;
     [java]         _sym_tmp_4 := @parameter3: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.CMP) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.CMP: acteve.symbolic.integer.Expression _cmpg(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _and(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _or(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _xor(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftL(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, int)
     [java]     {
     [java]         acteve.symbolic.integer.Bitwise _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.Bitwise) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = interfaceinvoke _sym_tmp_6.<acteve.symbolic.integer.Bitwise: acteve.symbolic.integer.Expression _shiftUR(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long, long)
     [java]     {
     [java]         acteve.symbolic.integer.LongExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long;
     [java]         _sym_tmp_4 := @parameter3: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.LongExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.LongExpression: acteve.symbolic.integer.Expression _cmp(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _gt(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _lt(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _ge(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int, int)
     [java]     {
     [java]         acteve.symbolic.integer.IntegerExpression _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4, _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int;
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.integer.IntegerExpression) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.integer.IntegerExpression: acteve.symbolic.integer.Expression _le(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int[], int, int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_6, _sym_tmp_5;
     [java]         int[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: int[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.IntegerArrayConstant: acteve.symbolic.array.IntegerArrayConstant get(int[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, int[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         int[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: int[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.IntegerArrayConstant: acteve.symbolic.array.IntegerArrayConstant get(int[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, short[], int, short)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         short _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         short[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: short[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: short;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.ShortArrayConstant: acteve.symbolic.array.ShortArrayConstant get(short[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, short[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         short[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: short[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.ShortArrayConstant: acteve.symbolic.array.ShortArrayConstant get(short[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, char[], int, char)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         char _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         char[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: char[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: char;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.CharArrayConstant: acteve.symbolic.array.CharArrayConstant get(char[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, char[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         char[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: char[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.CharArrayConstant: acteve.symbolic.array.CharArrayConstant get(char[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, byte[], int, byte)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         byte _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         byte[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: byte[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: byte;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.ByteArrayConstant: acteve.symbolic.array.ByteArrayConstant get(byte[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, byte[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         byte[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: byte[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.ByteArrayConstant: acteve.symbolic.array.ByteArrayConstant get(byte[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, boolean[], int, boolean)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         boolean _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         boolean[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: boolean[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: boolean;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.BooleanArrayConstant: acteve.symbolic.array.BooleanArrayConstant get(boolean[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, boolean[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         boolean[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: boolean[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.BooleanArrayConstant: acteve.symbolic.array.BooleanArrayConstant get(boolean[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long[], int, long)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         long _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         long[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: long[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: long;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.LongArrayConstant: acteve.symbolic.array.LongArrayConstant get(long[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.LongConstant: acteve.symbolic.integer.LongConstant get(long)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, long[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         long[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: long[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.LongArrayConstant: acteve.symbolic.array.LongArrayConstant get(long[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float[], int, float)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         float _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         float[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: float[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: float;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.FloatArrayConstant: acteve.symbolic.array.FloatArrayConstant get(float[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.FloatConstant: acteve.symbolic.integer.FloatConstant get(float)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, float[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         float[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: float[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.FloatArrayConstant: acteve.symbolic.array.FloatArrayConstant get(float[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double[], int, double)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_8;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_7, _sym_tmp_3, _sym_tmp_2, _sym_tmp_1;
     [java]         double _sym_tmp_6;
     [java]         int _sym_tmp_5;
     [java]         double[] _sym_tmp_4;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_4 := @parameter3: double[];
     [java]         _sym_tmp_5 := @parameter4: int;
     [java]         _sym_tmp_6 := @parameter5: double;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         if _sym_tmp_3 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_8 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_8 = staticinvoke <acteve.symbolic.array.DoubleArrayConstant: acteve.symbolic.array.DoubleArrayConstant get(double[])>(_sym_tmp_4);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_5);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         if _sym_tmp_3 != null goto label4;
     [java] 
     [java]         _sym_tmp_3 = staticinvoke <acteve.symbolic.integer.DoubleConstant: acteve.symbolic.integer.DoubleConstant get(double)>(_sym_tmp_6);
     [java] 
     [java]      label4:
     [java]         nop;
     [java]         _sym_tmp_7 = virtualinvoke _sym_tmp_8.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aset(acteve.symbolic.integer.Expression,acteve.symbolic.integer.Expression)>(_sym_tmp_2, _sym_tmp_3);
     [java]         return _sym_tmp_7;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression, acteve.symbolic.integer.Expression, double[], int)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_6;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_5, _sym_tmp_2, _sym_tmp_1;
     [java]         int _sym_tmp_4;
     [java]         double[] _sym_tmp_3;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_2 := @parameter1: acteve.symbolic.integer.Expression;
     [java]         _sym_tmp_3 := @parameter2: double[];
     [java]         _sym_tmp_4 := @parameter3: int;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         if _sym_tmp_2 != null goto label1;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_6 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         goto label2;
     [java] 
     [java]      label1:
     [java]         _sym_tmp_6 = staticinvoke <acteve.symbolic.array.DoubleArrayConstant: acteve.symbolic.array.DoubleArrayConstant get(double[])>(_sym_tmp_3);
     [java] 
     [java]      label2:
     [java]         nop;
     [java]         if _sym_tmp_2 != null goto label3;
     [java] 
     [java]         _sym_tmp_2 = staticinvoke <acteve.symbolic.integer.IntegerConstant: acteve.symbolic.integer.IntegerConstant get(int)>(_sym_tmp_4);
     [java] 
     [java]      label3:
     [java]         nop;
     [java]         _sym_tmp_5 = virtualinvoke _sym_tmp_6.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _aget(acteve.symbolic.integer.Expression)>(_sym_tmp_2);
     [java]         return _sym_tmp_5;
     [java]     }
     [java]     public static final acteve.symbolic.integer.Expression _alen(acteve.symbolic.integer.Expression)
     [java]     {
     [java]         acteve.symbolic.array.Array _sym_tmp_3;
     [java]         acteve.symbolic.integer.Expression _sym_tmp_2, _sym_tmp_1;
     [java] 
     [java]         _sym_tmp_1 := @parameter0: acteve.symbolic.integer.Expression;
     [java]         if _sym_tmp_1 != null goto label0;
     [java] 
     [java]         return null;
     [java] 
     [java]      label0:
     [java]         _sym_tmp_3 = (acteve.symbolic.array.Array) _sym_tmp_1;
     [java]         _sym_tmp_2 = virtualinvoke _sym_tmp_3.<acteve.symbolic.array.Array: acteve.symbolic.integer.Expression _alen()>();
     [java]         return _sym_tmp_2;
     [java]     }
     [java] SHAUVIK: Soot args-w -p cg off -keep-line-number -keep-bytecode-offset -dynamic-class acteve.symbolic.Util -soot-classpath /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t/original.jar:/home/vagrant/tools/acteve/jars/a3t_symbolic.jar:/home/vagrant/tools/acteve/jars/a3t_models.jar:/home/vagrant/android-sdk-linux/platforms/android-10/android.jar:/home/vagrant/tools/acteve/a3t_sdk/instrumentedframework.jar:/home/vagrant/tools/acteve/jars/a3t_stubs.jar:/home/vagrant/tools/acteve/jars/emma.jar -dynamic-package acteve.symbolic.integer. -dynamic-package models. -outjar -d /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t/instrumented.jar -O -validate acteve.symbolic.DummyMain
     [java] Soot started on Sun Nov 09 06:12:17 UTC 2014
     [java] com.teleca.jamendo.BuildConfig
     [java] com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation
     [java] com.teleca.jamendo.EmmaInstrument.FinishListener
     [java] com.teleca.jamendo.EmmaInstrument.InstrumentedActivity$CoverageCollector
     [java] com.teleca.jamendo.EmmaInstrument.InstrumentedActivity
     [java] com.teleca.jamendo.EmmaInstrument.SMSInstrumentedReceiver
     [java] com.teleca.jamendo.JamendoApplication$1
     [java] com.teleca.jamendo.JamendoApplication$IntentPlayerEngine
     [java] com.teleca.jamendo.JamendoApplication
     [java] com.teleca.jamendo.R$anim
     [java] com.teleca.jamendo.R$array
     [java] com.teleca.jamendo.R$attr
     [java] com.teleca.jamendo.R$dimen
     [java] com.teleca.jamendo.R$drawable
     [java] com.teleca.jamendo.R$id
     [java] com.teleca.jamendo.R$layout
     [java] com.teleca.jamendo.R$menu
     [java] com.teleca.jamendo.R$raw
     [java] com.teleca.jamendo.R$string
     [java] com.teleca.jamendo.R$xml
     [java] com.teleca.jamendo.R
     [java] com.teleca.jamendo.activity.AlbumActivity$1
     [java] com.teleca.jamendo.activity.AlbumActivity$2
     [java] com.teleca.jamendo.activity.AlbumActivity$3
     [java] com.teleca.jamendo.activity.AlbumActivity
     [java] com.teleca.jamendo.activity.ArtistActivity$1
     [java] com.teleca.jamendo.activity.ArtistActivity$2
     [java] com.teleca.jamendo.activity.ArtistActivity$3
     [java] com.teleca.jamendo.activity.ArtistActivity$4
     [java] com.teleca.jamendo.activity.ArtistActivity$AddToPlaylistLoadingDialog
     [java] com.teleca.jamendo.activity.ArtistActivity
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity$1
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity$2
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity$3
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity$4
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity$5
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity$6
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity$7
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity$PlaylistPurpleEntry
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask
     [java] com.teleca.jamendo.activity.BrowsePlaylistActivity
     [java] com.teleca.jamendo.activity.DownloadActivity$1
     [java] com.teleca.jamendo.activity.DownloadActivity$2
     [java] com.teleca.jamendo.activity.DownloadActivity
     [java] com.teleca.jamendo.activity.EqualizerActivity$1
     [java] com.teleca.jamendo.activity.EqualizerActivity$2
     [java] com.teleca.jamendo.activity.EqualizerActivity
     [java] com.teleca.jamendo.activity.HomeActivity$1
     [java] com.teleca.jamendo.activity.HomeActivity$2
     [java] com.teleca.jamendo.activity.HomeActivity$3
     [java] com.teleca.jamendo.activity.HomeActivity$4
     [java] com.teleca.jamendo.activity.HomeActivity$5
     [java] com.teleca.jamendo.activity.HomeActivity$6
     [java] com.teleca.jamendo.activity.HomeActivity$7
     [java] com.teleca.jamendo.activity.HomeActivity$8
     [java] com.teleca.jamendo.activity.HomeActivity$NewsTask$1
     [java] com.teleca.jamendo.activity.HomeActivity$NewsTask
     [java] com.teleca.jamendo.activity.HomeActivity$Top100Task
     [java] com.teleca.jamendo.activity.HomeActivity
     [java] com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog
     [java] com.teleca.jamendo.activity.IntentDistributorActivity
     [java] com.teleca.jamendo.activity.PlayerActivity$1
     [java] com.teleca.jamendo.activity.PlayerActivity$10
     [java] com.teleca.jamendo.activity.PlayerActivity$11
     [java] com.teleca.jamendo.activity.PlayerActivity$12
     [java] com.teleca.jamendo.activity.PlayerActivity$2
     [java] com.teleca.jamendo.activity.PlayerActivity$3
     [java] com.teleca.jamendo.activity.PlayerActivity$4
     [java] com.teleca.jamendo.activity.PlayerActivity$5
     [java] com.teleca.jamendo.activity.PlayerActivity$6
     [java] com.teleca.jamendo.activity.PlayerActivity$7
     [java] com.teleca.jamendo.activity.PlayerActivity$8
     [java] com.teleca.jamendo.activity.PlayerActivity$9
     [java] com.teleca.jamendo.activity.PlayerActivity$CupcakeListener
     [java] com.teleca.jamendo.activity.PlayerActivity$LicenseTask
     [java] com.teleca.jamendo.activity.PlayerActivity$UriLoadingDialog
     [java] com.teleca.jamendo.activity.PlayerActivity
     [java] com.teleca.jamendo.activity.PlaylistActivity$1
     [java] com.teleca.jamendo.activity.PlaylistActivity$2
     [java] com.teleca.jamendo.activity.PlaylistActivity
     [java] com.teleca.jamendo.activity.RadioActivity$1
     [java] com.teleca.jamendo.activity.RadioActivity$2
     [java] com.teleca.jamendo.activity.RadioActivity$3
     [java] com.teleca.jamendo.activity.RadioActivity$4
     [java] com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog
     [java] com.teleca.jamendo.activity.RadioActivity$RadioPlaylistLoadingDialog
     [java] com.teleca.jamendo.activity.RadioActivity$RadioSearchDialog
     [java] com.teleca.jamendo.activity.RadioActivity
     [java] com.teleca.jamendo.activity.SearchActivity$1
     [java] com.teleca.jamendo.activity.SearchActivity$2
     [java] com.teleca.jamendo.activity.SearchActivity$3
     [java] com.teleca.jamendo.activity.SearchActivity$SearchMode
     [java] com.teleca.jamendo.activity.SearchActivity$SearchingDialog
     [java] com.teleca.jamendo.activity.SearchActivity
     [java] com.teleca.jamendo.activity.SettingsActivity
     [java] com.teleca.jamendo.activity.SplashscreenActivity$1
     [java] com.teleca.jamendo.activity.SplashscreenActivity$2
     [java] com.teleca.jamendo.activity.SplashscreenActivity$3
     [java] com.teleca.jamendo.activity.SplashscreenActivity
     [java] com.teleca.jamendo.activity.StarredAlbumsActivity
     [java] com.teleca.jamendo.adapter.AlbumAdapter$ViewHolder
     [java] com.teleca.jamendo.adapter.AlbumAdapter
     [java] com.teleca.jamendo.adapter.AlbumGridAdapter$ViewHolder
     [java] com.teleca.jamendo.adapter.AlbumGridAdapter
     [java] com.teleca.jamendo.adapter.ArrayListAdapter
     [java] com.teleca.jamendo.adapter.DownloadJobAdapter$ViewHolder
     [java] com.teleca.jamendo.adapter.DownloadJobAdapter
     [java] com.teleca.jamendo.adapter.ImageAdapter$ViewHolder
     [java] com.teleca.jamendo.adapter.ImageAdapter
     [java] com.teleca.jamendo.adapter.PlaylistAdapter$ViewHolder
     [java] com.teleca.jamendo.adapter.PlaylistAdapter
     [java] com.teleca.jamendo.adapter.PlaylistRemoteAdapter$ViewHolder
     [java] com.teleca.jamendo.adapter.PlaylistRemoteAdapter
     [java] com.teleca.jamendo.adapter.PurpleAdapter$ViewHolder
     [java] com.teleca.jamendo.adapter.PurpleAdapter
     [java] com.teleca.jamendo.adapter.PurpleEntry
     [java] com.teleca.jamendo.adapter.PurpleListener
     [java] com.teleca.jamendo.adapter.RadioAdapter$ViewHolder
     [java] com.teleca.jamendo.adapter.RadioAdapter
     [java] com.teleca.jamendo.adapter.ReviewAdapter$ViewHolder
     [java] com.teleca.jamendo.adapter.ReviewAdapter
     [java] com.teleca.jamendo.adapter.SeparatedListAdapter
     [java] com.teleca.jamendo.api.Album
     [java] com.teleca.jamendo.api.Artist
     [java] com.teleca.jamendo.api.JamendoGet2Api
     [java] com.teleca.jamendo.api.License
     [java] com.teleca.jamendo.api.Playlist$1
     [java] com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode
     [java] com.teleca.jamendo.api.Playlist
     [java] com.teleca.jamendo.api.PlaylistEntry
     [java] com.teleca.jamendo.api.PlaylistRemote
     [java] com.teleca.jamendo.api.Radio
     [java] com.teleca.jamendo.api.Review
     [java] com.teleca.jamendo.api.Track
     [java] com.teleca.jamendo.api.WSError
     [java] com.teleca.jamendo.api.impl.AlbumBuilder
     [java] com.teleca.jamendo.api.impl.AlbumFunctions
     [java] com.teleca.jamendo.api.impl.ArtistBuilder
     [java] com.teleca.jamendo.api.impl.ArtistFunctions
     [java] com.teleca.jamendo.api.impl.JSONBuilder
     [java] com.teleca.jamendo.api.impl.JamendoGet2ApiImpl
     [java] com.teleca.jamendo.api.impl.LicenseBuilder
     [java] com.teleca.jamendo.api.impl.PlaylistBuilder
     [java] com.teleca.jamendo.api.impl.PlaylistFunctions
     [java] com.teleca.jamendo.api.impl.RSSFunctions
     [java] com.teleca.jamendo.api.impl.RadioBuilder
     [java] com.teleca.jamendo.api.impl.RadioFunctions
     [java] com.teleca.jamendo.api.impl.ReviewBuilder
     [java] com.teleca.jamendo.api.impl.ReviewFunctions
     [java] com.teleca.jamendo.api.impl.TrackBuilder
     [java] com.teleca.jamendo.api.impl.TrackComparator
     [java] com.teleca.jamendo.api.util.Caller
     [java] com.teleca.jamendo.api.util.RequestCache
     [java] com.teleca.jamendo.api.util.XMLUtil
     [java] com.teleca.jamendo.db.AlbumDatabaseBuilder
     [java] com.teleca.jamendo.db.Database
     [java] com.teleca.jamendo.db.DatabaseBuilder
     [java] com.teleca.jamendo.db.DatabaseImpl
     [java] com.teleca.jamendo.db.RadioDatabaseBuilder
     [java] com.teleca.jamendo.db.TrackDatabaseBuilder
     [java] com.teleca.jamendo.dialog.AboutDialog$1
     [java] com.teleca.jamendo.dialog.AboutDialog$2
     [java] com.teleca.jamendo.dialog.AboutDialog$3
     [java] com.teleca.jamendo.dialog.AboutDialog
     [java] com.teleca.jamendo.dialog.AddToPlaylistDialog$1
     [java] com.teleca.jamendo.dialog.AddToPlaylistDialog$2
     [java] com.teleca.jamendo.dialog.AddToPlaylistDialog
     [java] com.teleca.jamendo.dialog.AlbumLoadingDialog
     [java] com.teleca.jamendo.dialog.ArtistLoadingDialog
     [java] com.teleca.jamendo.dialog.CustomEqualizer$1
     [java] com.teleca.jamendo.dialog.CustomEqualizer$2
     [java] com.teleca.jamendo.dialog.CustomEqualizer
     [java] com.teleca.jamendo.dialog.LoadingDialog$1
     [java] com.teleca.jamendo.dialog.LoadingDialog
     [java] com.teleca.jamendo.dialog.LyricsDialog$1
     [java] com.teleca.jamendo.dialog.LyricsDialog$LyricsTask
     [java] com.teleca.jamendo.dialog.LyricsDialog
     [java] com.teleca.jamendo.dialog.PlayerAlbumLoadingDialog
     [java] com.teleca.jamendo.dialog.PlaylistRemoteLoadingDialog
     [java] com.teleca.jamendo.dialog.StarredAlbumLoading
     [java] com.teleca.jamendo.dialog.TutorialDialog$1
     [java] com.teleca.jamendo.dialog.TutorialDialog
     [java] com.teleca.jamendo.gestures.GestureCommand
     [java] com.teleca.jamendo.gestures.GestureCommandRegister
     [java] com.teleca.jamendo.gestures.GesturesHandler
     [java] com.teleca.jamendo.gestures.PlayerGestureCommandRegiser
     [java] com.teleca.jamendo.gestures.PlayerGestureNextCommand
     [java] com.teleca.jamendo.gestures.PlayerGesturePlayCommand
     [java] com.teleca.jamendo.gestures.PlayerGesturePrevCommand
     [java] com.teleca.jamendo.gestures.PlayerGestureStopCommand
     [java] com.teleca.jamendo.media.PlayerEngine
     [java] com.teleca.jamendo.media.PlayerEngineImpl$1
     [java] com.teleca.jamendo.media.PlayerEngineImpl$2
     [java] com.teleca.jamendo.media.PlayerEngineImpl$3
     [java] com.teleca.jamendo.media.PlayerEngineImpl$4
     [java] com.teleca.jamendo.media.PlayerEngineImpl$5
     [java] com.teleca.jamendo.media.PlayerEngineImpl$InternalMediaPlayer
     [java] com.teleca.jamendo.media.PlayerEngineImpl
     [java] com.teleca.jamendo.media.PlayerEngineListener
     [java] com.teleca.jamendo.service.DownloadService$1
     [java] com.teleca.jamendo.service.DownloadService
     [java] com.teleca.jamendo.service.PlayerService$1
     [java] com.teleca.jamendo.service.PlayerService$2
     [java] com.teleca.jamendo.service.PlayerService
     [java] com.teleca.jamendo.util.DrawableAccessor
     [java] com.teleca.jamendo.util.FixedViewFlipper
     [java] com.teleca.jamendo.util.Helper
     [java] com.teleca.jamendo.util.ImageCache
     [java] com.teleca.jamendo.util.OnSeekToListenerImp$1
     [java] com.teleca.jamendo.util.OnSeekToListenerImp$2
     [java] com.teleca.jamendo.util.OnSeekToListenerImp
     [java] com.teleca.jamendo.util.SeekToMode
     [java] com.teleca.jamendo.util.download.DatabaseUpdater
     [java] com.teleca.jamendo.util.download.DownloadDatabase
     [java] com.teleca.jamendo.util.download.DownloadDatabaseImpl$1
     [java] com.teleca.jamendo.util.download.DownloadDatabaseImpl$DatabaseUpdaterV1
     [java] com.teleca.jamendo.util.download.DownloadDatabaseImpl$UpdaterBuilder
     [java] com.teleca.jamendo.util.download.DownloadDatabaseImpl
     [java] com.teleca.jamendo.util.download.DownloadHelper
     [java] com.teleca.jamendo.util.download.DownloadJob
     [java] com.teleca.jamendo.util.download.DownloadJobBuilder
     [java] com.teleca.jamendo.util.download.DownloadJobListener
     [java] com.teleca.jamendo.util.download.DownloadManager
     [java] com.teleca.jamendo.util.download.DownloadManagerImpl
     [java] com.teleca.jamendo.util.download.DownloadObserver
     [java] com.teleca.jamendo.util.download.DownloadProvider
     [java] com.teleca.jamendo.util.download.DownloadProviderDbImpl
     [java] com.teleca.jamendo.util.download.DownloadTask
     [java] com.teleca.jamendo.util.download.MediaScannerNotifier
     [java] com.teleca.jamendo.widget.AlbumBar
     [java] com.teleca.jamendo.widget.ArtistBar
     [java] com.teleca.jamendo.widget.FailureBar
     [java] com.teleca.jamendo.widget.FileLastModifSort
     [java] com.teleca.jamendo.widget.OnAlbumClickListener
     [java] com.teleca.jamendo.widget.ProgressBar
     [java] com.teleca.jamendo.widget.ReflectableLayout
     [java] com.teleca.jamendo.widget.ReflectiveSurface
     [java] com.teleca.jamendo.widget.RemoteImageView$DownloadTask
     [java] com.teleca.jamendo.widget.RemoteImageView
     [java] Instrumenting <com.teleca.jamendo.BuildConfig: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: void onStart()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: void generateCoverageReport()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: java.lang.String getCoverageFilePath()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: boolean setCoverageFilePath(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.Exception)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: void reportEmmaError(java.lang.String,java.lang.Exception)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: void onActivityFinished()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: void dumpIntermediateCoverage(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.InstrumentedActivity$CoverageCollector: void <init>(com.teleca.jamendo.EmmaInstrument.InstrumentedActivity)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.InstrumentedActivity$CoverageCollector: void onReceive(android.content.Context,android.content.Intent)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.InstrumentedActivity$CoverageCollector: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.InstrumentedActivity$CoverageCollector: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.InstrumentedActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.InstrumentedActivity: void setFinishListener(com.teleca.jamendo.EmmaInstrument.FinishListener)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.InstrumentedActivity: void finish()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.InstrumentedActivity: com.teleca.jamendo.EmmaInstrument.FinishListener access$000(com.teleca.jamendo.EmmaInstrument.InstrumentedActivity)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.InstrumentedActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.InstrumentedActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.SMSInstrumentedReceiver: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.SMSInstrumentedReceiver: void onReceive(android.content.Context,android.content.Intent)>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.SMSInstrumentedReceiver: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.EmmaInstrument.SMSInstrumentedReceiver: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void <init>(com.teleca.jamendo.JamendoApplication)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: com.teleca.jamendo.api.Playlist getPlaylist()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: boolean isPlaying()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void next()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void openPlaylist(com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void pause()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void play()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void prev()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void setListener(com.teleca.jamendo.media.PlayerEngineListener)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void skipTo(int)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void stop()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void startAction(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void playlistCheck()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void setPlaybackMode(com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode getPlaybackMode()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void forward(int)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void rewind(int)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void prevList()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void <init>(com.teleca.jamendo.JamendoApplication,com.teleca.jamendo.JamendoApplication$1)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication$IntentPlayerEngine: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.JamendoApplication getInstance()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: void onCreate()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.util.ImageCache getImageCache()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: void setConcretePlayerEngine(com.teleca.jamendo.media.PlayerEngine)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: void setMyCurrentMedia(android.media.MediaPlayer)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: void setMyEqualizer(android.media.audiofx.Equalizer)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: android.media.audiofx.Equalizer getMyEqualizer()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.media.PlayerEngine getPlayerEngineInterface()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.gestures.GesturesHandler getPlayerGestureHandler()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: void setPlayerEngineListener(com.teleca.jamendo.media.PlayerEngineListener)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.media.PlayerEngineListener fetchPlayerEngineListener()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.api.Playlist fetchPlaylist()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: java.lang.String getVersion()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: java.lang.String getDownloadFormat()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: java.lang.String getStreamEncoding()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.util.download.DownloadManager getDownloadManager()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.api.Playlist access$100(com.teleca.jamendo.JamendoApplication)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.api.Playlist access$102(com.teleca.jamendo.JamendoApplication,com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.media.PlayerEngineListener access$202(com.teleca.jamendo.JamendoApplication,com.teleca.jamendo.media.PlayerEngineListener)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: com.teleca.jamendo.media.PlayerEngineListener access$200(com.teleca.jamendo.JamendoApplication)>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.JamendoApplication: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.R$anim: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R$array: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R$attr: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R$dimen: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R$drawable: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R$id: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R$layout: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R$menu: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R$raw: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R$string: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R$xml: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.R: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$1: void <init>(com.teleca.jamendo.activity.AlbumActivity,java.util.ArrayList)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$1: void onNothingSelected(android.widget.AdapterView)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$2: void <init>(com.teleca.jamendo.activity.AlbumActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$3: void <init>(com.teleca.jamendo.activity.AlbumActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$3: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$3: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity$3: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void launch(android.app.Activity,com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void launch(com.teleca.jamendo.activity.IntentDistributorActivity,com.teleca.jamendo.api.Album,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void onResume()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void setupTabs()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: boolean onCreateOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: boolean onPrepareOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void loadReviews()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void loadTracks()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void downloadAlbum()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void selectReview(int)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: com.teleca.jamendo.adapter.ReviewAdapter access$000(com.teleca.jamendo.activity.AlbumActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: com.teleca.jamendo.api.Album access$100(com.teleca.jamendo.activity.AlbumActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.AlbumActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$1: void <init>(com.teleca.jamendo.activity.ArtistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$2: void <init>(com.teleca.jamendo.activity.ArtistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$2: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$3: void <init>(com.teleca.jamendo.activity.ArtistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$3: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$3: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$3: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$4: void <init>(com.teleca.jamendo.activity.ArtistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$4: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$4: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$4: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$AddToPlaylistLoadingDialog: void <init>(com.teleca.jamendo.activity.ArtistActivity,android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$AddToPlaylistLoadingDialog: com.teleca.jamendo.api.Track[] doInBackground(com.teleca.jamendo.api.Album[])>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$AddToPlaylistLoadingDialog: void doStuffWithResult(com.teleca.jamendo.api.Track[])>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$AddToPlaylistLoadingDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$AddToPlaylistLoadingDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$AddToPlaylistLoadingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity$AddToPlaylistLoadingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity: void launch(android.app.Activity,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity: void onResume()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity: void loadAlbums()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity: com.teleca.jamendo.adapter.AlbumGridAdapter access$000(com.teleca.jamendo.activity.ArtistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity: android.widget.GridView access$100(com.teleca.jamendo.activity.ArtistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity: com.teleca.jamendo.api.Artist access$200(com.teleca.jamendo.activity.ArtistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.ArtistActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$1: void <init>(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$2: void <init>(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$3: void <init>(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$3: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$3: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$3: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$4: void <init>(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$4: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$4: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$4: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$5: void <init>(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$5: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$5: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$5: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$6: void <init>(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$6: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$6: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$6: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$7: void <init>(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$7: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$7: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$7: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode: com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode[] values()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode: com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode valueOf(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$PlaylistPurpleEntry: void <init>(com.teleca.jamendo.activity.BrowsePlaylistActivity,java.lang.Integer,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$PlaylistPurpleEntry: void setPlaylistRemote(com.teleca.jamendo.api.PlaylistRemote)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$PlaylistPurpleEntry: com.teleca.jamendo.api.PlaylistRemote getPlaylistRemote()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$PlaylistPurpleEntry: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$PlaylistPurpleEntry: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask: void <init>(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask: com.teleca.jamendo.api.PlaylistRemote[] doInBackground(java.lang.String[])>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask: void onPostExecute(com.teleca.jamendo.api.PlaylistRemote[])>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask: void onProgressUpdate(com.teleca.jamendo.api.WSError[])>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask: void onProgressUpdate(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask: void onPostExecute(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void launch(android.content.Context,com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void launchSave(android.app.Activity,com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void onResume()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void setupMode(com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void loadPlaylists()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void savePlaylist(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: android.app.Dialog onCreateDialog(int)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void setupListView()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void access$000(com.teleca.jamendo.activity.BrowsePlaylistActivity,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode access$100(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: java.lang.String access$202(com.teleca.jamendo.activity.BrowsePlaylistActivity,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: android.widget.EditText access$300(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void access$400(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: com.teleca.jamendo.api.Playlist access$500(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: java.lang.String access$200(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: android.widget.ListView access$600(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: com.teleca.jamendo.adapter.SeparatedListAdapter access$700(com.teleca.jamendo.activity.BrowsePlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.BrowsePlaylistActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity$1: void <init>(com.teleca.jamendo.activity.DownloadActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity$1: void run()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity$2: void <init>(com.teleca.jamendo.activity.DownloadActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity$2: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity$2: void onNothingSelected(android.widget.AdapterView)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void launch(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void onPause()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void onResume()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void updateListView(int)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void setupListView()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: boolean onContextItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void deleteJob(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void playNow(int)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: com.teleca.jamendo.util.download.DownloadJob getJob(int)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void addToPlaylist(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void onDownloadChanged(com.teleca.jamendo.util.download.DownloadManager)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: android.widget.Spinner access$000(com.teleca.jamendo.activity.DownloadActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void access$100(com.teleca.jamendo.activity.DownloadActivity,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.DownloadActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity$1: void <init>(com.teleca.jamendo.activity.EqualizerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity$1: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity$2: void <init>(com.teleca.jamendo.activity.EqualizerActivity,java.util.HashMap)>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity$2: void onCheckedChanged(android.widget.RadioGroup,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity: void setupEqualizerFxAndUI()>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity: android.app.Activity access$000(com.teleca.jamendo.activity.EqualizerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity: android.widget.RadioGroup access$100(com.teleca.jamendo.activity.EqualizerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity: android.media.audiofx.Equalizer access$200(com.teleca.jamendo.activity.EqualizerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.EqualizerActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$1: void <init>(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$1: void performAction()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$2: void <init>(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$2: void performAction()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$3: void <init>(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$3: void performAction()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$3: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$3: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$4: void <init>(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$4: void performAction()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$4: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$4: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$5: void <init>(com.teleca.jamendo.activity.HomeActivity,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$5: void performAction()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$5: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$5: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$6: void <init>(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$6: void performAction()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$6: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$6: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$7: void <init>(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$7: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$7: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$7: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$8: void <init>(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$8: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$8: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$8: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask$1: void <init>(com.teleca.jamendo.activity.HomeActivity$NewsTask)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask$1: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: void <init>(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: void onPreExecute()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: com.teleca.jamendo.api.Album[] doInBackground(java.lang.Void[])>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: void onPostExecute(com.teleca.jamendo.api.Album[])>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: void onProgressUpdate(com.teleca.jamendo.api.WSError[])>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: void onProgressUpdate(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: void onPostExecute(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: void <init>(com.teleca.jamendo.activity.HomeActivity,com.teleca.jamendo.activity.HomeActivity$1)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$NewsTask: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$Top100Task: void <init>(com.teleca.jamendo.activity.HomeActivity,android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$Top100Task: com.teleca.jamendo.api.Playlist doInBackground(java.lang.Void[])>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$Top100Task: void doStuffWithResult(com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$Top100Task: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$Top100Task: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$Top100Task: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity$Top100Task: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: void launch(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: void onRestoreInstanceState(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: void onAlbumClicked(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: boolean onCreateOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: boolean onPrepareOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: boolean onKeyDown(int,android.view.KeyEvent)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: void onPause()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: void onResume()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: void fillHomeListView()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: android.widget.ViewFlipper access$100(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: com.teleca.jamendo.widget.ProgressBar access$200(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: android.widget.Gallery access$300(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: android.widget.AdapterView$OnItemClickListener access$400(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: com.teleca.jamendo.widget.FailureBar access$500(com.teleca.jamendo.activity.HomeActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.HomeActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog: void <init>(com.teleca.jamendo.activity.IntentDistributorActivity,android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog: com.teleca.jamendo.api.Album doInBackground(java.lang.Void[])>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog: void onPostExecute(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog: void doStuffWithResult(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog: void onPostExecute(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity: void onResume()>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity: void distributeIntent()>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity: android.content.Intent access$000(com.teleca.jamendo.activity.IntentDistributorActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.IntentDistributorActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$1: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$1: void run()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$10: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$10: void onTrackChanged(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$10: void onTrackProgress(int)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$10: void onTrackBuffering(int)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$10: void onTrackStop()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$10: boolean onTrackStart()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$10: void onTrackPause()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$10: void onTrackStreamError()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$10: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$10: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$11: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$11: void onClick(android.content.DialogInterface,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$11: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$11: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$12: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$12: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$2: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$2: void onAnimationEnd(android.view.animation.Animation)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$2: void onAnimationRepeat(android.view.animation.Animation)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$2: void onAnimationStart(android.view.animation.Animation)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$3: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$3: void onAnimationEnd(android.view.animation.Animation)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$3: void onAnimationRepeat(android.view.animation.Animation)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$3: void onAnimationStart(android.view.animation.Animation)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$3: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$3: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$4: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$4: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$4: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$4: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$5: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$5: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$5: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$5: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$6: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$6: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$6: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$6: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$7: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$7: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$7: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$7: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$8: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$8: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$8: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$8: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$9: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$9: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$9: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$9: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$CupcakeListener: void <init>(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$CupcakeListener: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$CupcakeListener: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$CupcakeListener: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$LicenseTask: void <init>(com.teleca.jamendo.activity.PlayerActivity,com.teleca.jamendo.api.Album,com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$LicenseTask: void onPreExecute()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$LicenseTask: com.teleca.jamendo.api.License doInBackground(com.teleca.jamendo.api.Album[])>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$LicenseTask: void onPostExecute(com.teleca.jamendo.api.License)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$LicenseTask: void onProgressUpdate(com.teleca.jamendo.api.WSError[])>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$LicenseTask: void onProgressUpdate(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$LicenseTask: void onPostExecute(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$LicenseTask: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$LicenseTask: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$LicenseTask: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$UriLoadingDialog: void <init>(com.teleca.jamendo.activity.PlayerActivity,android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$UriLoadingDialog: com.teleca.jamendo.api.Playlist doInBackground(java.lang.Void[])>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$UriLoadingDialog: void doStuffWithResult(com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$UriLoadingDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$UriLoadingDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$UriLoadingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity$UriLoadingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: com.teleca.jamendo.media.PlayerEngine getPlayerEngine()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void launch(android.content.Context,com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void launch(android.app.Activity,com.teleca.jamendo.api.PlaylistRemote)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void launch(android.app.Activity,com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void onResume()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void doCloseActivity()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void onPause()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void setMediaVisible()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void setMediaGone()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void setFadeOutAnimation()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void setFadeInAnimation()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void handleIntent()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void loadPlaylist(com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: boolean onKeyDown(int,android.view.KeyEvent)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void albumClickHandler(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void artistClickHandler(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void playlistClickHandler(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void homeClickHandler(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void addOnClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void equalizerOnClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void lyricsOnClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void downloadOnClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void shareOnClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void licenseClickHandler(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void onStartSeekToProcess()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void onFinishSeekToProcess()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.view.animation.Animation access$000(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.view.animation.Animation access$100(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.widget.ImageButton access$200(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void access$300(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void access$400(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void access$500(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void access$600(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: com.teleca.jamendo.media.PlayerEngine access$700(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.widget.ImageButton access$800(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.widget.ImageButton access$900(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: com.teleca.jamendo.api.Album access$1000(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: com.teleca.jamendo.api.Album access$1002(com.teleca.jamendo.activity.PlayerActivity,com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.widget.TextView access$1100(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.widget.TextView access$1200(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.widget.TextView access$1300(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.widget.TextView access$1400(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: java.lang.String access$1500(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: com.teleca.jamendo.widget.RemoteImageView access$1600(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.widget.ProgressBar access$1700(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: android.widget.RatingBar access$1800(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void access$1900(com.teleca.jamendo.activity.PlayerActivity,com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: com.teleca.jamendo.widget.RemoteImageView access$2000(com.teleca.jamendo.activity.PlayerActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlayerActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity$1: void <init>(com.teleca.jamendo.activity.PlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity$2: void <init>(com.teleca.jamendo.activity.PlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity$2: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: void launch(android.content.Context,boolean)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: void launch(android.app.Activity,com.teleca.jamendo.api.PlaylistRemote)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: boolean onCreateOptionsMenu(android.view.Menu)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: boolean onContextItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: boolean onOptionsItemSelected(android.view.MenuItem)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: void onResume()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: void loadTracks()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: void onActivityResult(int,int,android.content.Intent)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: void setupListView()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: com.teleca.jamendo.api.Playlist access$000(com.teleca.jamendo.activity.PlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: com.teleca.jamendo.widget.AlbumBar access$100(com.teleca.jamendo.activity.PlaylistActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.PlaylistActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$1: void <init>(com.teleca.jamendo.activity.RadioActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$1: void onNothingSelected(android.widget.AdapterView)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$2: void <init>(com.teleca.jamendo.activity.RadioActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$2: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$3: void <init>(com.teleca.jamendo.activity.RadioActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$3: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$3: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$3: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$4: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$4: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog: void <init>(com.teleca.jamendo.activity.RadioActivity,android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog: java.lang.Boolean doInBackground(java.lang.Void[])>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog: void doStuffWithResult(java.lang.Boolean)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioPlaylistLoadingDialog: void <init>(android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioPlaylistLoadingDialog: com.teleca.jamendo.api.Playlist doInBackground(com.teleca.jamendo.api.Radio[])>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioPlaylistLoadingDialog: void doStuffWithResult(com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioPlaylistLoadingDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioPlaylistLoadingDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioPlaylistLoadingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioPlaylistLoadingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioSearchDialog: void <init>(com.teleca.jamendo.activity.RadioActivity,android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioSearchDialog: com.teleca.jamendo.api.Radio[] doInBackground(java.lang.String[])>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioSearchDialog: void doStuffWithResult(com.teleca.jamendo.api.Radio[])>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioSearchDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioSearchDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioSearchDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity$RadioSearchDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: void launch(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: void onResume()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: void setupListView()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: void loadRecommendedRadios()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: com.teleca.jamendo.adapter.RadioAdapter access$000(com.teleca.jamendo.activity.RadioActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog access$100(com.teleca.jamendo.activity.RadioActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog access$102(com.teleca.jamendo.activity.RadioActivity,com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: void access$200(com.teleca.jamendo.activity.RadioActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: android.widget.EditText access$300(com.teleca.jamendo.activity.RadioActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: void access$400(com.teleca.jamendo.activity.RadioActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: com.teleca.jamendo.api.Radio[] access$500(com.teleca.jamendo.activity.RadioActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: android.widget.Spinner access$600(com.teleca.jamendo.activity.RadioActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.RadioActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$1: void <init>(com.teleca.jamendo.activity.SearchActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$1: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$2: void <init>(com.teleca.jamendo.activity.SearchActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$3: void <init>(com.teleca.jamendo.activity.SearchActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$3: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$3: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$3: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchMode: com.teleca.jamendo.activity.SearchActivity$SearchMode[] values()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchMode: com.teleca.jamendo.activity.SearchActivity$SearchMode valueOf(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchMode: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchMode: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchMode: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchingDialog: void <init>(com.teleca.jamendo.activity.SearchActivity,android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchingDialog: java.lang.Integer doInBackground(java.lang.Integer[])>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchingDialog: void doStuffWithResult(java.lang.Integer)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchingDialog: void albumSearch(int)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchingDialog: void playlistSearch()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchingDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchingDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity$SearchingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: void launch(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: void onResume()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: void onRestoreInstanceState(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: void onSaveInstanceState(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: android.widget.Spinner access$000(com.teleca.jamendo.activity.SearchActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: android.widget.ListView access$100(com.teleca.jamendo.activity.SearchActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: android.widget.ViewFlipper access$200(com.teleca.jamendo.activity.SearchActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: android.widget.AdapterView$OnItemClickListener access$300(com.teleca.jamendo.activity.SearchActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: android.widget.AdapterView$OnItemClickListener access$400(com.teleca.jamendo.activity.SearchActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: android.widget.EditText access$500(com.teleca.jamendo.activity.SearchActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: com.teleca.jamendo.activity.SearchActivity$SearchMode access$602(com.teleca.jamendo.activity.SearchActivity,com.teleca.jamendo.activity.SearchActivity$SearchMode)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: com.teleca.jamendo.api.PlaylistRemote[] access$702(com.teleca.jamendo.activity.SearchActivity,com.teleca.jamendo.api.PlaylistRemote[])>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: com.teleca.jamendo.api.PlaylistRemote[] access$700(com.teleca.jamendo.activity.SearchActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SearchActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SettingsActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SettingsActivity: void launch(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.activity.SettingsActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.SettingsActivity: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)>
     [java] Instrumenting <com.teleca.jamendo.activity.SettingsActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SettingsActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$1: void <init>(com.teleca.jamendo.activity.SplashscreenActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$1: void run()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$2: void <init>(com.teleca.jamendo.activity.SplashscreenActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$2: void onAnimationStart(android.view.animation.Animation)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$2: void onAnimationRepeat(android.view.animation.Animation)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$2: void onAnimationEnd(android.view.animation.Animation)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$3: void <init>(com.teleca.jamendo.activity.SplashscreenActivity,com.teleca.jamendo.dialog.TutorialDialog)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$3: void onDismiss(android.content.DialogInterface)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$3: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity$3: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity: void showTutorial()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity: android.view.animation.Animation access$000(com.teleca.jamendo.activity.SplashscreenActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity: java.lang.Runnable access$100(com.teleca.jamendo.activity.SplashscreenActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity: android.os.Handler access$200(com.teleca.jamendo.activity.SplashscreenActivity)>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.SplashscreenActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.activity.StarredAlbumsActivity: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.activity.StarredAlbumsActivity: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.activity.StarredAlbumsActivity: void launch(android.app.Activity,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.activity.StarredAlbumsActivity: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.activity.StarredAlbumsActivity: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.activity.StarredAlbumsActivity: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumAdapter: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumGridAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumGridAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumGridAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumGridAdapter: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumGridAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumGridAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.AlbumGridAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: int getCount()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: java.lang.Object getItem(int)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: long getItemId(int)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: void setList(java.util.ArrayList)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: java.util.ArrayList getList()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: void setList(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: android.widget.ListView getListView()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: void setListView(android.widget.ListView)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ArrayListAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.DownloadJobAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.DownloadJobAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.DownloadJobAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.DownloadJobAdapter: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.adapter.DownloadJobAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.teleca.jamendo.adapter.DownloadJobAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.DownloadJobAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ImageAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ImageAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ImageAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ImageAdapter: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ImageAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ImageAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ImageAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter: void <init>(android.app.Activity,int)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter: int getCount()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter: java.lang.Object getItem(int)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter: long getItemId(int)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter: void setPlaylist(com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter: com.teleca.jamendo.api.Playlist getEntryList()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistRemoteAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistRemoteAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistRemoteAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistRemoteAdapter: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistRemoteAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistRemoteAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PlaylistRemoteAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleAdapter: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: java.lang.Integer getDrawable()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: void setDrawable(java.lang.Integer)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: java.lang.Integer getTextId()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: void setTextId(java.lang.Integer)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: void setListener(com.teleca.jamendo.adapter.PurpleListener)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: com.teleca.jamendo.adapter.PurpleListener getListener()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: void setText(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: java.lang.String getText()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: void <init>(java.lang.Integer,java.lang.Integer)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: void <init>(java.lang.Integer,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: void <init>(java.lang.Integer,java.lang.Integer,com.teleca.jamendo.adapter.PurpleListener)>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.PurpleEntry: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.RadioAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.RadioAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.RadioAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.RadioAdapter: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.adapter.RadioAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.teleca.jamendo.adapter.RadioAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.RadioAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ReviewAdapter$ViewHolder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ReviewAdapter$ViewHolder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ReviewAdapter$ViewHolder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ReviewAdapter: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ReviewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ReviewAdapter: boolean isEnabled(int)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ReviewAdapter: void setLang(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ReviewAdapter: void setList(java.util.ArrayList)>
     [java] Instrumenting <com.teleca.jamendo.adapter.ReviewAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.ReviewAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: void addSection(java.lang.String,android.widget.Adapter)>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: java.lang.Object getItem(int)>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: int getCount()>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: int getViewTypeCount()>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: int getItemViewType(int)>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: boolean areAllItemsSelectable()>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: boolean isEnabled(int)>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: long getItemId(int)>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.adapter.SeparatedListAdapter: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.Album: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.Album: java.lang.String getImage()>
     [java] Instrumenting <com.teleca.jamendo.api.Album: void setImage(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Album: java.lang.String getName()>
     [java] Instrumenting <com.teleca.jamendo.api.Album: void setName(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Album: java.lang.String getArtistName()>
     [java] Instrumenting <com.teleca.jamendo.api.Album: void setArtistName(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Album: void setId(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Album: int getId()>
     [java] Instrumenting <com.teleca.jamendo.api.Album: void setRating(double)>
     [java] Instrumenting <com.teleca.jamendo.api.Album: double getRating()>
     [java] Instrumenting <com.teleca.jamendo.api.Album: void setTracks(com.teleca.jamendo.api.Track[])>
     [java] Instrumenting <com.teleca.jamendo.api.Album: com.teleca.jamendo.api.Track[] getTracks()>
     [java] Instrumenting <com.teleca.jamendo.api.Album: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.Album: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: int getId()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: void setId(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: java.lang.String getIdstr()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: void setIdstr(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: java.lang.String getName()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: void setName(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: java.lang.String getImage()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: void setImage(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: java.lang.String getUrl()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: void setUrl(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: java.lang.String getMbgid()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: void setMbgid(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: int getMbid()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: void setMbid(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: java.lang.String[] getGenre()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: void setGenre(java.lang.String[])>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.Artist: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.License: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.License: void setId(int)>
     [java] Instrumenting <com.teleca.jamendo.api.License: int getId()>
     [java] Instrumenting <com.teleca.jamendo.api.License: void setUrl(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.License: java.lang.String getUrl()>
     [java] Instrumenting <com.teleca.jamendo.api.License: void setImage(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.License: java.lang.String getImage()>
     [java] Instrumenting <com.teleca.jamendo.api.License: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.License: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode: com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode[] values()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode: com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode valueOf(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode getPlaylistPlaybackMode()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void setPlaylistPlaybackMode(com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void addTrack(com.teleca.jamendo.api.Track,com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void addTracks(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: boolean isEmpty()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void selectNext()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void selectPrev()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void select(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void selectOrAdd(com.teleca.jamendo.api.Track,com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: int getSelectedIndex()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: com.teleca.jamendo.api.PlaylistEntry getSelectedTrack()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void addPlaylistEntry(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: int size()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: com.teleca.jamendo.api.PlaylistEntry getTrack(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: com.teleca.jamendo.api.PlaylistEntry[] getAllTracks()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void remove(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void calculateOrder(boolean)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: boolean isLastTrackOnList()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void readObject(java.io.ObjectInputStream)>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.Playlist: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistEntry: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistEntry: com.teleca.jamendo.api.Album getAlbum()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistEntry: void setAlbum(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistEntry: com.teleca.jamendo.api.Track getTrack()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistEntry: void setTrack(com.teleca.jamendo.api.Track)>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistEntry: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistEntry: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistRemote: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistRemote: int getId()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistRemote: void setId(int)>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistRemote: java.lang.String getName()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistRemote: void setName(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistRemote: int getDuration()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistRemote: void setDuration(int)>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistRemote: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.PlaylistRemote: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: int getId()>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: void setId(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: void setIdstr(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: java.lang.String getIdstr()>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: java.lang.String getName()>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: void setName(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: java.lang.String getImage()>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: void setImage(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.Radio: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: int getId()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: void setId(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Review: java.lang.String getName()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: void setName(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Review: java.lang.String getText()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: void setText(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Review: int getRating()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: void setRating(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Review: java.lang.String getLang()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: void setLang(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Review: java.util.Date[] getDates()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: void setDates(java.util.Date[])>
     [java] Instrumenting <com.teleca.jamendo.api.Review: void setUserName(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Review: java.lang.String getUserName()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: void setUserImage(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Review: java.lang.String getUserImage()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.Review: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.Track: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.Track: int getId()>
     [java] Instrumenting <com.teleca.jamendo.api.Track: void setId(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Track: java.lang.String getName()>
     [java] Instrumenting <com.teleca.jamendo.api.Track: void setName(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Track: int getDuration()>
     [java] Instrumenting <com.teleca.jamendo.api.Track: void setDuration(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Track: java.lang.String getUrl()>
     [java] Instrumenting <com.teleca.jamendo.api.Track: void setUrl(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Track: void setStream(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.Track: java.lang.String getStream()>
     [java] Instrumenting <com.teleca.jamendo.api.Track: void setRating(double)>
     [java] Instrumenting <com.teleca.jamendo.api.Track: double getRating()>
     [java] Instrumenting <com.teleca.jamendo.api.Track: void setNumAlbum(int)>
     [java] Instrumenting <com.teleca.jamendo.api.Track: int getNumAlbum()>
     [java] Instrumenting <com.teleca.jamendo.api.Track: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.Track: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.WSError: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.WSError: void <init>(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.WSError: void setMessage(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.WSError: java.lang.String getMessage()>
     [java] Instrumenting <com.teleca.jamendo.api.WSError: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.WSError: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.AlbumBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.AlbumBuilder: com.teleca.jamendo.api.Album build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.AlbumBuilder: java.lang.Object build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.AlbumBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.AlbumBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.AlbumFunctions: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.AlbumFunctions: com.teleca.jamendo.api.Album[] getAlbums(org.json.JSONArray)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.AlbumFunctions: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.AlbumFunctions: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ArtistBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ArtistBuilder: com.teleca.jamendo.api.Artist build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ArtistBuilder: java.lang.Object build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ArtistBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ArtistBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ArtistFunctions: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ArtistFunctions: com.teleca.jamendo.api.Artist[] getArtist(org.json.JSONArray)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ArtistFunctions: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ArtistFunctions: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JSONBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JSONBuilder: void setRoot(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JSONBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JSONBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: java.lang.String doGet(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Album[] getPopularAlbumsWeek()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Track[] getAlbumTracks(com.teleca.jamendo.api.Album,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Track[] getAlbumTracks(com.teleca.jamendo.api.Album,java.lang.String,int,int)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Album[] searchForAlbumsByArtist(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Album[] searchForAlbumsByTag(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Album[] searchForAlbumsByArtistName(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Artist getArtist(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: int[] getTop100Listened()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Album[] getAlbumsByTracksId(int[])>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Track[] getTracksByTracksId(int[],java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Review[] getAlbumReviews(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Playlist getRadioPlaylist(com.teleca.jamendo.api.Radio,int,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Track[] getTracks(org.json.JSONArray,boolean)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Playlist createPlaylist(com.teleca.jamendo.api.Track[],com.teleca.jamendo.api.Album[],int[])>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Radio[] getRadiosByIds(int[])>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Radio[] getRadiosByIdstr(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.PlaylistRemote[] getUserPlaylist(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Playlist getPlaylist(com.teleca.jamendo.api.PlaylistRemote)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: java.lang.String getTrackLyrics(com.teleca.jamendo.api.Track)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.License getAlbumLicense(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Album getAlbumById(int)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Album[] getUserStarredAlbums(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: com.teleca.jamendo.api.Album getAlbumByTrackId(int)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.JamendoGet2ApiImpl: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.LicenseBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.LicenseBuilder: com.teleca.jamendo.api.License build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.LicenseBuilder: java.lang.Object build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.LicenseBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.LicenseBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.PlaylistBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.PlaylistBuilder: com.teleca.jamendo.api.PlaylistRemote build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.PlaylistBuilder: java.lang.Object build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.PlaylistBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.PlaylistBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.PlaylistFunctions: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.PlaylistFunctions: com.teleca.jamendo.api.PlaylistRemote[] getPlaylists(org.json.JSONArray)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.PlaylistFunctions: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.PlaylistFunctions: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RSSFunctions: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RSSFunctions: int[] getTracksIdFromRss(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RSSFunctions: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RSSFunctions: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RadioBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RadioBuilder: com.teleca.jamendo.api.Radio build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RadioBuilder: java.lang.Object build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RadioBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RadioBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RadioFunctions: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RadioFunctions: com.teleca.jamendo.api.Radio[] getRadios(org.json.JSONArray)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RadioFunctions: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.RadioFunctions: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ReviewBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ReviewBuilder: com.teleca.jamendo.api.Review build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ReviewBuilder: java.lang.Object build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ReviewBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ReviewBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ReviewFunctions: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ReviewFunctions: com.teleca.jamendo.api.Review[] getReviews(org.json.JSONArray)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ReviewFunctions: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.ReviewFunctions: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.TrackBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.TrackBuilder: com.teleca.jamendo.api.Track build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.TrackBuilder: java.lang.Object build(org.json.JSONObject)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.TrackBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.TrackBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.TrackComparator: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.TrackComparator: int compare(com.teleca.jamendo.api.Track,com.teleca.jamendo.api.Track)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.TrackComparator: int compare(java.lang.Object,java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.api.impl.TrackComparator: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.impl.TrackComparator: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.util.Caller: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.util.Caller: java.lang.String doGet(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.util.Caller: java.lang.String convertStreamToString(java.io.InputStream)>
     [java] Instrumenting <com.teleca.jamendo.api.util.Caller: void setRequestCache(com.teleca.jamendo.api.util.RequestCache)>
     [java] Instrumenting <com.teleca.jamendo.api.util.Caller: java.lang.String createStringFromIds(int[])>
     [java] Instrumenting <com.teleca.jamendo.api.util.Caller: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.util.Caller: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.util.RequestCache: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.util.RequestCache: void put(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.util.RequestCache: java.lang.String get(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.util.RequestCache: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.util.RequestCache: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.api.util.XMLUtil: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.api.util.XMLUtil: javax.xml.parsers.DocumentBuilderFactory getDocumentBuilderFactory()>
     [java] Instrumenting <com.teleca.jamendo.api.util.XMLUtil: javax.xml.parsers.DocumentBuilder getDocumentBuilder()>
     [java] Instrumenting <com.teleca.jamendo.api.util.XMLUtil: org.w3c.dom.Document stringToDocument(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.api.util.XMLUtil: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.api.util.XMLUtil: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.db.AlbumDatabaseBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.db.AlbumDatabaseBuilder: com.teleca.jamendo.api.Album build(android.database.Cursor)>
     [java] Instrumenting <com.teleca.jamendo.db.AlbumDatabaseBuilder: android.content.ContentValues deconstruct(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.db.AlbumDatabaseBuilder: android.content.ContentValues deconstruct(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.db.AlbumDatabaseBuilder: java.lang.Object build(android.database.Cursor)>
     [java] Instrumenting <com.teleca.jamendo.db.AlbumDatabaseBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.db.AlbumDatabaseBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: void create()>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: void deletePlaylist(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: java.util.ArrayList getAvailablePlaylists()>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: com.teleca.jamendo.api.Playlist loadPlaylist(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: void savePlaylist(com.teleca.jamendo.api.Playlist,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: boolean playlistExists(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: void addRadioToRecent(com.teleca.jamendo.api.Radio)>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: java.util.ArrayList getRecentRadios(int)>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: void addToFavorites(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: com.teleca.jamendo.api.Playlist getFavorites()>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: void removeFromFavorites(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: java.lang.String queryForFileName(java.lang.String,android.database.sqlite.SQLiteDatabase)>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: android.database.sqlite.SQLiteDatabase getDb()>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.db.DatabaseImpl: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.db.RadioDatabaseBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.db.RadioDatabaseBuilder: com.teleca.jamendo.api.Radio build(android.database.Cursor)>
     [java] Instrumenting <com.teleca.jamendo.db.RadioDatabaseBuilder: android.content.ContentValues deconstruct(com.teleca.jamendo.api.Radio)>
     [java] Instrumenting <com.teleca.jamendo.db.RadioDatabaseBuilder: android.content.ContentValues deconstruct(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.db.RadioDatabaseBuilder: java.lang.Object build(android.database.Cursor)>
     [java] Instrumenting <com.teleca.jamendo.db.RadioDatabaseBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.db.RadioDatabaseBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.db.TrackDatabaseBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.db.TrackDatabaseBuilder: com.teleca.jamendo.api.Track build(android.database.Cursor)>
     [java] Instrumenting <com.teleca.jamendo.db.TrackDatabaseBuilder: android.content.ContentValues deconstruct(com.teleca.jamendo.api.Track)>
     [java] Instrumenting <com.teleca.jamendo.db.TrackDatabaseBuilder: android.content.ContentValues deconstruct(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.db.TrackDatabaseBuilder: java.lang.Object build(android.database.Cursor)>
     [java] Instrumenting <com.teleca.jamendo.db.TrackDatabaseBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.db.TrackDatabaseBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$1: void <init>(com.teleca.jamendo.dialog.AboutDialog,android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$1: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$2: void <init>(com.teleca.jamendo.dialog.AboutDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$2: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$3: void <init>(com.teleca.jamendo.dialog.AboutDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$3: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$3: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog$3: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog: void <init>(android.app.Activity,int)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog: void <init>(android.app.Activity,boolean,android.content.DialogInterface$OnCancelListener)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog: void init(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog: android.widget.ViewFlipper access$000(com.teleca.jamendo.dialog.AboutDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog: android.widget.Button access$100(com.teleca.jamendo.dialog.AboutDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AboutDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog$1: void <init>(com.teleca.jamendo.dialog.AddToPlaylistDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog$1: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog$2: void <init>(com.teleca.jamendo.dialog.AddToPlaylistDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: void <init>(android.app.Activity,int)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: void <init>(android.app.Activity,boolean,android.content.DialogInterface$OnCancelListener)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: void init(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: void setPlaylistEntry(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: void setPlaylistAlbum(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: com.teleca.jamendo.api.PlaylistEntry getPlaylistEntry()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: void addToPlaylist(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: android.widget.EditText access$000(com.teleca.jamendo.dialog.AddToPlaylistDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: void access$100(com.teleca.jamendo.dialog.AddToPlaylistDialog,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AddToPlaylistDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AlbumLoadingDialog: void <init>(android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AlbumLoadingDialog: java.lang.Integer doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.AlbumLoadingDialog: void doStuffWithResult(java.lang.Integer)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AlbumLoadingDialog: void loadReviews(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AlbumLoadingDialog: void loadTracks(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AlbumLoadingDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.dialog.AlbumLoadingDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.AlbumLoadingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.AlbumLoadingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.ArtistLoadingDialog: void <init>(android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.dialog.ArtistLoadingDialog: com.teleca.jamendo.api.Artist doInBackground(java.lang.String[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.ArtistLoadingDialog: void doStuffWithResult(com.teleca.jamendo.api.Artist)>
     [java] Instrumenting <com.teleca.jamendo.dialog.ArtistLoadingDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.dialog.ArtistLoadingDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.ArtistLoadingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.ArtistLoadingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer$1: void <init>(com.teleca.jamendo.dialog.CustomEqualizer,short,short)>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer$1: void onProgressChanged(android.widget.SeekBar,int,boolean)>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer$1: void onStartTrackingTouch(android.widget.SeekBar)>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer$1: void onStopTrackingTouch(android.widget.SeekBar)>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer$2: void <init>(com.teleca.jamendo.dialog.CustomEqualizer)>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer$2: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer: void <init>(android.app.Activity)>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer: void onCreate(android.os.Bundle)>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer: void setupEqualizerFxAndUI()>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer: android.media.audiofx.Equalizer access$000(com.teleca.jamendo.dialog.CustomEqualizer)>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer: android.app.Dialog access$100(com.teleca.jamendo.dialog.CustomEqualizer)>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.CustomEqualizer: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog$1: void <init>(com.teleca.jamendo.dialog.LoadingDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog$1: void onCancel(android.content.DialogInterface)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog: void <init>(android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog: void onCancelled()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog: void onPreExecute()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog: void onPostExecute(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog: void failMsg()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog: void onProgressUpdate(com.teleca.jamendo.api.WSError[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog: void doCancel()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog: void onProgressUpdate(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LoadingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$LyricsTask: void <init>(com.teleca.jamendo.dialog.LyricsDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$LyricsTask: java.lang.String doInBackground(com.teleca.jamendo.api.Track[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$LyricsTask: void onPostExecute(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$LyricsTask: void onProgressUpdate(com.teleca.jamendo.api.WSError[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$LyricsTask: void onProgressUpdate(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$LyricsTask: void onPostExecute(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$LyricsTask: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$LyricsTask: void <init>(com.teleca.jamendo.dialog.LyricsDialog,com.teleca.jamendo.dialog.LyricsDialog$1)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$LyricsTask: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog$LyricsTask: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog: void <init>(android.app.Activity,com.teleca.jamendo.api.Track)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog: void init(android.app.Activity,com.teleca.jamendo.api.Track)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog: void showLyrics()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog: java.lang.String access$102(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog: void access$200(com.teleca.jamendo.dialog.LyricsDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog: android.app.Activity access$300(com.teleca.jamendo.dialog.LyricsDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.LyricsDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlayerAlbumLoadingDialog: void <init>(android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlayerAlbumLoadingDialog: com.teleca.jamendo.api.Track[] doInBackground(com.teleca.jamendo.api.Album[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlayerAlbumLoadingDialog: void doStuffWithResult(com.teleca.jamendo.api.Track[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlayerAlbumLoadingDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlayerAlbumLoadingDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlayerAlbumLoadingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlayerAlbumLoadingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlaylistRemoteLoadingDialog: void <init>(android.app.Activity,int,int,android.content.Intent)>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlaylistRemoteLoadingDialog: com.teleca.jamendo.api.Playlist doInBackground(com.teleca.jamendo.api.PlaylistRemote[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlaylistRemoteLoadingDialog: void doStuffWithResult(com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlaylistRemoteLoadingDialog: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlaylistRemoteLoadingDialog: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlaylistRemoteLoadingDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.PlaylistRemoteLoadingDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.StarredAlbumLoading: void <init>(android.app.Activity,int,int)>
     [java] Instrumenting <com.teleca.jamendo.dialog.StarredAlbumLoading: com.teleca.jamendo.api.Album[] doInBackground(java.lang.String[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.StarredAlbumLoading: void doStuffWithResult(com.teleca.jamendo.api.Album[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.StarredAlbumLoading: void doStuffWithResult(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.dialog.StarredAlbumLoading: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.dialog.StarredAlbumLoading: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.StarredAlbumLoading: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.TutorialDialog$1: void <init>(com.teleca.jamendo.dialog.TutorialDialog)>
     [java] Instrumenting <com.teleca.jamendo.dialog.TutorialDialog$1: void onClick(android.view.View)>
     [java] Instrumenting <com.teleca.jamendo.dialog.TutorialDialog$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.TutorialDialog$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.dialog.TutorialDialog: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.dialog.TutorialDialog: void <init>(android.content.Context,int)>
     [java] Instrumenting <com.teleca.jamendo.dialog.TutorialDialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>
     [java] Instrumenting <com.teleca.jamendo.dialog.TutorialDialog: void initialize(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.dialog.TutorialDialog: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.dialog.TutorialDialog: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.gestures.GestureCommandRegister: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.gestures.GestureCommandRegister: void registerCommand(java.lang.String,com.teleca.jamendo.gestures.GestureCommand)>
     [java] Instrumenting <com.teleca.jamendo.gestures.GestureCommandRegister: com.teleca.jamendo.gestures.GestureCommand getCommand(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.gestures.GestureCommandRegister: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.gestures.GestureCommandRegister: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.gestures.GesturesHandler: void <init>(android.content.Context,com.teleca.jamendo.gestures.GestureCommandRegister)>
     [java] Instrumenting <com.teleca.jamendo.gestures.GesturesHandler: boolean load()>
     [java] Instrumenting <com.teleca.jamendo.gestures.GesturesHandler: void onGesturePerformed(android.gesture.GestureOverlayView,android.gesture.Gesture)>
     [java] Instrumenting <com.teleca.jamendo.gestures.GesturesHandler: void setRegister(com.teleca.jamendo.gestures.GestureCommandRegister)>
     [java] Instrumenting <com.teleca.jamendo.gestures.GesturesHandler: com.teleca.jamendo.gestures.GestureCommandRegister getRegister()>
     [java] Instrumenting <com.teleca.jamendo.gestures.GesturesHandler: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.gestures.GesturesHandler: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureCommandRegiser: void <init>(com.teleca.jamendo.media.PlayerEngine)>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureCommandRegiser: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureCommandRegiser: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureNextCommand: void <init>(com.teleca.jamendo.media.PlayerEngine)>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureNextCommand: void execute()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureNextCommand: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureNextCommand: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGesturePlayCommand: void <init>(com.teleca.jamendo.media.PlayerEngine)>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGesturePlayCommand: void execute()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGesturePlayCommand: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGesturePlayCommand: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGesturePrevCommand: void <init>(com.teleca.jamendo.media.PlayerEngine)>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGesturePrevCommand: void execute()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGesturePrevCommand: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGesturePrevCommand: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureStopCommand: void <init>(com.teleca.jamendo.media.PlayerEngine)>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureStopCommand: void execute()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureStopCommand: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.gestures.PlayerGestureStopCommand: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$1: void <init>(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$1: void run()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$2: void <init>(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$2: void onCompletion(android.media.MediaPlayer)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$3: void <init>(com.teleca.jamendo.media.PlayerEngineImpl,com.teleca.jamendo.media.PlayerEngineImpl$InternalMediaPlayer)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$3: void onPrepared(android.media.MediaPlayer)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$3: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$3: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$4: void <init>(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$4: void onBufferingUpdate(android.media.MediaPlayer,int)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$4: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$4: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$5: void <init>(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$5: boolean onError(android.media.MediaPlayer,int,int)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$5: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$5: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$InternalMediaPlayer: void <init>(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$InternalMediaPlayer: void <init>(com.teleca.jamendo.media.PlayerEngineImpl,com.teleca.jamendo.media.PlayerEngineImpl$1)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$InternalMediaPlayer: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl$InternalMediaPlayer: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void next()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void openPlaylist(com.teleca.jamendo.api.Playlist)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void pause()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void play()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void prev()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void skipTo(int)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void stop()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void cleanUp()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: com.teleca.jamendo.media.PlayerEngineImpl$InternalMediaPlayer build(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: com.teleca.jamendo.api.Playlist getPlaylist()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: boolean isPlaying()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void setListener(com.teleca.jamendo.media.PlayerEngineListener)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void setPlaybackMode(com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode getPlaybackMode()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void forward(int)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void rewind(int)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void prevList()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: com.teleca.jamendo.media.PlayerEngineListener access$000(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: com.teleca.jamendo.media.PlayerEngineImpl$InternalMediaPlayer access$100(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: android.os.Handler access$200(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: com.teleca.jamendo.api.Playlist access$400(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: long access$500(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: long access$602(com.teleca.jamendo.media.PlayerEngineImpl,long)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: long access$502(com.teleca.jamendo.media.PlayerEngineImpl,long)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: long access$600(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: long access$608(com.teleca.jamendo.media.PlayerEngineImpl)>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.media.PlayerEngineImpl: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService$1: void <init>(com.teleca.jamendo.service.DownloadService)>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService$1: void downloadEnded(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService$1: void downloadStarted()>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: android.os.IBinder onBind(android.content.Intent)>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: void onCreate()>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: void onStart(android.content.Intent,int)>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: void onDestroy()>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: void displayNotifcation(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: void addToDownloadQueue(com.teleca.jamendo.api.PlaylistEntry,int)>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: void notifyScanCompleted()>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: com.teleca.jamendo.util.download.DownloadProvider access$000(com.teleca.jamendo.service.DownloadService)>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: void access$100(com.teleca.jamendo.service.DownloadService,com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.service.DownloadService: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$1: void <init>(com.teleca.jamendo.service.PlayerService)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$1: void onCallStateChanged(int,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$2: void <init>(com.teleca.jamendo.service.PlayerService)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$2: void onTrackBuffering(int)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$2: void onTrackChanged(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$2: void onTrackProgress(int)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$2: void onTrackStop()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$2: boolean onTrackStart()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$2: void onTrackPause()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$2: void onTrackStreamError()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: android.os.IBinder onBind(android.content.Intent)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: void onCreate()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: void onStart(android.content.Intent,int)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: void updatePlaylist()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: void onDestroy()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: void scrobblerMetaChanged()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: void displayNotifcation(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: com.teleca.jamendo.media.PlayerEngine access$000(com.teleca.jamendo.service.PlayerService)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: com.teleca.jamendo.media.PlayerEngineListener access$100(com.teleca.jamendo.service.PlayerService)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: void access$200(com.teleca.jamendo.service.PlayerService,com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: void access$300(com.teleca.jamendo.service.PlayerService)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: android.net.wifi.WifiManager$WifiLock access$400(com.teleca.jamendo.service.PlayerService)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: android.app.NotificationManager access$500(com.teleca.jamendo.service.PlayerService)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: android.net.wifi.WifiManager access$600(com.teleca.jamendo.service.PlayerService)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: android.telephony.TelephonyManager access$700(com.teleca.jamendo.service.PlayerService)>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.service.PlayerService: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.DrawableAccessor: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.util.DrawableAccessor: android.graphics.drawable.BitmapDrawable construct(android.content.res.Resources,android.graphics.Bitmap)>
     [java] Instrumenting <com.teleca.jamendo.util.DrawableAccessor: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.DrawableAccessor: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.FixedViewFlipper: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.util.FixedViewFlipper: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.teleca.jamendo.util.FixedViewFlipper: void onDetachedFromWindow()>
     [java] Instrumenting <com.teleca.jamendo.util.FixedViewFlipper: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.FixedViewFlipper: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.Helper: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.util.Helper: java.lang.String secondsToString(int)>
     [java] Instrumenting <com.teleca.jamendo.util.Helper: java.util.ArrayList getLanguageCodes(java.util.ArrayList)>
     [java] Instrumenting <com.teleca.jamendo.util.Helper: java.util.ArrayList getLanguageNames(java.util.ArrayList,android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.util.Helper: void share(android.app.Activity,com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.util.Helper: void share(android.app.Activity,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.util.Helper: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.Helper: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.ImageCache: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.util.ImageCache: boolean isCached(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.util.ImageCache: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.ImageCache: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp$1: void <init>(com.teleca.jamendo.util.OnSeekToListenerImp,long,long)>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp$1: void onTick(long)>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp$1: void onFinish()>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp$2: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp$2: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp: void <init>(com.teleca.jamendo.activity.PlayerActivity,com.teleca.jamendo.media.PlayerEngine,com.teleca.jamendo.util.SeekToMode)>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp: boolean onTouch(android.view.View,android.view.MotionEvent)>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.OnSeekToListenerImp: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.SeekToMode: com.teleca.jamendo.util.SeekToMode[] values()>
     [java] Instrumenting <com.teleca.jamendo.util.SeekToMode: com.teleca.jamendo.util.SeekToMode valueOf(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.util.SeekToMode: void <init>(java.lang.String,int)>
     [java] Instrumenting <com.teleca.jamendo.util.SeekToMode: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.SeekToMode: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DatabaseUpdater: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DatabaseUpdater: void setUpdater(com.teleca.jamendo.util.download.DatabaseUpdater)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DatabaseUpdater: com.teleca.jamendo.util.download.DatabaseUpdater getUpdater()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DatabaseUpdater: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DatabaseUpdater: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$DatabaseUpdaterV1: void <init>(com.teleca.jamendo.util.download.DownloadDatabaseImpl)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$DatabaseUpdaterV1: void <init>(com.teleca.jamendo.util.download.DownloadDatabaseImpl,com.teleca.jamendo.util.download.DatabaseUpdater)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$DatabaseUpdaterV1: void update()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$DatabaseUpdaterV1: void createTables()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$DatabaseUpdaterV1: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$DatabaseUpdaterV1: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$UpdaterBuilder: void <init>(com.teleca.jamendo.util.download.DownloadDatabaseImpl)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$UpdaterBuilder: com.teleca.jamendo.util.download.DatabaseUpdater getUpdater(int)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$UpdaterBuilder: void <init>(com.teleca.jamendo.util.download.DownloadDatabaseImpl,com.teleca.jamendo.util.download.DownloadDatabaseImpl$1)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$UpdaterBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl$UpdaterBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: void <init>(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: android.database.sqlite.SQLiteDatabase getDb()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: boolean addToLibrary(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: void setStatus(com.teleca.jamendo.api.PlaylistEntry,boolean)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: boolean trackAvailable(com.teleca.jamendo.api.Track)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: java.util.ArrayList getAllDownloadJobs()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: void remove(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: void finalize()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: android.database.sqlite.SQLiteDatabase access$100(com.teleca.jamendo.util.download.DownloadDatabaseImpl)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadDatabaseImpl: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadHelper: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadHelper: java.lang.String getFileName(com.teleca.jamendo.api.PlaylistEntry,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadHelper: java.lang.String getRelativePath(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadHelper: java.lang.String getAbsolutePath(com.teleca.jamendo.api.PlaylistEntry,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadHelper: java.lang.String getDownloadPath()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadHelper: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadHelper: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: com.teleca.jamendo.api.PlaylistEntry getPlaylistEntry()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void setPlaylistEntry(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: java.lang.String getDestination()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void setDestination(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void <init>(com.teleca.jamendo.api.PlaylistEntry,java.lang.String,int,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void start()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void pause()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void resume()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void cancel()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void setListener(com.teleca.jamendo.util.download.DownloadJobListener)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: int getProgress()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void setProgress(int)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void setTotalSize(int)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: int getTotalSize()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void setDownloadedSize(int)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: int getDownloadedSize()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void notifyDownloadStarted()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void notifyDownloadEnded()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void setStartId(int)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: int getStartId()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void setFormat(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: java.lang.String getFormat()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJob: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJobBuilder: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJobBuilder: com.teleca.jamendo.util.download.DownloadJob build(android.database.Cursor)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJobBuilder: android.content.ContentValues deconstruct(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJobBuilder: android.content.ContentValues deconstruct(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJobBuilder: java.lang.Object build(android.database.Cursor)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJobBuilder: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadJobBuilder: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: void download(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: java.lang.String getTrackPath(com.teleca.jamendo.api.PlaylistEntry)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: java.util.ArrayList getAllDownloads()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: java.util.ArrayList getCompletedDownloads()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: java.util.ArrayList getQueuedDownloads()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: com.teleca.jamendo.util.download.DownloadProvider getProvider()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: void deleteDownload(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: void removeDownloadFromDisk(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: void deregisterDownloadObserver(com.teleca.jamendo.util.download.DownloadObserver)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: void registerDownloadObserver(com.teleca.jamendo.util.download.DownloadObserver)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: void notifyObservers()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadManagerImpl: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: void <init>(com.teleca.jamendo.util.download.DownloadManager)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: void loadOldDownloads()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: java.util.ArrayList getAllDownloads()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: java.util.ArrayList getCompletedDownloads()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: java.util.ArrayList getQueuedDownloads()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: void downloadCompleted(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: boolean queueDownload(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: void removeDownload(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: boolean trackAvailable(com.teleca.jamendo.api.Track)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadProviderDbImpl: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadTask: void <init>(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadTask: void onPreExecute()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadTask: java.lang.Boolean doInBackground(java.lang.Void[])>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadTask: void onPostExecute(java.lang.Boolean)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadTask: java.lang.Boolean downloadFile(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadTask: void downloadCover(com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadTask: void onPostExecute(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadTask: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadTask: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.DownloadTask: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.util.download.MediaScannerNotifier: void <init>(com.teleca.jamendo.service.DownloadService,com.teleca.jamendo.util.download.DownloadJob)>
     [java] Instrumenting <com.teleca.jamendo.util.download.MediaScannerNotifier: void onMediaScannerConnected()>
     [java] Instrumenting <com.teleca.jamendo.util.download.MediaScannerNotifier: void onScanCompleted(java.lang.String,android.net.Uri)>
     [java] Instrumenting <com.teleca.jamendo.util.download.MediaScannerNotifier: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.util.download.MediaScannerNotifier: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.widget.AlbumBar: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.teleca.jamendo.widget.AlbumBar: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.widget.AlbumBar: void init()>
     [java] Instrumenting <com.teleca.jamendo.widget.AlbumBar: void setAlbum(com.teleca.jamendo.api.Album)>
     [java] Instrumenting <com.teleca.jamendo.widget.AlbumBar: void setDescription(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.AlbumBar: void setDescription(int)>
     [java] Instrumenting <com.teleca.jamendo.widget.AlbumBar: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.widget.AlbumBar: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.widget.ArtistBar: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.teleca.jamendo.widget.ArtistBar: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.widget.ArtistBar: void init()>
     [java] Instrumenting <com.teleca.jamendo.widget.ArtistBar: void setArtist(com.teleca.jamendo.api.Artist)>
     [java] Instrumenting <com.teleca.jamendo.widget.ArtistBar: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.widget.ArtistBar: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.widget.FailureBar: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.teleca.jamendo.widget.FailureBar: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.widget.FailureBar: void init()>
     [java] Instrumenting <com.teleca.jamendo.widget.FailureBar: void setText(int)>
     [java] Instrumenting <com.teleca.jamendo.widget.FailureBar: void setOnRetryListener(android.view.View$OnClickListener)>
     [java] Instrumenting <com.teleca.jamendo.widget.FailureBar: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.widget.FailureBar: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.widget.FileLastModifSort: void <init>()>
     [java] Instrumenting <com.teleca.jamendo.widget.FileLastModifSort: int compare(java.io.File,java.io.File)>
     [java] Instrumenting <com.teleca.jamendo.widget.FileLastModifSort: int compare(java.lang.Object,java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.widget.FileLastModifSort: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.widget.FileLastModifSort: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.teleca.jamendo.widget.ProgressBar: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.widget.ProgressBar: void init()>
     [java] Instrumenting <com.teleca.jamendo.widget.ProgressBar: void setText(int)>
     [java] Instrumenting <com.teleca.jamendo.widget.ProgressBar: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.widget.ProgressBar: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectableLayout: com.teleca.jamendo.widget.ReflectiveSurface getReflectiveImageView()>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectableLayout: void setReflectiveSurface(com.teleca.jamendo.widget.ReflectiveSurface)>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectableLayout: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectableLayout: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectableLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectableLayout: void onDraw(android.graphics.Canvas)>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectableLayout: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectableLayout: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectiveSurface: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectiveSurface: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectiveSurface: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectiveSurface: void setReflectableLayout(com.teleca.jamendo.widget.ReflectableLayout)>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectiveSurface: com.teleca.jamendo.widget.ReflectableLayout getReflectableLayout()>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectiveSurface: void onDraw(android.graphics.Canvas)>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectiveSurface: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.widget.ReflectiveSurface: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView$DownloadTask: void <init>(com.teleca.jamendo.widget.RemoteImageView)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView$DownloadTask: void onPreExecute()>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView$DownloadTask: java.lang.String doInBackground(java.lang.String[])>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView$DownloadTask: void onPostExecute(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView$DownloadTask: void onPostExecute(java.lang.Object)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView$DownloadTask: java.lang.Object doInBackground(java.lang.Object[])>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView$DownloadTask: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView$DownloadTask: boolean[][] $VRi()>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void <init>(android.content.Context,android.util.AttributeSet)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void <init>(android.content.Context)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void init()>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void setImageUrl(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void setDefaultImage(java.lang.Integer)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void loadDefaultImage()>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void setImageUrl(java.lang.String,int,android.widget.ListView)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void saveBmpToSd(android.graphics.Bitmap,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: java.lang.String convertUrlToFileName(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: java.lang.String getDirectory(java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void updateFileTime(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void removeAlbumCoversCache(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void removeRadioCoversCache(java.lang.String,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void clearCache()>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: int freeSpaceOnSd()>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void updateCacheSize()>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void access$000(com.teleca.jamendo.widget.RemoteImageView)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: java.lang.String access$100(com.teleca.jamendo.widget.RemoteImageView)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void access$200(com.teleca.jamendo.widget.RemoteImageView,android.graphics.Bitmap,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: android.widget.ListView access$300(com.teleca.jamendo.widget.RemoteImageView)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: int access$400(com.teleca.jamendo.widget.RemoteImageView)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: java.lang.String access$502(com.teleca.jamendo.widget.RemoteImageView,java.lang.String)>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: void <clinit>()>
     [java] Instrumenting <com.teleca.jamendo.widget.RemoteImageView: boolean[][] $VRi()>
     [java] Transforming acteve.symbolic.SymbolicOperations... 
     [java] Transforming com.teleca.jamendo.BuildConfig... 
     [java] Transforming com.teleca.jamendo.EmmaInstrument.EmmaInstrumentation... 
     [java] Transforming com.teleca.jamendo.EmmaInstrument.FinishListener... 
     [java] Transforming com.teleca.jamendo.EmmaInstrument.InstrumentedActivity$CoverageCollector... 
     [java] Transforming com.teleca.jamendo.EmmaInstrument.InstrumentedActivity... 
     [java] Transforming com.teleca.jamendo.EmmaInstrument.SMSInstrumentedReceiver... 
     [java] Transforming com.teleca.jamendo.JamendoApplication$1... 
     [java] Transforming com.teleca.jamendo.JamendoApplication$IntentPlayerEngine... 
     [java] Transforming com.teleca.jamendo.JamendoApplication... 
     [java] Transforming com.teleca.jamendo.R$anim... 
     [java] Transforming com.teleca.jamendo.R$array... 
     [java] Transforming com.teleca.jamendo.R$attr... 
     [java] Transforming com.teleca.jamendo.R$dimen... 
     [java] Transforming com.teleca.jamendo.R$drawable... 
     [java] Transforming com.teleca.jamendo.R$id... 
     [java] Transforming com.teleca.jamendo.R$layout... 
     [java] Transforming com.teleca.jamendo.R$menu... 
     [java] Transforming com.teleca.jamendo.R$raw... 
     [java] Transforming com.teleca.jamendo.R$string... 
     [java] Transforming com.teleca.jamendo.R$xml... 
     [java] Transforming com.teleca.jamendo.R... 
     [java] Transforming com.teleca.jamendo.activity.AlbumActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.AlbumActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.AlbumActivity$3... 
     [java] Transforming com.teleca.jamendo.activity.AlbumActivity... 
     [java] Transforming com.teleca.jamendo.activity.ArtistActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.ArtistActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.ArtistActivity$3... 
     [java] Transforming com.teleca.jamendo.activity.ArtistActivity$4... 
     [java] Transforming com.teleca.jamendo.activity.ArtistActivity$AddToPlaylistLoadingDialog... 
     [java] Transforming com.teleca.jamendo.activity.ArtistActivity... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity$3... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity$4... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity$5... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity$6... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity$7... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity$Mode... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity$PlaylistPurpleEntry... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity$RemotePlaylistTask... 
     [java] Transforming com.teleca.jamendo.activity.BrowsePlaylistActivity... 
     [java] Transforming com.teleca.jamendo.activity.DownloadActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.DownloadActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.DownloadActivity... 
     [java] Transforming com.teleca.jamendo.activity.EqualizerActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.EqualizerActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.EqualizerActivity... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$3... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$4... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$5... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$6... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$7... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$8... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$NewsTask$1... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$NewsTask... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity$Top100Task... 
     [java] Transforming com.teleca.jamendo.activity.HomeActivity... 
     [java] Transforming com.teleca.jamendo.activity.IntentDistributorActivity$AlbumLoadingDialog... 
     [java] Transforming com.teleca.jamendo.activity.IntentDistributorActivity... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$10... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$11... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$12... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$3... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$4... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$5... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$6... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$7... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$8... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$9... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$CupcakeListener... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$LicenseTask... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity$UriLoadingDialog... 
     [java] Transforming com.teleca.jamendo.activity.PlayerActivity... 
     [java] Transforming com.teleca.jamendo.activity.PlaylistActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.PlaylistActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.PlaylistActivity... 
     [java] Transforming com.teleca.jamendo.activity.RadioActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.RadioActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.RadioActivity$3... 
     [java] Transforming com.teleca.jamendo.activity.RadioActivity$4... 
     [java] Transforming com.teleca.jamendo.activity.RadioActivity$RadioLoadingDialog... 
     [java] Transforming com.teleca.jamendo.activity.RadioActivity$RadioPlaylistLoadingDialog... 
     [java] Transforming com.teleca.jamendo.activity.RadioActivity$RadioSearchDialog... 
     [java] Transforming com.teleca.jamendo.activity.RadioActivity... 
     [java] Transforming com.teleca.jamendo.activity.SearchActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.SearchActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.SearchActivity$3... 
     [java] Transforming com.teleca.jamendo.activity.SearchActivity$SearchMode... 
     [java] Transforming com.teleca.jamendo.activity.SearchActivity$SearchingDialog... 
     [java] Transforming com.teleca.jamendo.activity.SearchActivity... 
     [java] Transforming com.teleca.jamendo.activity.SettingsActivity... 
     [java] Transforming com.teleca.jamendo.activity.SplashscreenActivity$1... 
     [java] Transforming com.teleca.jamendo.activity.SplashscreenActivity$2... 
     [java] Transforming com.teleca.jamendo.activity.SplashscreenActivity$3... 
     [java] Transforming com.teleca.jamendo.activity.SplashscreenActivity... 
     [java] Transforming com.teleca.jamendo.activity.StarredAlbumsActivity... 
     [java] Transforming com.teleca.jamendo.adapter.AlbumAdapter$ViewHolder... 
     [java] Transforming com.teleca.jamendo.adapter.AlbumAdapter... 
     [java] Transforming com.teleca.jamendo.adapter.AlbumGridAdapter$ViewHolder... 
     [java] Transforming com.teleca.jamendo.adapter.AlbumGridAdapter... 
     [java] Transforming com.teleca.jamendo.adapter.ArrayListAdapter... 
     [java] Transforming com.teleca.jamendo.adapter.DownloadJobAdapter$ViewHolder... 
     [java] Transforming com.teleca.jamendo.adapter.DownloadJobAdapter... 
     [java] Transforming com.teleca.jamendo.adapter.ImageAdapter$ViewHolder... 
     [java] Transforming com.teleca.jamendo.adapter.ImageAdapter... 
     [java] Transforming com.teleca.jamendo.adapter.PlaylistAdapter$ViewHolder... 
     [java] Transforming com.teleca.jamendo.adapter.PlaylistAdapter... 
     [java] Transforming com.teleca.jamendo.adapter.PlaylistRemoteAdapter$ViewHolder... 
     [java] Transforming com.teleca.jamendo.adapter.PlaylistRemoteAdapter... 
     [java] Transforming com.teleca.jamendo.adapter.PurpleAdapter$ViewHolder... 
     [java] Transforming com.teleca.jamendo.adapter.PurpleAdapter... 
     [java] Transforming com.teleca.jamendo.adapter.PurpleEntry... 
     [java] Transforming com.teleca.jamendo.adapter.PurpleListener... 
     [java] Transforming com.teleca.jamendo.adapter.RadioAdapter$ViewHolder... 
     [java] Transforming com.teleca.jamendo.adapter.RadioAdapter... 
     [java] Transforming com.teleca.jamendo.adapter.ReviewAdapter$ViewHolder... 
     [java] Transforming com.teleca.jamendo.adapter.ReviewAdapter... 
     [java] Transforming com.teleca.jamendo.adapter.SeparatedListAdapter... 
     [java] Transforming com.teleca.jamendo.api.Album... 
     [java] Transforming com.teleca.jamendo.api.Artist... 
     [java] Transforming com.teleca.jamendo.api.JamendoGet2Api... 
     [java] Transforming com.teleca.jamendo.api.License... 
     [java] Transforming com.teleca.jamendo.api.Playlist$1... 
     [java] Transforming com.teleca.jamendo.api.Playlist$PlaylistPlaybackMode... 
     [java] Transforming com.teleca.jamendo.api.Playlist... 
     [java] Transforming com.teleca.jamendo.api.PlaylistEntry... 
     [java] Transforming com.teleca.jamendo.api.PlaylistRemote... 
     [java] Transforming com.teleca.jamendo.api.Radio... 
     [java] Transforming com.teleca.jamendo.api.Review... 
     [java] Transforming com.teleca.jamendo.api.Track... 
     [java] Transforming com.teleca.jamendo.api.WSError... 
     [java] Transforming com.teleca.jamendo.api.impl.AlbumBuilder... 
     [java] Transforming com.teleca.jamendo.api.impl.AlbumFunctions... 
     [java] Transforming com.teleca.jamendo.api.impl.ArtistBuilder... 
     [java] Transforming com.teleca.jamendo.api.impl.ArtistFunctions... 
     [java] Transforming com.teleca.jamendo.api.impl.JSONBuilder... 
     [java] Transforming com.teleca.jamendo.api.impl.JamendoGet2ApiImpl... 
     [java] Transforming com.teleca.jamendo.api.impl.LicenseBuilder... 
     [java] Transforming com.teleca.jamendo.api.impl.PlaylistBuilder... 
     [java] Transforming com.teleca.jamendo.api.impl.PlaylistFunctions... 
     [java] Transforming com.teleca.jamendo.api.impl.RSSFunctions... 
     [java] Transforming com.teleca.jamendo.api.impl.RadioBuilder... 
     [java] Transforming com.teleca.jamendo.api.impl.RadioFunctions... 
     [java] Transforming com.teleca.jamendo.api.impl.ReviewBuilder... 
     [java] Transforming com.teleca.jamendo.api.impl.ReviewFunctions... 
     [java] Transforming com.teleca.jamendo.api.impl.TrackBuilder... 
     [java] Transforming com.teleca.jamendo.api.impl.TrackComparator... 
     [java] Transforming com.teleca.jamendo.api.util.Caller... 
     [java] Transforming com.teleca.jamendo.api.util.RequestCache... 
     [java] Transforming com.teleca.jamendo.api.util.XMLUtil... 
     [java] Transforming com.teleca.jamendo.db.AlbumDatabaseBuilder... 
     [java] Transforming com.teleca.jamendo.db.Database... 
     [java] Transforming com.teleca.jamendo.db.DatabaseBuilder... 
     [java] Transforming com.teleca.jamendo.db.DatabaseImpl... 
     [java] Transforming com.teleca.jamendo.db.RadioDatabaseBuilder... 
     [java] Transforming com.teleca.jamendo.db.TrackDatabaseBuilder... 
     [java] Transforming com.teleca.jamendo.dialog.AboutDialog$1... 
     [java] Transforming com.teleca.jamendo.dialog.AboutDialog$2... 
     [java] Transforming com.teleca.jamendo.dialog.AboutDialog$3... 
     [java] Transforming com.teleca.jamendo.dialog.AboutDialog... 
     [java] Transforming com.teleca.jamendo.dialog.AddToPlaylistDialog$1... 
     [java] Transforming com.teleca.jamendo.dialog.AddToPlaylistDialog$2... 
     [java] Transforming com.teleca.jamendo.dialog.AddToPlaylistDialog... 
     [java] Transforming com.teleca.jamendo.dialog.AlbumLoadingDialog... 
     [java] Transforming com.teleca.jamendo.dialog.ArtistLoadingDialog... 
     [java] Transforming com.teleca.jamendo.dialog.CustomEqualizer$1... 
     [java] Transforming com.teleca.jamendo.dialog.CustomEqualizer$2... 
     [java] Transforming com.teleca.jamendo.dialog.CustomEqualizer... 
     [java] Transforming com.teleca.jamendo.dialog.LoadingDialog$1... 
     [java] Transforming com.teleca.jamendo.dialog.LoadingDialog... 
     [java] Transforming com.teleca.jamendo.dialog.LyricsDialog$1... 
     [java] Transforming com.teleca.jamendo.dialog.LyricsDialog$LyricsTask... 
     [java] Transforming com.teleca.jamendo.dialog.LyricsDialog... 
     [java] Transforming com.teleca.jamendo.dialog.PlayerAlbumLoadingDialog... 
     [java] Transforming com.teleca.jamendo.dialog.PlaylistRemoteLoadingDialog... 
     [java] Transforming com.teleca.jamendo.dialog.StarredAlbumLoading... 
     [java] Transforming com.teleca.jamendo.dialog.TutorialDialog$1... 
     [java] Transforming com.teleca.jamendo.dialog.TutorialDialog... 
     [java] Transforming com.teleca.jamendo.gestures.GestureCommand... 
     [java] Transforming com.teleca.jamendo.gestures.GestureCommandRegister... 
     [java] Transforming com.teleca.jamendo.gestures.GesturesHandler... 
     [java] Transforming com.teleca.jamendo.gestures.PlayerGestureCommandRegiser... 
     [java] Transforming com.teleca.jamendo.gestures.PlayerGestureNextCommand... 
     [java] Transforming com.teleca.jamendo.gestures.PlayerGesturePlayCommand... 
     [java] Transforming com.teleca.jamendo.gestures.PlayerGesturePrevCommand... 
     [java] Transforming com.teleca.jamendo.gestures.PlayerGestureStopCommand... 
     [java] Transforming com.teleca.jamendo.media.PlayerEngine... 
     [java] Transforming com.teleca.jamendo.media.PlayerEngineImpl$1... 
     [java] Transforming com.teleca.jamendo.media.PlayerEngineImpl$2... 
     [java] Transforming com.teleca.jamendo.media.PlayerEngineImpl$3... 
     [java] Transforming com.teleca.jamendo.media.PlayerEngineImpl$4... 
     [java] Transforming com.teleca.jamendo.media.PlayerEngineImpl$5... 
     [java] Transforming com.teleca.jamendo.media.PlayerEngineImpl$InternalMediaPlayer... 
     [java] Transforming com.teleca.jamendo.media.PlayerEngineImpl... 
     [java] Transforming com.teleca.jamendo.media.PlayerEngineListener... 
     [java] Transforming com.teleca.jamendo.service.DownloadService$1... 
     [java] Transforming com.teleca.jamendo.service.DownloadService... 
     [java] Transforming com.teleca.jamendo.service.PlayerService$1... 
     [java] Transforming com.teleca.jamendo.service.PlayerService$2... 
     [java] Transforming com.teleca.jamendo.service.PlayerService... 
     [java] Transforming com.teleca.jamendo.util.DrawableAccessor... 
     [java] Transforming com.teleca.jamendo.util.FixedViewFlipper... 
     [java] Transforming com.teleca.jamendo.util.Helper... 
     [java] Transforming com.teleca.jamendo.util.ImageCache... 
     [java] Transforming com.teleca.jamendo.util.OnSeekToListenerImp$1... 
     [java] Transforming com.teleca.jamendo.util.OnSeekToListenerImp$2... 
     [java] Transforming com.teleca.jamendo.util.OnSeekToListenerImp... 
     [java] Transforming com.teleca.jamendo.util.SeekToMode... 
     [java] Transforming com.teleca.jamendo.util.download.DatabaseUpdater... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadDatabase... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadDatabaseImpl$1... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadDatabaseImpl$DatabaseUpdaterV1... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadDatabaseImpl$UpdaterBuilder... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadDatabaseImpl... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadHelper... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadJob... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadJobBuilder... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadJobListener... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadManager... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadManagerImpl... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadObserver... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadProvider... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadProviderDbImpl... 
     [java] Transforming com.teleca.jamendo.util.download.DownloadTask... 
     [java] Transforming com.teleca.jamendo.util.download.MediaScannerNotifier... 
     [java] Transforming com.teleca.jamendo.widget.AlbumBar... 
     [java] Transforming com.teleca.jamendo.widget.ArtistBar... 
     [java] Transforming com.teleca.jamendo.widget.FailureBar... 
     [java] Transforming com.teleca.jamendo.widget.FileLastModifSort... 
     [java] Transforming com.teleca.jamendo.widget.OnAlbumClickListener... 
     [java] Transforming com.teleca.jamendo.widget.ProgressBar... 
     [java] Transforming com.teleca.jamendo.widget.ReflectableLayout... 
     [java] Transforming com.teleca.jamendo.widget.ReflectiveSurface... 
     [java] Transforming com.teleca.jamendo.widget.RemoteImageView$DownloadTask... 
     [java] Transforming com.teleca.jamendo.widget.RemoteImageView... 
     [java] Writing to acteve/symbolic/SymbolicOperations.class
     [java] Writing to com/teleca/jamendo/BuildConfig.class
     [java] Writing to com/teleca/jamendo/EmmaInstrument/EmmaInstrumentation.class
     [java] Writing to com/teleca/jamendo/EmmaInstrument/FinishListener.class
     [java] Writing to com/teleca/jamendo/EmmaInstrument/InstrumentedActivity$CoverageCollector.class
     [java] Writing to com/teleca/jamendo/EmmaInstrument/InstrumentedActivity.class
     [java] Writing to com/teleca/jamendo/EmmaInstrument/SMSInstrumentedReceiver.class
     [java] Writing to com/teleca/jamendo/JamendoApplication$1.class
     [java] Writing to com/teleca/jamendo/JamendoApplication$IntentPlayerEngine.class
     [java] Writing to com/teleca/jamendo/JamendoApplication.class
     [java] Writing to com/teleca/jamendo/R$anim.class
     [java] Writing to com/teleca/jamendo/R$array.class
     [java] Writing to com/teleca/jamendo/R$attr.class
     [java] Writing to com/teleca/jamendo/R$dimen.class
     [java] Writing to com/teleca/jamendo/R$drawable.class
     [java] Writing to com/teleca/jamendo/R$id.class
     [java] Writing to com/teleca/jamendo/R$layout.class
     [java] Writing to com/teleca/jamendo/R$menu.class
     [java] Writing to com/teleca/jamendo/R$raw.class
     [java] Writing to com/teleca/jamendo/R$string.class
     [java] Writing to com/teleca/jamendo/R$xml.class
     [java] Writing to com/teleca/jamendo/R.class
     [java] Writing to com/teleca/jamendo/activity/AlbumActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/AlbumActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/AlbumActivity$3.class
     [java] Writing to com/teleca/jamendo/activity/AlbumActivity.class
     [java] Writing to com/teleca/jamendo/activity/ArtistActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/ArtistActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/ArtistActivity$3.class
     [java] Writing to com/teleca/jamendo/activity/ArtistActivity$4.class
     [java] Writing to com/teleca/jamendo/activity/ArtistActivity$AddToPlaylistLoadingDialog.class
     [java] Writing to com/teleca/jamendo/activity/ArtistActivity.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity$3.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity$4.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity$5.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity$6.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity$7.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity$Mode.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity$PlaylistPurpleEntry.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity$RemotePlaylistTask.class
     [java] Writing to com/teleca/jamendo/activity/BrowsePlaylistActivity.class
     [java] Writing to com/teleca/jamendo/activity/DownloadActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/DownloadActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/DownloadActivity.class
     [java] Writing to com/teleca/jamendo/activity/EqualizerActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/EqualizerActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/EqualizerActivity.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$3.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$4.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$5.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$6.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$7.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$8.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$NewsTask$1.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$NewsTask.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity$Top100Task.class
     [java] Writing to com/teleca/jamendo/activity/HomeActivity.class
     [java] Writing to com/teleca/jamendo/activity/IntentDistributorActivity$AlbumLoadingDialog.class
     [java] Writing to com/teleca/jamendo/activity/IntentDistributorActivity.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$10.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$11.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$12.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$3.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$4.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$5.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$6.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$7.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$8.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$9.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$CupcakeListener.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$LicenseTask.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity$UriLoadingDialog.class
     [java] Writing to com/teleca/jamendo/activity/PlayerActivity.class
     [java] Writing to com/teleca/jamendo/activity/PlaylistActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/PlaylistActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/PlaylistActivity.class
     [java] Writing to com/teleca/jamendo/activity/RadioActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/RadioActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/RadioActivity$3.class
     [java] Writing to com/teleca/jamendo/activity/RadioActivity$4.class
     [java] Writing to com/teleca/jamendo/activity/RadioActivity$RadioLoadingDialog.class
     [java] Writing to com/teleca/jamendo/activity/RadioActivity$RadioPlaylistLoadingDialog.class
     [java] Writing to com/teleca/jamendo/activity/RadioActivity$RadioSearchDialog.class
     [java] Writing to com/teleca/jamendo/activity/RadioActivity.class
     [java] Writing to com/teleca/jamendo/activity/SearchActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/SearchActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/SearchActivity$3.class
     [java] Writing to com/teleca/jamendo/activity/SearchActivity$SearchMode.class
     [java] Writing to com/teleca/jamendo/activity/SearchActivity$SearchingDialog.class
     [java] Writing to com/teleca/jamendo/activity/SearchActivity.class
     [java] Writing to com/teleca/jamendo/activity/SettingsActivity.class
     [java] Writing to com/teleca/jamendo/activity/SplashscreenActivity$1.class
     [java] Writing to com/teleca/jamendo/activity/SplashscreenActivity$2.class
     [java] Writing to com/teleca/jamendo/activity/SplashscreenActivity$3.class
     [java] Writing to com/teleca/jamendo/activity/SplashscreenActivity.class
     [java] Writing to com/teleca/jamendo/activity/StarredAlbumsActivity.class
     [java] Writing to com/teleca/jamendo/adapter/AlbumAdapter$ViewHolder.class
     [java] Writing to com/teleca/jamendo/adapter/AlbumAdapter.class
     [java] Writing to com/teleca/jamendo/adapter/AlbumGridAdapter$ViewHolder.class
     [java] Writing to com/teleca/jamendo/adapter/AlbumGridAdapter.class
     [java] Writing to com/teleca/jamendo/adapter/ArrayListAdapter.class
     [java] Writing to com/teleca/jamendo/adapter/DownloadJobAdapter$ViewHolder.class
     [java] Writing to com/teleca/jamendo/adapter/DownloadJobAdapter.class
     [java] Writing to com/teleca/jamendo/adapter/ImageAdapter$ViewHolder.class
     [java] Writing to com/teleca/jamendo/adapter/ImageAdapter.class
     [java] Writing to com/teleca/jamendo/adapter/PlaylistAdapter$ViewHolder.class
     [java] Writing to com/teleca/jamendo/adapter/PlaylistAdapter.class
     [java] Writing to com/teleca/jamendo/adapter/PlaylistRemoteAdapter$ViewHolder.class
     [java] Writing to com/teleca/jamendo/adapter/PlaylistRemoteAdapter.class
     [java] Writing to com/teleca/jamendo/adapter/PurpleAdapter$ViewHolder.class
     [java] Writing to com/teleca/jamendo/adapter/PurpleAdapter.class
     [java] Writing to com/teleca/jamendo/adapter/PurpleEntry.class
     [java] Writing to com/teleca/jamendo/adapter/PurpleListener.class
     [java] Writing to com/teleca/jamendo/adapter/RadioAdapter$ViewHolder.class
     [java] Writing to com/teleca/jamendo/adapter/RadioAdapter.class
     [java] Writing to com/teleca/jamendo/adapter/ReviewAdapter$ViewHolder.class
     [java] Writing to com/teleca/jamendo/adapter/ReviewAdapter.class
     [java] Writing to com/teleca/jamendo/adapter/SeparatedListAdapter.class
     [java] Writing to com/teleca/jamendo/api/Album.class
     [java] Writing to com/teleca/jamendo/api/Artist.class
     [java] Writing to com/teleca/jamendo/api/JamendoGet2Api.class
     [java] Writing to com/teleca/jamendo/api/License.class
     [java] Writing to com/teleca/jamendo/api/Playlist$1.class
     [java] Writing to com/teleca/jamendo/api/Playlist$PlaylistPlaybackMode.class
     [java] Writing to com/teleca/jamendo/api/Playlist.class
     [java] Writing to com/teleca/jamendo/api/PlaylistEntry.class
     [java] Writing to com/teleca/jamendo/api/PlaylistRemote.class
     [java] Writing to com/teleca/jamendo/api/Radio.class
     [java] Writing to com/teleca/jamendo/api/Review.class
     [java] Writing to com/teleca/jamendo/api/Track.class
     [java] Writing to com/teleca/jamendo/api/WSError.class
     [java] Writing to com/teleca/jamendo/api/impl/AlbumBuilder.class
     [java] Writing to com/teleca/jamendo/api/impl/AlbumFunctions.class
     [java] Writing to com/teleca/jamendo/api/impl/ArtistBuilder.class
     [java] Writing to com/teleca/jamendo/api/impl/ArtistFunctions.class
     [java] Writing to com/teleca/jamendo/api/impl/JSONBuilder.class
     [java] Writing to com/teleca/jamendo/api/impl/JamendoGet2ApiImpl.class
     [java] Writing to com/teleca/jamendo/api/impl/LicenseBuilder.class
     [java] Writing to com/teleca/jamendo/api/impl/PlaylistBuilder.class
     [java] Writing to com/teleca/jamendo/api/impl/PlaylistFunctions.class
     [java] Writing to com/teleca/jamendo/api/impl/RSSFunctions.class
     [java] Writing to com/teleca/jamendo/api/impl/RadioBuilder.class
     [java] Writing to com/teleca/jamendo/api/impl/RadioFunctions.class
     [java] Writing to com/teleca/jamendo/api/impl/ReviewBuilder.class
     [java] Writing to com/teleca/jamendo/api/impl/ReviewFunctions.class
     [java] Writing to com/teleca/jamendo/api/impl/TrackBuilder.class
     [java] Writing to com/teleca/jamendo/api/impl/TrackComparator.class
     [java] Writing to com/teleca/jamendo/api/util/Caller.class
     [java] Writing to com/teleca/jamendo/api/util/RequestCache.class
     [java] Writing to com/teleca/jamendo/api/util/XMLUtil.class
     [java] Writing to com/teleca/jamendo/db/AlbumDatabaseBuilder.class
     [java] Writing to com/teleca/jamendo/db/Database.class
     [java] Writing to com/teleca/jamendo/db/DatabaseBuilder.class
     [java] Writing to com/teleca/jamendo/db/DatabaseImpl.class
     [java] Writing to com/teleca/jamendo/db/RadioDatabaseBuilder.class
     [java] Writing to com/teleca/jamendo/db/TrackDatabaseBuilder.class
     [java] Writing to com/teleca/jamendo/dialog/AboutDialog$1.class
     [java] Writing to com/teleca/jamendo/dialog/AboutDialog$2.class
     [java] Writing to com/teleca/jamendo/dialog/AboutDialog$3.class
     [java] Writing to com/teleca/jamendo/dialog/AboutDialog.class
     [java] Writing to com/teleca/jamendo/dialog/AddToPlaylistDialog$1.class
     [java] Writing to com/teleca/jamendo/dialog/AddToPlaylistDialog$2.class
     [java] Writing to com/teleca/jamendo/dialog/AddToPlaylistDialog.class
     [java] Writing to com/teleca/jamendo/dialog/AlbumLoadingDialog.class
     [java] Writing to com/teleca/jamendo/dialog/ArtistLoadingDialog.class
     [java] Writing to com/teleca/jamendo/dialog/CustomEqualizer$1.class
     [java] Writing to com/teleca/jamendo/dialog/CustomEqualizer$2.class
     [java] Writing to com/teleca/jamendo/dialog/CustomEqualizer.class
     [java] Writing to com/teleca/jamendo/dialog/LoadingDialog$1.class
     [java] Writing to com/teleca/jamendo/dialog/LoadingDialog.class
     [java] Writing to com/teleca/jamendo/dialog/LyricsDialog$1.class
     [java] Writing to com/teleca/jamendo/dialog/LyricsDialog$LyricsTask.class
     [java] Writing to com/teleca/jamendo/dialog/LyricsDialog.class
     [java] Writing to com/teleca/jamendo/dialog/PlayerAlbumLoadingDialog.class
     [java] Writing to com/teleca/jamendo/dialog/PlaylistRemoteLoadingDialog.class
     [java] Writing to com/teleca/jamendo/dialog/StarredAlbumLoading.class
     [java] Writing to com/teleca/jamendo/dialog/TutorialDialog$1.class
     [java] Writing to com/teleca/jamendo/dialog/TutorialDialog.class
     [java] Writing to com/teleca/jamendo/gestures/GestureCommand.class
     [java] Writing to com/teleca/jamendo/gestures/GestureCommandRegister.class
     [java] Writing to com/teleca/jamendo/gestures/GesturesHandler.class
     [java] Writing to com/teleca/jamendo/gestures/PlayerGestureCommandRegiser.class
     [java] Writing to com/teleca/jamendo/gestures/PlayerGestureNextCommand.class
     [java] Writing to com/teleca/jamendo/gestures/PlayerGesturePlayCommand.class
     [java] Writing to com/teleca/jamendo/gestures/PlayerGesturePrevCommand.class
     [java] Writing to com/teleca/jamendo/gestures/PlayerGestureStopCommand.class
     [java] Writing to com/teleca/jamendo/media/PlayerEngine.class
     [java] Writing to com/teleca/jamendo/media/PlayerEngineImpl$1.class
     [java] Writing to com/teleca/jamendo/media/PlayerEngineImpl$2.class
     [java] Writing to com/teleca/jamendo/media/PlayerEngineImpl$3.class
     [java] Writing to com/teleca/jamendo/media/PlayerEngineImpl$4.class
     [java] Writing to com/teleca/jamendo/media/PlayerEngineImpl$5.class
     [java] Writing to com/teleca/jamendo/media/PlayerEngineImpl$InternalMediaPlayer.class
     [java] Writing to com/teleca/jamendo/media/PlayerEngineImpl.class
     [java] Writing to com/teleca/jamendo/media/PlayerEngineListener.class
     [java] Writing to com/teleca/jamendo/service/DownloadService$1.class
     [java] Writing to com/teleca/jamendo/service/DownloadService.class
     [java] Writing to com/teleca/jamendo/service/PlayerService$1.class
     [java] Writing to com/teleca/jamendo/service/PlayerService$2.class
     [java] Writing to com/teleca/jamendo/service/PlayerService.class
     [java] Writing to com/teleca/jamendo/util/DrawableAccessor.class
     [java] Writing to com/teleca/jamendo/util/FixedViewFlipper.class
     [java] Writing to com/teleca/jamendo/util/Helper.class
     [java] Writing to com/teleca/jamendo/util/ImageCache.class
     [java] Writing to com/teleca/jamendo/util/OnSeekToListenerImp$1.class
     [java] Writing to com/teleca/jamendo/util/OnSeekToListenerImp$2.class
     [java] Writing to com/teleca/jamendo/util/OnSeekToListenerImp.class
     [java] Writing to com/teleca/jamendo/util/SeekToMode.class
     [java] Writing to com/teleca/jamendo/util/download/DatabaseUpdater.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadDatabase.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadDatabaseImpl$1.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadDatabaseImpl$DatabaseUpdaterV1.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadDatabaseImpl$UpdaterBuilder.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadDatabaseImpl.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadHelper.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadJob.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadJobBuilder.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadJobListener.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadManager.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadManagerImpl.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadObserver.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadProvider.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadProviderDbImpl.class
     [java] Writing to com/teleca/jamendo/util/download/DownloadTask.class
     [java] Writing to com/teleca/jamendo/util/download/MediaScannerNotifier.class
     [java] Writing to com/teleca/jamendo/widget/AlbumBar.class
     [java] Writing to com/teleca/jamendo/widget/ArtistBar.class
     [java] Writing to com/teleca/jamendo/widget/FailureBar.class
     [java] Writing to com/teleca/jamendo/widget/FileLastModifSort.class
     [java] Writing to com/teleca/jamendo/widget/OnAlbumClickListener.class
     [java] Writing to com/teleca/jamendo/widget/ProgressBar.class
     [java] Writing to com/teleca/jamendo/widget/ReflectableLayout.class
     [java] Writing to com/teleca/jamendo/widget/ReflectiveSurface.class
     [java] Writing to com/teleca/jamendo/widget/RemoteImageView$DownloadTask.class
     [java] Writing to com/teleca/jamendo/widget/RemoteImageView.class
     [java] Soot finished on Sun Nov 09 06:12:59 UTC 2014
     [java] Soot has run for 0 min. 42 sec.

-obfuscate:

-dex:
      [dex] input: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t/instrumented.jar
      [dex] input: /home/vagrant/android-sdk-linux/tools/lib/emma_device.jar
      [dex] Pre-Dexing /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/a3t/instrumented.jar -> instrumented-4476e59660fb9b801405fc8c4e5a3174.jar
      [dex] Using Pre-Dexed emma_device-e790229f52a04d2b195df6976ccc31d7.jar <- /home/vagrant/android-sdk-linux/tools/lib/emma_device.jar
      [dex] Found modified input file
      [dex] Converting compiled files and external libraries into /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/classes.dex...
       [dx] Merged dex A (241 defs/651.4KiB) with dex B (297 defs/326.8KiB). Result is 538 defs/1189.6KiB. Took 1.3s

-crunch:
   [crunch] Crunching PNG Files in source dir: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/res
   [crunch] To destination dir: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/res
   [crunch] Crunched 0 PNG files to update cache

-package-resources:
     [aapt] No changed resources or assets. SplashscreenActivity.ap_ remains untouched

-package:
[apkbuilder] Found modified input file
[apkbuilder] Creating SplashscreenActivity-debug-unaligned.apk and signing it with a debug key...

-post-package:

-do-debug:
 [zipalign] Running zip align on final apk...
     [echo] Debug Package: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/SplashscreenActivity-debug.apk
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/build.prop
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/build.prop
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/build.prop
[propertyfile] Updating property file: /vagrant/subjects/tool_subjects/dynodroid/com.teleca.jamendo_38_src/bin/build.prop

-post-build:

debug:

BUILD SUCCESSFUL
Total time: 1 minute 17 seconds
